[{"title":"WebService知识点","date":"2017-08-21T06:47:38.000Z","path":"2017/08/21/webservice2/","content":"<h2 id=\"三要素\"><a href=\"#三要素\" class=\"headerlink\" title=\"三要素\"></a>三要素</h2><h3 id=\"SOAP\"><a href=\"#SOAP\" class=\"headerlink\" title=\"SOAP\"></a>SOAP</h3><p>SOAP:简单对象访问协议（Simple Object Access Protocal），是一种简单的基于 XML 的协议，它使应用程序通过 HTTP 来交换信息，简单理解为soap=http+xml。Soap协议版本主要使用soap1.1、soap1.2<a id=\"more\"></a></p>\n<h4 id=\"SOAP是什么\"><a href=\"#SOAP是什么\" class=\"headerlink\" title=\"SOAP是什么\"></a>SOAP是什么</h4><ul>\n<li>SOAP 是一种网络通信协议</li>\n<li>SOAP即Simple Object Access Protocol简易对象访问协议</li>\n<li>SOAP 用于跨平台应用程序之间的通信</li>\n<li>SOAP 被设计用来通过因特网(http)进行通信</li>\n<li>SOAP ＝ HTTP+XML，其实就是通过HTTP发xml数据</li>\n<li>SOAP 很简单并可扩展支持面向对象</li>\n<li>SOAP 允许您跨越防火墙</li>\n<li>SOAP 将被作为 W3C 标准来发展</li>\n</ul>\n<h4 id=\"SOAP语法格式\"><a href=\"#SOAP语法格式\" class=\"headerlink\" title=\"SOAP语法格式\"></a>SOAP语法格式</h4><h5 id=\"构建模块\"><a href=\"#构建模块\" class=\"headerlink\" title=\"构建模块\"></a>构建模块</h5><ul>\n<li>必需的Envelope 元素，此元素将整个 XML 文档标识为一条 SOAP 消息</li>\n<li>可选的Header 元素，包含头部信息</li>\n<li>必需的Body 元素，包含所有的调用和响应信息 </li>\n<li>可选的 Fault 元素，提供有关在处理此消息所发生错误的信息</li>\n</ul>\n<h5 id=\"语法规则\"><a href=\"#语法规则\" class=\"headerlink\" title=\"语法规则\"></a>语法规则</h5><ul>\n<li>SOAP 消息必须用 XML 来编码</li>\n<li>SOAP 消息必须使用 SOAP Envelope 命名空间</li>\n<li>SOAP 消息必须使用 SOAP Encoding 命名空间</li>\n<li>SOAP 消息不能包含 DTD 引用</li>\n<li>SOAP 消息不能包含 XML 处理指令</li>\n</ul>\n<h5 id=\"基本结构\"><a href=\"#基本结构\" class=\"headerlink\" title=\"基本结构\"></a>基本结构</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;?xml version=&quot;1.0&quot;?&gt;</div><div class=\"line\">&lt;soap:Envelope</div><div class=\"line\">xmlns:soap=&quot;http://www.w3.org/2001/12/soap-envelope&quot;</div><div class=\"line\">soap:encodingStyle=&quot;http://www.w3.org/2001/12/soap-encoding&quot;&gt;</div><div class=\"line\"></div><div class=\"line\">&lt;soap:Header&gt;</div><div class=\"line\">...</div><div class=\"line\">&lt;/soap:Header&gt;</div><div class=\"line\"></div><div class=\"line\">&lt;soap:Body&gt;</div><div class=\"line\">...</div><div class=\"line\">  &lt;soap:Fault&gt;</div><div class=\"line\">  ...</div><div class=\"line\">  &lt;/soap:Fault&gt;</div><div class=\"line\">&lt;/soap:Body&gt;</div><div class=\"line\"></div><div class=\"line\">&lt;/soap:Envelope&gt;</div></pre></td></tr></table></figure>\n<h3 id=\"WSDL\"><a href=\"#WSDL\" class=\"headerlink\" title=\"WSDL\"></a>WSDL</h3><p>WSDL 是基于 XML 的用于描述Web Service及其函数、参数和返回值。通俗理解Wsdl是webservice的使用说明书。</p>\n<h4 id=\"wsdl是什么\"><a href=\"#wsdl是什么\" class=\"headerlink\" title=\"wsdl是什么\"></a>wsdl是什么</h4><ul>\n<li>WSDL 指网络服务描述语言(Web Services Description Language)。</li>\n<li>WSDL是一种使用 XML 编写的文档。这种文档可描述某个 Web service。它可规定服务的位置，以及此服务提供的操作（或方法）。</li>\n<li>WSDL 是一种 XML 文档</li>\n<li>WSDL 用于描述网络服务</li>\n<li>WSDL 也可用于定位网络服务</li>\n</ul>\n<h4 id=\"wsdl结构\"><a href=\"#wsdl结构\" class=\"headerlink\" title=\"wsdl结构\"></a>wsdl结构</h4><ol>\n<li><code>&lt;service&gt;</code>    服务视图，webservice的服务结点，它包括了服务端点</li>\n<li><code>&lt;binding&gt;</code>     为每个服务端点定义消息格式和协议细节</li>\n<li><code>&lt;portType&gt;</code>   服务端点，描述 web service可被执行的操作方法，以及相关的消息，通过binding指向portType</li>\n<li><code>&lt;message&gt;</code>  定义一个操作（方法）的数据参数(可有多个参数)</li>\n<li><code>&lt;types&gt;</code>       定义 web service 使用的全部数据类型</li>\n</ol>\n<h4 id=\"wsdl说明书阅读\"><a href=\"#wsdl说明书阅读\" class=\"headerlink\" title=\"wsdl说明书阅读\"></a>wsdl说明书阅读</h4><p>从下往上读，先找到服务视图，通过binging找到protType，找到了protType就找到了我们要调用的webservice方法。<br><img src=\"http://i.imgur.com/Oy0c8Ll.png\" alt=\"\"></p>\n<h3 id=\"UDDI\"><a href=\"#UDDI\" class=\"headerlink\" title=\"UDDI\"></a>UDDI</h3><p>UDDI 是一种目录服务，企业可以使用它对 Web services 进行注册和搜索。<br>UDDI，英文为 “Universal Description, Discovery and Integration”，可译为”通用描述、发现与集成服务”。</p>\n<p>UDDI 是一个独立于平台的框架，用于通过使用 Internet 来描述服务，发现企业，并对企业服务进行集成。</p>\n<ul>\n<li>UDDI 指的是通用描述、发现与集成服务</li>\n<li>UDDI 是一种用于存储有关 web services 的信息的目录。</li>\n<li>UDDI 是一种由 WSDL 描述的 web services 界面的目录。</li>\n<li>UDDI 经由 SOAP 进行通信</li>\n<li>UDDI 被构建入了微软的 .NET 平台</li>\n</ul>\n<h2 id=\"常用注解\"><a href=\"#常用注解\" class=\"headerlink\" title=\"常用注解\"></a>常用注解</h2><h3 id=\"WebService\"><a href=\"#WebService\" class=\"headerlink\" title=\"@WebService\"></a>@WebService</h3><p>@WebService-定义服务，在public class上边，可选参数：</p>\n<ul>\n<li>targetNamespace：指定命名空间</li>\n<li>name：portType的名称</li>\n<li>portName：port的名称</li>\n<li>serviceName：服务名称</li>\n<li>endpointInterface：SEI接口地址，如果一个服务类实现了多个接口，只需要发布一个接口的方法，可通过此注解指定要发布服务的接口。</li>\n</ul>\n<h3 id=\"WebMethod\"><a href=\"#WebMethod\" class=\"headerlink\" title=\"@WebMethod\"></a>@WebMethod</h3><p>@WebMethod-定义方法，在公开方法上边，可选参数：</p>\n<ul>\n<li>operationName：方法名</li>\n<li>exclude：设置为true表示此方法不是webservice方法，反之则表示webservice方法</li>\n<li>action：此操作的动作。 对于 SOAP 绑定，此方法可确定 soap 动作的值。 </li>\n</ul>\n<h3 id=\"WebResult\"><a href=\"#WebResult\" class=\"headerlink\" title=\"@WebResult\"></a>@WebResult</h3><p>@WebResult-定义返回值，在方法返回值前边，可选参数:</p>\n<ul>\n<li>name：返回结果值的名称</li>\n<li>partName：表示此返回值的 wsdl:part 的名称。此名称只在操作是 rpc 样式，或者操作是文档样式且参数样式为 BARE 时使用。 </li>\n<li>targetNamespace：返回值的 XML 名称空间。只在操作是文档样式或者返回值映射到某一个头时使用。如果目标名称空间被设置为 “”，则此名称空间表示空名称空间。</li>\n<li>header：如果为 true，则结果是从消息头而不是消息正文获取的。 </li>\n</ul>\n<h3 id=\"WebParam\"><a href=\"#WebParam\" class=\"headerlink\" title=\"@WebParam\"></a>@WebParam</h3><p>@WebParam-定义参数，在方法参数前边，可选参数：</p>\n<ul>\n<li>name：指定参数的名称</li>\n<li>partName：表示此返回值的 wsdl:part 的名称。此名称只在操作是 rpc 样式，或者操作是文档样式且参数样式为 BARE 时使用。 </li>\n<li>targetNamespace：返回值的 XML 名称空间。只在操作是文档样式或者返回值映射到某一个头时使用。如果目标名称空间被设置为 “”，则此名称空间表示空名称空间。</li>\n<li>header：如果为 true，则结果是从消息头而不是消息正文获取的。 </li>\n<li>mode：参数的流向（IN、OUT 或 INOUT 之一）。OUT 和 INOUT 模式只是为那些符合 Holder 类型定义（JAX-WS 2.0 [5] 的第 2.3.3 节）的参数类型所指定的。Holder 类型的参数必须为 OUT 或 INOUT。 </li>\n</ul>\n","tags":[{"name":"webservice","slug":"webservice","permalink":"http://yoursite.com/tags/webservice/"}]},{"title":"WebService入门介绍","date":"2017-08-21T03:12:38.000Z","path":"2017/08/21/webservice1/","content":"<h2 id=\"什么是WebService\"><a href=\"#什么是WebService\" class=\"headerlink\" title=\"什么是WebService\"></a>什么是WebService</h2><ul>\n<li>Web service 即web服务，它是一种跨编程语言和跨操作系统平台的远程调用技术即跨平台远程调用技术。</li>\n<li>采用标准SOAP(Simple Object Access Protocol)  协议传输，soap属于w3c标准。Soap协议是基于http的应用层协议，soap协议传输是xml数据。<a id=\"more\"></a></li>\n<li>采用wsdl作为描述语言即webservice使用说明书，wsdl属w3c标准。</li>\n<li>xml是webservice的跨平台的基础，XML主要的优点在于它既与平台无关，又与厂商无关。</li>\n<li>XSD，W3C为webservice制定了一套传输数据类型，使用xml进行描述，即XSD(XML Schema Datatypes)，任何编程语言写的webservice接口在发送数据时都要转换成webservice标准的XSD发送。</li>\n<li>当前非SOAP协议的webService以轻量为首要目标，比如rest webservice也是webservice的一种方式。</li>\n</ul>\n<h2 id=\"WebService规范简单介绍\"><a href=\"#WebService规范简单介绍\" class=\"headerlink\" title=\"WebService规范简单介绍\"></a>WebService规范简单介绍</h2><p>在java中，共有三种webservice规范：JAX-WS（JAX-RPC）、JAXM&amp;SAAJ、JAX-RS。</p>\n<h3 id=\"JAX-WS（JAX-RPC）\"><a href=\"#JAX-WS（JAX-RPC）\" class=\"headerlink\" title=\"JAX-WS（JAX-RPC）\"></a>JAX-WS（JAX-RPC）</h3><blockquote>\n<p>JAX-WS  的全称为 Java API for XML-Based Webservices ，JAX-WS允许开发者可以选择RPC-oriented或者message-oriented 来实现自己的web services。早期的基于SOAP 的JAVA 的Web 服务规范JAX-RPC（Java API For XML-Remote Procedure Call）目前已经被JAX-WS 规范取代。从java5开始支持JAX-WS2.0版本，Jdk1.6.0_13以后的版本支持2.1版本，jdk1.7支持2.2版本。</p>\n</blockquote>\n<h3 id=\"JAXM-amp-SAAJ\"><a href=\"#JAXM-amp-SAAJ\" class=\"headerlink\" title=\"JAXM&amp;SAAJ\"></a>JAXM&amp;SAAJ</h3><blockquote>\n<p>JAXM（JAVA API For XML Message）主要定义了包含了发送和接收消息所需的API，SAAJ（SOAP With Attachment API For Java，JSR 67）是与JAXM 搭配使用的API，为构建SOAP 包和解析SOAP 包提供了重要的支持，支持附件传输等，JAXM&amp;SAAJ 与JAX-WS 都是基于SOAP 的Web 服务，相比之下JAXM&amp;SAAJ 暴漏了SOAP更多的底层细节，编码比较麻烦，而JAX-WS 更加抽象，隐藏了更多的细节，更加面向对象，实现起来你基本上不需要关心SOAP 的任何细节</p>\n</blockquote>\n<h3 id=\"JAX-RS\"><a href=\"#JAX-RS\" class=\"headerlink\" title=\"JAX-RS\"></a>JAX-RS</h3><blockquote>\n<p>JAX-RS是JAVA EE6 引入的一个新技术。 JAX-RS即Java API for RESTful Web Services，是一个Java 编程语言的应用程序接口，支持按照表述性状态转移（REST）架构风格创建Web服务。JAX-RS使用了Java SE5引入的Java注解来简化Web服务的客户端和服务端的开发和部署。</p>\n</blockquote>\n<h2 id=\"使用JAX-WS开发WebService入门实例\"><a href=\"#使用JAX-WS开发WebService入门实例\" class=\"headerlink\" title=\"使用JAX-WS开发WebService入门实例\"></a>使用JAX-WS开发WebService入门实例</h2><h3 id=\"服务端发开发\"><a href=\"#服务端发开发\" class=\"headerlink\" title=\"服务端发开发\"></a>服务端发开发</h3><p>编写SEI(Service Endpoint Interface)，在WebService中称为portType,在java中为接口</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">/**</div><div class=\"line\"> * 基于jaxws开发的SEI</div><div class=\"line\"> * 天气查询接口</div><div class=\"line\"> */</div><div class=\"line\">public interface WeatherInterface &#123;</div><div class=\"line\">    /*根据城市查询天气*/</div><div class=\"line\">    String queryWeather(String cityName);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>接口实现类，也就是WebService的服务类</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div></pre></td><td class=\"code\"><pre><div class=\"line\"></div><div class=\"line\">/*使用注解标注为WebService的服务类*/</div><div class=\"line\">@WebService</div><div class=\"line\">public class WeatherInterfaceImpl implements WeatherInterface&#123;</div><div class=\"line\">    public String queryWeather(String cityName) &#123;</div><div class=\"line\">        System.out.println(&quot;客户端要查询的城市===&quot;+cityName);</div><div class=\"line\">        String result = &quot;多云&quot;;</div><div class=\"line\">        System.out.println(&quot;像客户端返回查询结果&quot;+result);</div><div class=\"line\">        return result;</div><div class=\"line\">    &#125;</div><div class=\"line\">    public static void main(String[] srgs)&#123;</div><div class=\"line\">        /*</div><div class=\"line\">        发布天气查询服务</div><div class=\"line\">        第一个参数：WebService的地址</div><div class=\"line\">        第二个参数：使用了@WebService标注的类</div><div class=\"line\">        */</div><div class=\"line\">        Endpoint.publish(&quot;http://127.0.0.1:1234/webther&quot;,new WeatherInterfaceImpl());</div><div class=\"line\"></div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>注：SEI的实现类中至少要有一个非静态的公开方法作为WebService的服务方法。在类上需要使用注解@WebService</p>\n<h3 id=\"查看wsdl\"><a href=\"#查看wsdl\" class=\"headerlink\" title=\"查看wsdl\"></a>查看wsdl</h3><ol>\n<li>在浏览器地址栏输入地址：<a href=\"http://127.0.0.1:1234/webther?wsdl\" target=\"_blank\" rel=\"external\">http://127.0.0.1:1234/webther?wsdl</a></li>\n<li>Wsdl不是webService,只是获取一个用于描述WebService的说明文件</li>\n<li>wsdl- WebServiceDescriptionLanguage,是以XML文件形式来描述WebService的”说明书”,有了说明书,我们才可以知道如何使用或是调用这个服务.<h3 id=\"使用Wsimport生成客户端调用代码\"><a href=\"#使用Wsimport生成客户端调用代码\" class=\"headerlink\" title=\"使用Wsimport生成客户端调用代码\"></a>使用Wsimport生成客户端调用代码</h3><h4 id=\"Wsimport介绍\"><a href=\"#Wsimport介绍\" class=\"headerlink\" title=\"Wsimport介绍\"></a>Wsimport介绍</h4><blockquote>\n<p>wsimport是jdk自带的webservice客户端工具,可以根据wsdl文档生成客户端调用代码(java代码).当然,无论服务器端的WebService是用什么语言写的,都可以生成调用webservice的客户端代码，服务端通过客户端代码调用webservice。<br>wsimport.exe位于JAVA_HOME\\bin目录下.</p>\n</blockquote>\n</li>\n</ol>\n<p>常用参数为:</p>\n<ul>\n<li>-d&lt;目录&gt;  - 将生成.class文件。默认参数。</li>\n<li>-s&lt;目录&gt; - 将生成.java文件。</li>\n<li>-p&lt;生成的新包名&gt; -将生成的类，放于指定的包下。<br>(wsdlurl) - <a href=\"http://server:port/service?wsdl，必须的参数。\" target=\"_blank\" rel=\"external\">http://server:port/service?wsdl，必须的参数。</a></li>\n</ul>\n<p>示例： C:/&gt; wsimport –s . <a href=\"http://127.0.0.1:1234/weather?wsdl\" target=\"_blank\" rel=\"external\">http://127.0.0.1:1234/weather?wsdl</a> </p>\n<p>注意：-s不能分开，-s后面有个小点，点表示将代码放到当前目录下。<br>http….是指获取wsdl说明书的地址.</p>\n<h4 id=\"客户端编写\"><a href=\"#客户端编写\" class=\"headerlink\" title=\"客户端编写\"></a>客户端编写</h4><p>将上面使用wsimport生成的代码拷贝到项目中，然后编写客户端调用的代码<br>1、使用服务视图调用WebService<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">//创建服务视图</div><div class=\"line\">WeatherInterfaceImplService weatherInterfaceImplService = new WeatherInterfaceImplService();</div><div class=\"line\">//通过服务视图得到服务断点</div><div class=\"line\">WeatherInterfaceImpl port = weatherInterfaceImplService.getPort(WeatherInterfaceImpl.class);</div><div class=\"line\">String result = port.queryWeather(&quot;深圳&quot;);</div><div class=\"line\">System.out.println(result);</div></pre></td></tr></table></figure></p>\n<p>2、使用jdk的service类调用webservice<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\">//wsdl路径</div><div class=\"line\">URL wsdlUrl = new URL(&quot;http://127.0.0.1:1234/webther?wsdl&quot;);</div><div class=\"line\">//从wsdl中找到服务视图</div><div class=\"line\">//第一个参数是wsdl的命名空间</div><div class=\"line\">//第二个参数是服务视图的名字</div><div class=\"line\">QName qName = new QName(&quot;http://jaxws.wqh.com/&quot;, &quot;WeatherInterfaceImplService&quot;);</div><div class=\"line\">//创建service对象获取服务视图</div><div class=\"line\">Service service = Service.create(wsdlUrl,qName);</div><div class=\"line\">//从服务视图中获取portType</div><div class=\"line\">WeatherInterfaceImpl weatherInterface = service.getPort(WeatherInterfaceImpl.class);</div><div class=\"line\">//调用portType的方法</div><div class=\"line\">String result = weatherInterface.queryWeather(&quot;南昌&quot;);</div><div class=\"line\">System.out.println(result);</div></pre></td></tr></table></figure></p>\n<h2 id=\"WebService与Socket比较\"><a href=\"#WebService与Socket比较\" class=\"headerlink\" title=\"WebService与Socket比较\"></a>WebService与Socket比较</h2><p><img src=\"http://i.imgur.com/6x7WBwq.png\" alt=\"\"></p>\n<ul>\n<li>Socket  是基于TCP/ip的传输层协议</li>\n<li>Webservice是基于http协议传输数据，http是基于tcp的应用层协议</li>\n<li>Webservice采用了基于http的soap协议传输数据。</li>\n<li>Socket接口通过流传输，不支持面向对象。</li>\n<li>Webservice 接口支持面向对象，最终webservice将对象进行序列化后通过流传输。</li>\n</ul>\n<p>结论：Webservice采用soap协议进行通信，底层基于socket通信，webservice不需专门针对数据流的发送和接收进行处理，是一种跨平台的面向对象远程调用技术。Socket传输速率更快。</p>\n<h2 id=\"WebService的使用介绍\"><a href=\"#WebService的使用介绍\" class=\"headerlink\" title=\"WebService的使用介绍\"></a>WebService的使用介绍</h2><h3 id=\"使用场景\"><a href=\"#使用场景\" class=\"headerlink\" title=\"使用场景\"></a>使用场景</h3><ol>\n<li>应用程序集成<br>分布式程序之间进行集成使用webservice直接调用服务层方法，不仅缩短了开发周期，还减少了代码复杂度，并能够增强应用程序的可维护性，因为webservice支持跨平台且遵循标准协议（soap）。</li>\n<li>软件重用<br>将一个软件的功能以webservice方式暴露出来，达到软件重用。例如上边分析的天气预报，将天气查询功能以webservice接口方式暴露出来非常容易集成在其它系统中；再比如一个第三方物流系统将快递查询、快递登记暴露出来，从而集成在电子商务系统中。</li>\n</ol>\n<h3 id=\"建议不用webservice\"><a href=\"#建议不用webservice\" class=\"headerlink\" title=\"建议不用webservice\"></a>建议不用webservice</h3><ol>\n<li>同构程序间通信<br>同构程序是指采用相同的编程语言的程序之间通信，比如java远程调用RMi技术就可以非常高效的实现远程调用，使用简单方便，必需保证两边应用都是java编写才可使用。</li>\n</ol>\n<p>总之，只要有其它方法比webservice更高效更可行就不要用webservice，因为web跨平台远程调用方法不止webservice一种，需要择优考虑。<br>RMI是java语言提供的远程调用技术。Rmi速度会比webservice快的多，比socket要慢。</p>\n<h3 id=\"建议使用webservice\"><a href=\"#建议使用webservice\" class=\"headerlink\" title=\"建议使用webservice\"></a>建议使用webservice</h3><ol>\n<li>公开接口<br>面向互联网公开的接口，例如：某公司产品促销介绍、股票信息查询等，因为webservice是互联网的一个标准协议，将接口发布为webservice，其它公司很容易使用。</li>\n<li>调用webservice服务端<br>你作为客户端要调用别人的接口，对方接口用的是webservice，这时你也用webservice开发客户端，且协议版本要和服务端保持一致。</li>\n</ol>\n<h3 id=\"Webservice优缺点\"><a href=\"#Webservice优缺点\" class=\"headerlink\" title=\"Webservice优缺点\"></a>Webservice优缺点</h3><p>优点：</p>\n<ol>\n<li>采用xml支持跨平台远程调用。</li>\n<li>基于http的soap协议，可跨越防火墙。</li>\n<li>支持面向对象开发。</li>\n<li>有利于软件和数据重用，实现松耦合。</li>\n</ol>\n<p>缺点：<br>由于soap是基于xml传输，本身使用xml传输会传输一些无关的东西从而效率不高，随着soap协议的完善，soap协议增加了许多内容，这样就导致了使用soap协议去完成简单的数据传输的效率不高。如果直接用http传输自定义数据内容比webservice开发更快捷，例如第三方支付公司的支持接口。</p>\n","tags":[{"name":"webservice","slug":"webservice","permalink":"http://yoursite.com/tags/webservice/"}]},{"title":"使用JavaMail发送邮件（带附件）","date":"2017-08-20T09:36:06.000Z","path":"2017/08/20/javamail/","content":"<p>在使用javaMail发邮件之前先简单说一下邮件的三个协议：</p>\n<ol>\n<li>POP3：POP的全称是 Post Office Protocol ，即邮局协议，用于电子邮件的接收，它使用TCP的110端口，现在常用的是第三版，所以简称为 POP3。 <a id=\"more\"></a></li>\n<li>SMTP：SMTP（Simple Mail Transfer Protocal）称为简单邮件传输协议，目标是向用户提供高效、可靠的邮件传输。</li>\n<li>IMAP：<br>IMAP是Internet Message Access Protocol的缩写，顾名思义，主要提供的是通过Internet获取信息的一种协议。</li>\n</ol>\n<h2 id=\"前期准备\"><a href=\"#前期准备\" class=\"headerlink\" title=\"前期准备\"></a>前期准备</h2><p>如果是使用像QQ邮箱、163邮箱、126邮箱等这种普通的邮箱，需要先开启POP3/SMTP/IMAP服务，并且获取授权。如果是企业邮箱，可以直接使用。这里以163邮箱为例。</p>\n<p><img src=\"http://i.imgur.com/5fMcgQh.png\" alt=\"\"><br>先查看是否开启服务<br><img src=\"http://i.imgur.com/YU0igMq.png\" alt=\"\"><br>开启并设置客户端授权码，这个很重要。如果是qq邮箱，需要发短信配置</p>\n<h2 id=\"jar包\"><a href=\"#jar包\" class=\"headerlink\" title=\"jar包\"></a>jar包</h2><p>javaMail需要两个jar，直接使用maven导入依赖</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;dependency&gt;</div><div class=\"line\">          &lt;groupId&gt;javax.activation&lt;/groupId&gt;</div><div class=\"line\">          &lt;artifactId&gt;activation&lt;/artifactId&gt;</div><div class=\"line\">          &lt;version&gt;1.1.1&lt;/version&gt;</div><div class=\"line\">      &lt;/dependency&gt;</div><div class=\"line\">      &lt;dependency&gt;</div><div class=\"line\">          &lt;groupId&gt;com.sun.mail&lt;/groupId&gt;</div><div class=\"line\">          &lt;artifactId&gt;javax.mail&lt;/artifactId&gt;</div><div class=\"line\">          &lt;version&gt;1.5.2&lt;/version&gt;</div><div class=\"line\">      &lt;/dependency&gt;</div></pre></td></tr></table></figure>\n<h2 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div></pre></td><td class=\"code\"><pre><div class=\"line\">//主机名,上面在开启POP3/SMTP/IMAP服务的时候有服务器地址</div><div class=\"line\">   public static String HOST_NAME = &quot;smtp.126.com&quot;;</div><div class=\"line\">   //用户名，邮箱的登陆名</div><div class=\"line\">   public static String USER_NAME = &quot;xxxxx&quot;;</div><div class=\"line\">   //密码，这里是开始设置的授权码</div><div class=\"line\">   public static String USER_PASSWD = &quot;xxxxx&quot;;</div><div class=\"line\">   //发件人</div><div class=\"line\">   public static String FROM_NAME = &quot;xxxxx&quot;;</div><div class=\"line\">   //抄送人</div><div class=\"line\">   public static String CC_NAME = &quot;xxxxx&quot;;</div><div class=\"line\"></div><div class=\"line\">   /**</div><div class=\"line\">    * @param toEmail 发送给谁</div><div class=\"line\">    * @param code   发送的内容，验证码</div><div class=\"line\">    */</div><div class=\"line\">   public static void sendMail(String toEmail, String code) &#123;</div><div class=\"line\">       //1：创建Properties</div><div class=\"line\">       Properties properties = new Properties();</div><div class=\"line\">       properties.put(&quot;mail.host&quot;, HOST_NAME);</div><div class=\"line\">       properties.put(&quot;mail.smtp.auth&quot;, &quot;true&quot;);</div><div class=\"line\">       //2：获取用户名和密码进行认证</div><div class=\"line\">       Authenticator authenticator = new Authenticator() &#123;</div><div class=\"line\">           @Override</div><div class=\"line\">           protected PasswordAuthentication getPasswordAuthentication() &#123;</div><div class=\"line\">               return new PasswordAuthentication(USER_NAME, USER_PASSWD);</div><div class=\"line\">           &#125;</div><div class=\"line\">       &#125;;</div><div class=\"line\">       //3：获取session对象</div><div class=\"line\">       Session session = Session.getInstance(properties, authenticator);</div><div class=\"line\">       //4：设置邮件发送信息</div><div class=\"line\">       Message message = new MimeMessage(session);</div><div class=\"line\">       try &#123;</div><div class=\"line\">           //4.1：设置发件人</div><div class=\"line\">           message.setFrom(new InternetAddress(FROM_NAME));</div><div class=\"line\">           //4.2：设置收件人</div><div class=\"line\">\t\t//Message.RecipientType.TO 收件人</div><div class=\"line\">\t\t//Message.RecipientType.CC 抄送</div><div class=\"line\">\t\t//Message.RecipientType.BCC 暗送</div><div class=\"line\">           message.setRecipient(Message.RecipientType.TO, new InternetAddress(toEmail));</div><div class=\"line\">           //4.3：设置邮件主题</div><div class=\"line\">           message.setSubject(&quot;主题！！&quot;);</div><div class=\"line\">           //4.4：设置邮件正文</div><div class=\"line\">           message.setContent(code,&quot;text/html;charset=utf-8&quot;);</div><div class=\"line\">           //5：发送邮件</div><div class=\"line\">           Transport.send(message);</div><div class=\"line\">       &#125; catch (MessagingException e) &#123;</div><div class=\"line\">           e.printStackTrace();</div><div class=\"line\">       &#125;</div><div class=\"line\">   &#125;</div></pre></td></tr></table></figure>","tags":[{"name":"javamail","slug":"javamail","permalink":"http://yoursite.com/tags/javamail/"}]},{"title":"Redis入门之环境的搭建","date":"2017-08-20T05:09:50.000Z","path":"2017/08/20/Redis入门之环境的搭建/","content":"<h2 id=\"一、-Ubuntu下redis的搭建\"><a href=\"#一、-Ubuntu下redis的搭建\" class=\"headerlink\" title=\"一、 Ubuntu下redis的搭建\"></a>一、 Ubuntu下redis的搭建</h2><p>这里直接使用命令下载以及安装，<br><a id=\"more\"></a></p>\n<h3 id=\"1、下载redis\"><a href=\"#1、下载redis\" class=\"headerlink\" title=\"1、下载redis\"></a>1、下载redis</h3><p>首先进入root下</p>\n<pre><code>root@ubuntu:~# wget http://download.redis.io/releases/redis-4.0.1.tar.gz\n</code></pre><h3 id=\"2、解压\"><a href=\"#2、解压\" class=\"headerlink\" title=\"2、解压\"></a>2、解压</h3><p>这里可以直接使用解压命令解压文件</p>\n<pre><code>root@ubuntu:~# tar -xzvf redis-4.0.1.tar.gz \n</code></pre><h3 id=\"3、编译安装\"><a href=\"#3、编译安装\" class=\"headerlink\" title=\"3、编译安装\"></a>3、编译安装</h3><p>解压完成后进入到解压后的目录中使用make命令既可编译</p>\n<figure>\n\n<pre><code>root@ubuntu:~# cd redis-4.0.1\nroot@ubuntu:~/redis-4.0.1# make\n</code></pre><p></p></figure><br><img src=\"http://i.imgur.com/OLbC1eB.png\" alt=\"\"><p></p>\n<p>如上图所示如果没有错误为编译成功</p>\n<p>输入make test命令测试是否安装成功</p>\n<pre><code>root@ubuntu:~/redis-4.0.1# make test\n</code></pre><p><img src=\"http://i.imgur.com/7uhWPED.png\" alt=\"\"></p>\n<p>这里第一次可能会出现错误，如果出现错误可以再次执行该命令</p>\n<h3 id=\"4、启动redis\"><a href=\"#4、启动redis\" class=\"headerlink\" title=\"4、启动redis\"></a>4、启动redis</h3><pre><code>root@ubuntu:~/redis-4.0.1# cd src/\nroot@ubuntu:~/redis-4.0.1/src# ls\n</code></pre><p>在redis的根目录下查看是否含有redis.conf文件</p>\n<p><img src=\"http://i.imgur.com/GDekIrp.png\" alt=\"\"></p>\n<p>然后进入到src目录中使用ls命令查看是否包含以下文件</p>\n<p><img src=\"http://i.imgur.com/n5F2V47.png\" alt=\"\"></p>\n<p>将redis添加到Path环境变量中，方便下次直接启动redis</p>\n<pre><code>root@ubuntu:~/redis-4.0.1/src# cp redis-server /usr/local/bin/\nroot@ubuntu:~/redis-4.0.1/src# cp redis-cli /usr/local/bin/\n</code></pre><p>使用命令启动redis</p>\n<pre><code>root@ubuntu:~/redis-4.0.1/src# redis-server \n</code></pre><p><img src=\"http://i.imgur.com/2WyODnB.png\" alt=\"\"></p>\n<p>如图表示服务启动成功，不要关闭该终端，使用shift+ctrl+t开启一个新的终端，输入redis-cli命令进入redis</p>\n<p><img src=\"http://i.imgur.com/emLpYDY.png\" alt=\"\"></p>\n<p>配置成功</p>\n<p>另外在Ubuntu中可以直接使用apt-get命令安装，这里直接盗用<a href=\"https://www.runoob.com/redis/redis-install.html\" title=\"菜鸟教程\" target=\"_blank\" rel=\"external\">菜鸟教程</a>了。<br><img src=\"http://i.imgur.com/sF1LCM8.png\" alt=\"\"></p>\n<h2 id=\"二、在window中搭建\"><a href=\"#二、在window中搭建\" class=\"headerlink\" title=\"二、在window中搭建\"></a>二、在window中搭建</h2><p>这使用的是win7-64的系统</p>\n<h3 id=\"1、首先当然是下载\"><a href=\"#1、首先当然是下载\" class=\"headerlink\" title=\"1、首先当然是下载\"></a>1、首先当然是下载</h3><p><a href=\"https://github.com/MicrosoftArchive/redis/releases\" target=\"_blank\" rel=\"external\">redis下载地址</a></p>\n<p><img src=\"http://i.imgur.com/pugaQ5M.png\" alt=\"\"></p>\n<h3 id=\"2、安装\"><a href=\"#2、安装\" class=\"headerlink\" title=\"2、安装\"></a>2、安装</h3><p>安装版的直接点下一步就行了，安装完成之后直接进入在命令行中输入redis-cli既可<br><img src=\"http://i.imgur.com/E9EFy95.png\" alt=\"\"></p>\n<p>如果是解压版的需要解压后，进入到解压后的目录中使用redis-server命令启动服务既可使用。</p>\n<h2 id=\"三、连接远程redis\"><a href=\"#三、连接远程redis\" class=\"headerlink\" title=\"三、连接远程redis\"></a>三、连接远程redis</h2><p><img src=\"http://i.imgur.com/gjVNyMe.png\" alt=\"\"></p>\n<p>-h后面为连接主机的ip地址，-p为端口号</p>\n","tags":[{"name":"redis","slug":"redis","permalink":"http://yoursite.com/tags/redis/"}]}]