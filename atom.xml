<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>wanqh的个人博客</title>
  <subtitle>记录生活、工作、学习点点滴滴</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2017-08-21T06:42:01.310Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>Wan QingHua</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>WebService入门介绍</title>
    <link href="http://yoursite.com/2017/08/21/webservice1/"/>
    <id>http://yoursite.com/2017/08/21/webservice1/</id>
    <published>2017-08-21T03:12:38.000Z</published>
    <updated>2017-08-21T06:42:01.310Z</updated>
    
    <content type="html"><![CDATA[<h2 id="什么是WebService"><a href="#什么是WebService" class="headerlink" title="什么是WebService"></a>什么是WebService</h2><ul>
<li>Web service 即web服务，它是一种跨编程语言和跨操作系统平台的远程调用技术即跨平台远程调用技术。</li>
<li>采用标准SOAP(Simple Object Access Protocol)  协议传输，soap属于w3c标准。Soap协议是基于http的应用层协议，soap协议传输是xml数据。</li>
<li>采用wsdl作为描述语言即webservice使用说明书，wsdl属w3c标准。</li>
<li>xml是webservice的跨平台的基础，XML主要的优点在于它既与平台无关，又与厂商无关。</li>
<li>XSD，W3C为webservice制定了一套传输数据类型，使用xml进行描述，即XSD(XML Schema Datatypes)，任何编程语言写的webservice接口在发送数据时都要转换成webservice标准的XSD发送。</li>
<li>当前非SOAP协议的webService以轻量为首要目标，比如rest webservice也是webservice的一种方式。</li>
</ul>
<h2 id="WebService规范简单介绍"><a href="#WebService规范简单介绍" class="headerlink" title="WebService规范简单介绍"></a>WebService规范简单介绍</h2><p>在java中，共有三种webservice规范：JAX-WS（JAX-RPC）、JAXM&amp;SAAJ、JAX-RS。</p>
<h3 id="JAX-WS（JAX-RPC）"><a href="#JAX-WS（JAX-RPC）" class="headerlink" title="JAX-WS（JAX-RPC）"></a>JAX-WS（JAX-RPC）</h3><blockquote>
<p>JAX-WS  的全称为 Java API for XML-Based Webservices ，<a id="more"></a>JAX-WS允许开发者可以选择RPC-oriented或者message-oriented 来实现自己的web services。早期的基于SOAP 的JAVA 的Web 服务规范JAX-RPC（Java API For XML-Remote Procedure Call）目前已经被JAX-WS 规范取代。从java5开始支持JAX-WS2.0版本，Jdk1.6.0_13以后的版本支持2.1版本，jdk1.7支持2.2版本。</p>
</blockquote>
<h3 id="JAXM-amp-SAAJ"><a href="#JAXM-amp-SAAJ" class="headerlink" title="JAXM&amp;SAAJ"></a>JAXM&amp;SAAJ</h3><blockquote>
<p>JAXM（JAVA API For XML Message）主要定义了包含了发送和接收消息所需的API，SAAJ（SOAP With Attachment API For Java，JSR 67）是与JAXM 搭配使用的API，为构建SOAP 包和解析SOAP 包提供了重要的支持，支持附件传输等，JAXM&amp;SAAJ 与JAX-WS 都是基于SOAP 的Web 服务，相比之下JAXM&amp;SAAJ 暴漏了SOAP更多的底层细节，编码比较麻烦，而JAX-WS 更加抽象，隐藏了更多的细节，更加面向对象，实现起来你基本上不需要关心SOAP 的任何细节</p>
</blockquote>
<h3 id="JAX-RS"><a href="#JAX-RS" class="headerlink" title="JAX-RS"></a>JAX-RS</h3><blockquote>
<p>JAX-RS是JAVA EE6 引入的一个新技术。 JAX-RS即Java API for RESTful Web Services，是一个Java 编程语言的应用程序接口，支持按照表述性状态转移（REST）架构风格创建Web服务。JAX-RS使用了Java SE5引入的Java注解来简化Web服务的客户端和服务端的开发和部署。</p>
</blockquote>
<h2 id="使用JAX-WS开发WebService入门实例"><a href="#使用JAX-WS开发WebService入门实例" class="headerlink" title="使用JAX-WS开发WebService入门实例"></a>使用JAX-WS开发WebService入门实例</h2><h3 id="服务端发开发"><a href="#服务端发开发" class="headerlink" title="服务端发开发"></a>服务端发开发</h3><p>编写SEI(Service Endpoint Interface)，在WebService中称为portType,在java中为接口</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">/**</div><div class="line"> * 基于jaxws开发的SEI</div><div class="line"> * 天气查询接口</div><div class="line"> */</div><div class="line">public interface WeatherInterface &#123;</div><div class="line">    /*根据城市查询天气*/</div><div class="line">    String queryWeather(String cityName);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>接口实现类，也就是WebService的服务类</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">/*使用注解标注为WebService的服务类*/</div><div class="line">@WebService</div><div class="line">public class WeatherInterfaceImpl implements WeatherInterface&#123;</div><div class="line">    public String queryWeather(String cityName) &#123;</div><div class="line">        System.out.println(&quot;客户端要查询的城市===&quot;+cityName);</div><div class="line">        String result = &quot;多云&quot;;</div><div class="line">        System.out.println(&quot;像客户端返回查询结果&quot;+result);</div><div class="line">        return result;</div><div class="line">    &#125;</div><div class="line">    public static void main(String[] srgs)&#123;</div><div class="line">        /*</div><div class="line">        发布天气查询服务</div><div class="line">        第一个参数：WebService的地址</div><div class="line">        第二个参数：使用了@WebService标注的类</div><div class="line">        */</div><div class="line">        Endpoint.publish(&quot;http://127.0.0.1:1234/webther&quot;,new WeatherInterfaceImpl());</div><div class="line"></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>注：SEI的实现类中至少要有一个非静态的公开方法作为WebService的服务方法。在类上需要使用注解@WebService</p>
<h3 id="查看wsdl"><a href="#查看wsdl" class="headerlink" title="查看wsdl"></a>查看wsdl</h3><ol>
<li>在浏览器地址栏输入地址：<a href="http://127.0.0.1:1234/webther?wsdl" target="_blank" rel="external">http://127.0.0.1:1234/webther?wsdl</a></li>
<li>Wsdl不是webService,只是获取一个用于描述WebService的说明文件</li>
<li>wsdl- WebServiceDescriptionLanguage,是以XML文件形式来描述WebService的”说明书”,有了说明书,我们才可以知道如何使用或是调用这个服务.<h3 id="使用Wsimport生成客户端调用代码"><a href="#使用Wsimport生成客户端调用代码" class="headerlink" title="使用Wsimport生成客户端调用代码"></a>使用Wsimport生成客户端调用代码</h3><h4 id="Wsimport介绍"><a href="#Wsimport介绍" class="headerlink" title="Wsimport介绍"></a>Wsimport介绍</h4><blockquote>
<p>wsimport是jdk自带的webservice客户端工具,可以根据wsdl文档生成客户端调用代码(java代码).当然,无论服务器端的WebService是用什么语言写的,都可以生成调用webservice的客户端代码，服务端通过客户端代码调用webservice。<br>wsimport.exe位于JAVA_HOME\bin目录下.</p>
</blockquote>
</li>
</ol>
<p>常用参数为:</p>
<ul>
<li>-d&lt;目录&gt;  - 将生成.class文件。默认参数。</li>
<li>-s&lt;目录&gt; - 将生成.java文件。</li>
<li>-p&lt;生成的新包名&gt; -将生成的类，放于指定的包下。<br>(wsdlurl) - <a href="http://server:port/service?wsdl，必须的参数。" target="_blank" rel="external">http://server:port/service?wsdl，必须的参数。</a></li>
</ul>
<p>示例： C:/&gt; wsimport –s . <a href="http://127.0.0.1:1234/weather?wsdl" target="_blank" rel="external">http://127.0.0.1:1234/weather?wsdl</a> </p>
<p>注意：-s不能分开，-s后面有个小点，点表示将代码放到当前目录下。<br>http….是指获取wsdl说明书的地址.</p>
<h4 id="客户端编写"><a href="#客户端编写" class="headerlink" title="客户端编写"></a>客户端编写</h4><p>将上面使用wsimport生成的代码拷贝到项目中，然后编写客户端调用的代码</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">//创建服务视图</div><div class="line">WeatherInterfaceImplService weatherInterfaceImplService = new WeatherInterfaceImplService();</div><div class="line">//通过服务视图得到服务断点</div><div class="line">WeatherInterfaceImpl port = weatherInterfaceImplService.getPort(WeatherInterfaceImpl.class);</div><div class="line">String result = port.queryWeather(&quot;深圳&quot;);</div><div class="line">System.out.println(result);</div></pre></td></tr></table></figure>
<h2 id="WebService与Socket比较"><a href="#WebService与Socket比较" class="headerlink" title="WebService与Socket比较"></a>WebService与Socket比较</h2><p><img src="http://i.imgur.com/6x7WBwq.png" alt=""></p>
<ul>
<li>Socket  是基于TCP/ip的传输层协议</li>
<li>Webservice是基于http协议传输数据，http是基于tcp的应用层协议</li>
<li>Webservice采用了基于http的soap协议传输数据。</li>
<li>Socket接口通过流传输，不支持面向对象。</li>
<li>Webservice 接口支持面向对象，最终webservice将对象进行序列化后通过流传输。</li>
</ul>
<p>结论：Webservice采用soap协议进行通信，底层基于socket通信，webservice不需专门针对数据流的发送和接收进行处理，是一种跨平台的面向对象远程调用技术。Socket传输速率更快。</p>
<h2 id="WebService的使用介绍"><a href="#WebService的使用介绍" class="headerlink" title="WebService的使用介绍"></a>WebService的使用介绍</h2><h3 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h3><ol>
<li>应用程序集成<br>分布式程序之间进行集成使用webservice直接调用服务层方法，不仅缩短了开发周期，还减少了代码复杂度，并能够增强应用程序的可维护性，因为webservice支持跨平台且遵循标准协议（soap）。</li>
<li>软件重用<br>将一个软件的功能以webservice方式暴露出来，达到软件重用。例如上边分析的天气预报，将天气查询功能以webservice接口方式暴露出来非常容易集成在其它系统中；再比如一个第三方物流系统将快递查询、快递登记暴露出来，从而集成在电子商务系统中。</li>
</ol>
<h3 id="建议不用webservice"><a href="#建议不用webservice" class="headerlink" title="建议不用webservice"></a>建议不用webservice</h3><ol>
<li>同构程序间通信<br>同构程序是指采用相同的编程语言的程序之间通信，比如java远程调用RMi技术就可以非常高效的实现远程调用，使用简单方便，必需保证两边应用都是java编写才可使用。</li>
</ol>
<p>总之，只要有其它方法比webservice更高效更可行就不要用webservice，因为web跨平台远程调用方法不止webservice一种，需要择优考虑。<br>RMI是java语言提供的远程调用技术。Rmi速度会比webservice快的多，比socket要慢。</p>
<h3 id="建议使用webservice"><a href="#建议使用webservice" class="headerlink" title="建议使用webservice"></a>建议使用webservice</h3><ol>
<li>公开接口<br>面向互联网公开的接口，例如：某公司产品促销介绍、股票信息查询等，因为webservice是互联网的一个标准协议，将接口发布为webservice，其它公司很容易使用。</li>
<li>调用webservice服务端<br>你作为客户端要调用别人的接口，对方接口用的是webservice，这时你也用webservice开发客户端，且协议版本要和服务端保持一致。</li>
</ol>
<h3 id="Webservice优缺点"><a href="#Webservice优缺点" class="headerlink" title="Webservice优缺点"></a>Webservice优缺点</h3><p>优点：</p>
<ol>
<li>采用xml支持跨平台远程调用。</li>
<li>基于http的soap协议，可跨越防火墙。</li>
<li>支持面向对象开发。</li>
<li>有利于软件和数据重用，实现松耦合。</li>
</ol>
<p>缺点：<br>由于soap是基于xml传输，本身使用xml传输会传输一些无关的东西从而效率不高，随着soap协议的完善，soap协议增加了许多内容，这样就导致了使用soap协议去完成简单的数据传输的效率不高。如果直接用http传输自定义数据内容比webservice开发更快捷，例如第三方支付公司的支持接口。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;什么是WebService&quot;&gt;&lt;a href=&quot;#什么是WebService&quot; class=&quot;headerlink&quot; title=&quot;什么是WebService&quot;&gt;&lt;/a&gt;什么是WebService&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;Web service 即web服务，它是一种跨编程语言和跨操作系统平台的远程调用技术即跨平台远程调用技术。&lt;/li&gt;
&lt;li&gt;采用标准SOAP(Simple Object Access Protocol)  协议传输，soap属于w3c标准。Soap协议是基于http的应用层协议，soap协议传输是xml数据。&lt;/li&gt;
&lt;li&gt;采用wsdl作为描述语言即webservice使用说明书，wsdl属w3c标准。&lt;/li&gt;
&lt;li&gt;xml是webservice的跨平台的基础，XML主要的优点在于它既与平台无关，又与厂商无关。&lt;/li&gt;
&lt;li&gt;XSD，W3C为webservice制定了一套传输数据类型，使用xml进行描述，即XSD(XML Schema Datatypes)，任何编程语言写的webservice接口在发送数据时都要转换成webservice标准的XSD发送。&lt;/li&gt;
&lt;li&gt;当前非SOAP协议的webService以轻量为首要目标，比如rest webservice也是webservice的一种方式。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;WebService规范简单介绍&quot;&gt;&lt;a href=&quot;#WebService规范简单介绍&quot; class=&quot;headerlink&quot; title=&quot;WebService规范简单介绍&quot;&gt;&lt;/a&gt;WebService规范简单介绍&lt;/h2&gt;&lt;p&gt;在java中，共有三种webservice规范：JAX-WS（JAX-RPC）、JAXM&amp;amp;SAAJ、JAX-RS。&lt;/p&gt;
&lt;h3 id=&quot;JAX-WS（JAX-RPC）&quot;&gt;&lt;a href=&quot;#JAX-WS（JAX-RPC）&quot; class=&quot;headerlink&quot; title=&quot;JAX-WS（JAX-RPC）&quot;&gt;&lt;/a&gt;JAX-WS（JAX-RPC）&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;JAX-WS  的全称为 Java API for XML-Based Webservices ，
    
    </summary>
    
    
      <category term="webservice" scheme="http://yoursite.com/tags/webservice/"/>
    
  </entry>
  
  <entry>
    <title>使用JavaMail发送邮件（带附件）</title>
    <link href="http://yoursite.com/2017/08/20/javamail/"/>
    <id>http://yoursite.com/2017/08/20/javamail/</id>
    <published>2017-08-20T09:36:06.000Z</published>
    <updated>2017-08-20T11:01:36.541Z</updated>
    
    <content type="html"><![CDATA[<p>在使用javaMail发邮件之前先简单说一下邮件的三个协议：</p>
<ol>
<li>POP3：POP的全称是 Post Office Protocol ，即邮局协议，用于电子邮件的接收，它使用TCP的110端口，现在常用的是第三版，所以简称为 POP3。 <a id="more"></a></li>
<li>SMTP：SMTP（Simple Mail Transfer Protocal）称为简单邮件传输协议，目标是向用户提供高效、可靠的邮件传输。</li>
<li>IMAP：<br>IMAP是Internet Message Access Protocol的缩写，顾名思义，主要提供的是通过Internet获取信息的一种协议。</li>
</ol>
<h2 id="前期准备"><a href="#前期准备" class="headerlink" title="前期准备"></a>前期准备</h2><p>如果是使用像QQ邮箱、163邮箱、126邮箱等这种普通的邮箱，需要先开启POP3/SMTP/IMAP服务，并且获取授权。如果是企业邮箱，可以直接使用。这里以163邮箱为例。</p>
<p><img src="http://i.imgur.com/5fMcgQh.png" alt=""><br>先查看是否开启服务<br><img src="http://i.imgur.com/YU0igMq.png" alt=""><br>开启并设置客户端授权码，这个很重要。如果是qq邮箱，需要发短信配置</p>
<h2 id="jar包"><a href="#jar包" class="headerlink" title="jar包"></a>jar包</h2><p>javaMail需要两个jar，直接使用maven导入依赖</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">&lt;dependency&gt;</div><div class="line">          &lt;groupId&gt;javax.activation&lt;/groupId&gt;</div><div class="line">          &lt;artifactId&gt;activation&lt;/artifactId&gt;</div><div class="line">          &lt;version&gt;1.1.1&lt;/version&gt;</div><div class="line">      &lt;/dependency&gt;</div><div class="line">      &lt;dependency&gt;</div><div class="line">          &lt;groupId&gt;com.sun.mail&lt;/groupId&gt;</div><div class="line">          &lt;artifactId&gt;javax.mail&lt;/artifactId&gt;</div><div class="line">          &lt;version&gt;1.5.2&lt;/version&gt;</div><div class="line">      &lt;/dependency&gt;</div></pre></td></tr></table></figure>
<h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div></pre></td><td class="code"><pre><div class="line">//主机名,上面在开启POP3/SMTP/IMAP服务的时候有服务器地址</div><div class="line">   public static String HOST_NAME = &quot;smtp.126.com&quot;;</div><div class="line">   //用户名，邮箱的登陆名</div><div class="line">   public static String USER_NAME = &quot;xxxxx&quot;;</div><div class="line">   //密码，这里是开始设置的授权码</div><div class="line">   public static String USER_PASSWD = &quot;xxxxx&quot;;</div><div class="line">   //发件人</div><div class="line">   public static String FROM_NAME = &quot;xxxxx&quot;;</div><div class="line">   //抄送人</div><div class="line">   public static String CC_NAME = &quot;xxxxx&quot;;</div><div class="line"></div><div class="line">   /**</div><div class="line">    * @param toEmail 发送给谁</div><div class="line">    * @param code   发送的内容，验证码</div><div class="line">    */</div><div class="line">   public static void sendMail(String toEmail, String code) &#123;</div><div class="line">       //1：创建Properties</div><div class="line">       Properties properties = new Properties();</div><div class="line">       properties.put(&quot;mail.host&quot;, HOST_NAME);</div><div class="line">       properties.put(&quot;mail.smtp.auth&quot;, &quot;true&quot;);</div><div class="line">       //2：获取用户名和密码进行认证</div><div class="line">       Authenticator authenticator = new Authenticator() &#123;</div><div class="line">           @Override</div><div class="line">           protected PasswordAuthentication getPasswordAuthentication() &#123;</div><div class="line">               return new PasswordAuthentication(USER_NAME, USER_PASSWD);</div><div class="line">           &#125;</div><div class="line">       &#125;;</div><div class="line">       //3：获取session对象</div><div class="line">       Session session = Session.getInstance(properties, authenticator);</div><div class="line">       //4：设置邮件发送信息</div><div class="line">       Message message = new MimeMessage(session);</div><div class="line">       try &#123;</div><div class="line">           //4.1：设置发件人</div><div class="line">           message.setFrom(new InternetAddress(FROM_NAME));</div><div class="line">           //4.2：设置收件人</div><div class="line">		//Message.RecipientType.TO 收件人</div><div class="line">		//Message.RecipientType.CC 抄送</div><div class="line">		//Message.RecipientType.BCC 暗送</div><div class="line">           message.setRecipient(Message.RecipientType.TO, new InternetAddress(toEmail));</div><div class="line">           //4.3：设置邮件主题</div><div class="line">           message.setSubject(&quot;主题！！&quot;);</div><div class="line">           //4.4：设置邮件正文</div><div class="line">           message.setContent(code,&quot;text/html;charset=utf-8&quot;);</div><div class="line">           //5：发送邮件</div><div class="line">           Transport.send(message);</div><div class="line">       &#125; catch (MessagingException e) &#123;</div><div class="line">           e.printStackTrace();</div><div class="line">       &#125;</div><div class="line">   &#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在使用javaMail发邮件之前先简单说一下邮件的三个协议：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;POP3：POP的全称是 Post Office Protocol ，即邮局协议，用于电子邮件的接收，它使用TCP的110端口，现在常用的是第三版，所以简称为 POP3。
    
    </summary>
    
    
      <category term="javamail" scheme="http://yoursite.com/tags/javamail/"/>
    
  </entry>
  
  <entry>
    <title>Redis入门之环境的搭建</title>
    <link href="http://yoursite.com/2017/08/20/Redis%E5%85%A5%E9%97%A8%E4%B9%8B%E7%8E%AF%E5%A2%83%E7%9A%84%E6%90%AD%E5%BB%BA/"/>
    <id>http://yoursite.com/2017/08/20/Redis入门之环境的搭建/</id>
    <published>2017-08-20T05:09:50.000Z</published>
    <updated>2017-08-20T09:09:51.304Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一、-Ubuntu下redis的搭建"><a href="#一、-Ubuntu下redis的搭建" class="headerlink" title="一、 Ubuntu下redis的搭建"></a>一、 Ubuntu下redis的搭建</h2><p>这里直接使用命令下载以及安装，<br><a id="more"></a></p>
<h3 id="1、下载redis"><a href="#1、下载redis" class="headerlink" title="1、下载redis"></a>1、下载redis</h3><p>首先进入root下</p>
<pre><code>root@ubuntu:~# wget http://download.redis.io/releases/redis-4.0.1.tar.gz
</code></pre><h3 id="2、解压"><a href="#2、解压" class="headerlink" title="2、解压"></a>2、解压</h3><p>这里可以直接使用解压命令解压文件</p>
<pre><code>root@ubuntu:~# tar -xzvf redis-4.0.1.tar.gz 
</code></pre><h3 id="3、编译安装"><a href="#3、编译安装" class="headerlink" title="3、编译安装"></a>3、编译安装</h3><p>解压完成后进入到解压后的目录中使用make命令既可编译</p>
<figure>

<pre><code>root@ubuntu:~# cd redis-4.0.1
root@ubuntu:~/redis-4.0.1# make
</code></pre><p></p></figure><br><img src="http://i.imgur.com/OLbC1eB.png" alt=""><p></p>
<p>如上图所示如果没有错误为编译成功</p>
<p>输入make test命令测试是否安装成功</p>
<pre><code>root@ubuntu:~/redis-4.0.1# make test
</code></pre><p><img src="http://i.imgur.com/7uhWPED.png" alt=""></p>
<p>这里第一次可能会出现错误，如果出现错误可以再次执行该命令</p>
<h3 id="4、启动redis"><a href="#4、启动redis" class="headerlink" title="4、启动redis"></a>4、启动redis</h3><pre><code>root@ubuntu:~/redis-4.0.1# cd src/
root@ubuntu:~/redis-4.0.1/src# ls
</code></pre><p>在redis的根目录下查看是否含有redis.conf文件</p>
<p><img src="http://i.imgur.com/GDekIrp.png" alt=""></p>
<p>然后进入到src目录中使用ls命令查看是否包含以下文件</p>
<p><img src="http://i.imgur.com/n5F2V47.png" alt=""></p>
<p>将redis添加到Path环境变量中，方便下次直接启动redis</p>
<pre><code>root@ubuntu:~/redis-4.0.1/src# cp redis-server /usr/local/bin/
root@ubuntu:~/redis-4.0.1/src# cp redis-cli /usr/local/bin/
</code></pre><p>使用命令启动redis</p>
<pre><code>root@ubuntu:~/redis-4.0.1/src# redis-server 
</code></pre><p><img src="http://i.imgur.com/2WyODnB.png" alt=""></p>
<p>如图表示服务启动成功，不要关闭该终端，使用shift+ctrl+t开启一个新的终端，输入redis-cli命令进入redis</p>
<p><img src="http://i.imgur.com/emLpYDY.png" alt=""></p>
<p>配置成功</p>
<p>另外在Ubuntu中可以直接使用apt-get命令安装，这里直接盗用<a href="https://www.runoob.com/redis/redis-install.html" title="菜鸟教程" target="_blank" rel="external">菜鸟教程</a>了。<br><img src="http://i.imgur.com/sF1LCM8.png" alt=""></p>
<h2 id="二、在window中搭建"><a href="#二、在window中搭建" class="headerlink" title="二、在window中搭建"></a>二、在window中搭建</h2><p>这使用的是win7-64的系统</p>
<h3 id="1、首先当然是下载"><a href="#1、首先当然是下载" class="headerlink" title="1、首先当然是下载"></a>1、首先当然是下载</h3><p><a href="https://github.com/MicrosoftArchive/redis/releases" target="_blank" rel="external">redis下载地址</a></p>
<p><img src="http://i.imgur.com/pugaQ5M.png" alt=""></p>
<h3 id="2、安装"><a href="#2、安装" class="headerlink" title="2、安装"></a>2、安装</h3><p>安装版的直接点下一步就行了，安装完成之后直接进入在命令行中输入redis-cli既可<br><img src="http://i.imgur.com/E9EFy95.png" alt=""></p>
<p>如果是解压版的需要解压后，进入到解压后的目录中使用redis-server命令启动服务既可使用。</p>
<h2 id="三、连接远程redis"><a href="#三、连接远程redis" class="headerlink" title="三、连接远程redis"></a>三、连接远程redis</h2><p><img src="http://i.imgur.com/gjVNyMe.png" alt=""></p>
<p>-h后面为连接主机的ip地址，-p为端口号</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;一、-Ubuntu下redis的搭建&quot;&gt;&lt;a href=&quot;#一、-Ubuntu下redis的搭建&quot; class=&quot;headerlink&quot; title=&quot;一、 Ubuntu下redis的搭建&quot;&gt;&lt;/a&gt;一、 Ubuntu下redis的搭建&lt;/h2&gt;&lt;p&gt;这里直接使用命令下载以及安装，&lt;br&gt;
    
    </summary>
    
    
      <category term="redis" scheme="http://yoursite.com/tags/redis/"/>
    
  </entry>
  
</feed>
