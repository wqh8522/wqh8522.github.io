<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>wanqh的个人博客</title>
  <subtitle>记录生活、工作、学习点点滴滴</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://www.wanqhblog.top/"/>
  <updated>2017-12-29T06:35:36.375Z</updated>
  <id>http://www.wanqhblog.top/</id>
  
  <author>
    <name>Wan QingHua</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>使用nginx代理访问FastDFS上传的文件</title>
    <link href="http://www.wanqhblog.top/2017/12/29/%E4%BD%BF%E7%94%A8nginx%E4%BB%A3%E7%90%86%E8%AE%BF%E9%97%AEFastDFS%E4%B8%8A%E4%BC%A0%E7%9A%84%E6%96%87%E4%BB%B6/"/>
    <id>http://www.wanqhblog.top/2017/12/29/使用nginx代理访问FastDFS上传的文件/</id>
    <published>2017-12-29T01:12:24.000Z</published>
    <updated>2017-12-29T06:35:36.375Z</updated>
    
    <content type="html"><![CDATA[<p>上一次介绍了关于FastDFS系统单机版的安装配置以及使用官方测试上传图片：<br><a href="http://www.wanqhblog.top/2017/12/27/FastDFS%E7%B3%BB%E7%BB%9F%E7%9A%84%E6%90%AD%E5%BB%BA/">Linux下FastDFS系统的搭建</a><br>上传成功返回的链接还无法访问，因为FastDFS不支持http协议，所以要想直接访问，还需要使用nginx访问传的图片，文件。</p>
<p><img src="http://oy09glbzm.bkt.clouddn.com/17-12-27/58813378.jpg?imageView2/0/q/100|watermark/2/text/d2FucWhibG9nLnRvcA==/font/5a6L5L2T/fontsize/500/fill/I0VGRUZFRg==/dissolve/70/gravity/SouthEast/dx/5/dy/5" alt=""><br><a id="more"></a></p>
<h2 id="nginx的搭建"><a href="#nginx的搭建" class="headerlink" title="nginx的搭建"></a>nginx的搭建</h2><p>这里就不介绍了，传送门：<a href="http://www.wanqhblog.top/2017/11/25/CentOS%E4%B8%8BNginx%E7%9A%84%E9%85%8D%E7%BD%AE%E5%AE%89%E8%A3%85/">CentOS下Nginx的配置安装</a></p>
<h2 id="fastdfs-nginx-module"><a href="#fastdfs-nginx-module" class="headerlink" title="fastdfs-nginx-module"></a>fastdfs-nginx-module</h2><p>下载地址：<a href="https://github.com/happyfish100/fastdfs-nginx-module" target="_blank" rel="external">https://github.com/happyfish100/fastdfs-nginx-module</a><br>这里我从新安装nginx服务器，命令如下：如果是在现有的nginx上添加，可能会比较麻烦<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">[root@localhost nginx]# wget https://github.com/happyfish100/fastdfs-nginx-module/archive/master.zip</div><div class="line">[root@localhost nginx]# unzip master.zip</div><div class="line">[root@localhost nginx]# cd nginx-1.9.0/</div><div class="line">[root@localhost nginx-1.9.0]#  ./configure --prefix=/usr/local/webserver/nginx --with-http_stub_status_module --with-pcre=/usr/local/nginx/pcre-8.41 --add-module=/usr/local/nginx/fastdfs-nginx-module-master/src</div><div class="line">[root@localhost nginx-1.9.0]# make</div><div class="line">[root@localhost nginx-1.9.0]# make install</div></pre></td></tr></table></figure></p>
<p>安装完成之后要三个配置文件拷贝到fastDFS的配置文件目录下，我这里是<code>/etc/fdfs</code><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">[root@localhost nginx-1.9.0]# cp /usr/local/nginx/fastdfs-nginx-module-master/src/mod_fastdfs.conf /etc/fdfs</div><div class="line"></div><div class="line">[root@localhost src]# cp /usr/local/fastdfs/fastdfs-5.11/conf/http.conf /etc/fdfs/</div><div class="line"></div><div class="line">[root@localhost src]# cp /usr/local//fastdfs/fastdfs-5.11/conf/mime.types /etc/fdfs/</div></pre></td></tr></table></figure></p>
<p>修改mod_fastdfs.conf 配置信息：<br><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">[root@localhost bin]# vim /etc/fdfs/mod_fastdfs.conf</div></pre></td></tr></table></figure></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">base_path=/data/fastdfs/storage</div><div class="line">tracker_server=192.168.18.130:22122</div><div class="line">store_path0=/data/fastdfs/storage</div></pre></td></tr></table></figure>
<p>然后建立软连接：指向文件保存路径<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">[root@localhost nginx-1.9.0]# ln -s /data/fastdfs/storage/data/ /data/fastdfs/storage/data/M00</div></pre></td></tr></table></figure></p>
<p>最后修改nginx的配置文件：添加location</p>
<p><img src="http://oy09glbzm.bkt.clouddn.com/17-12-29/82209240.jpg?imageView2/0/q/75|watermark/2/text/d2FucWhibG9nLnRvcA==/font/5a6L5L2T/fontsize/300/fill/IzJDMUJFRQ==/dissolve/100/gravity/SouthEast/dx/10/dy/10" alt=""></p>
<h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><p>启动nginx：<br><code>[root@localhost src]# /usr/local/webserver/nginx/sbin/nginx -s reload</code><br>再次使用客户端测试类上传一张图片或者文件：<br><img src="http://oy09glbzm.bkt.clouddn.com/17-12-29/76287184.jpg?imageView2/0/q/75|watermark/2/text/d2FucWhibG9nLnRvcA==/font/5a6L5L2T/fontsize/300/fill/IzJDMUJFRQ==/dissolve/100/gravity/SouthEast/dx/10/dy/10" alt=""><br>在浏览器访问返回的链接：<br><img src="http://oy09glbzm.bkt.clouddn.com/17-12-29/17508526.jpg?imageView2/0/q/75|watermark/2/text/d2FucWhibG9nLnRvcA==/font/5a6L5L2T/fontsize/300/fill/IzJDMUJFRQ==/dissolve/100/gravity/SouthEast/dx/10/dy/10" alt=""></p>
<hr>
<p>关于nginx+FastDFS的简单配置介绍完成！！！</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;上一次介绍了关于FastDFS系统单机版的安装配置以及使用官方测试上传图片：&lt;br&gt;&lt;a href=&quot;http://www.wanqhblog.top/2017/12/27/FastDFS%E7%B3%BB%E7%BB%9F%E7%9A%84%E6%90%AD%E5%BB%BA/&quot;&gt;Linux下FastDFS系统的搭建&lt;/a&gt;&lt;br&gt;上传成功返回的链接还无法访问，因为FastDFS不支持http协议，所以要想直接访问，还需要使用nginx访问传的图片，文件。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://oy09glbzm.bkt.clouddn.com/17-12-27/58813378.jpg?imageView2/0/q/100|watermark/2/text/d2FucWhibG9nLnRvcA==/font/5a6L5L2T/fontsize/500/fill/I0VGRUZFRg==/dissolve/70/gravity/SouthEast/dx/5/dy/5&quot; alt=&quot;&quot;&gt;&lt;br&gt;
    
    </summary>
    
      <category term="FastDFS" scheme="http://www.wanqhblog.top/categories/FastDFS/"/>
    
    
      <category term="Nginx" scheme="http://www.wanqhblog.top/tags/Nginx/"/>
    
      <category term="FastDFS" scheme="http://www.wanqhblog.top/tags/FastDFS/"/>
    
  </entry>
  
  <entry>
    <title>关于SpringBoot上传图片的几种方式</title>
    <link href="http://www.wanqhblog.top/2017/12/28/%E5%85%B3%E4%BA%8ESpringBoot%E4%B8%8A%E4%BC%A0%E5%9B%BE%E7%89%87%E7%9A%84%E5%87%A0%E7%A7%8D%E6%96%B9%E5%BC%8F/"/>
    <id>http://www.wanqhblog.top/2017/12/28/关于SpringBoot上传图片的几种方式/</id>
    <published>2017-12-28T12:30:59.000Z</published>
    <updated>2017-12-28T08:37:36.608Z</updated>
    
    <content type="html"><![CDATA[<p>网站上传图片、文件等，最常见的就是直接上传到服务器的webapp目录下，或者直接上传服务的一个指定的文件夹下面。这种方式对于简单的单机应用确实是很方便、简单，出现的问题也会比较少。但是对于分布式项目，直接上传到项目路径的方式显然是不可靠的，而且随着业务量的增加，文件也会增加，对服务器的压力自然就增加了。这里简单的介绍自己所了解的几种方式保存文件。</p>
<ol>
<li>直接上传到指定的服务器路径；</li>
<li>上传到第三方内容存储器，这里介绍将图片保存到七牛云</li>
<li>自己搭建文件存储服务器，如：FastDFS<h2 id="最简单的上传"><a href="#最简单的上传" class="headerlink" title="最简单的上传"></a>最简单的上传</h2>首先说明，该项目结构是SpringBoot+mybatis。因为项目使用jar形式打包，所以这里将图片保存到一个指定的目录下。<a id="more"></a><br>添加WebAppConfig配置类<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Configuration</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WebAppConfig</span> <span class="keyword">extends</span> <span class="title">WebMvcConfigurerAdapter</span></span>&#123;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line"><span class="comment">     * 在配置文件中配置的文件保存路径</span></div><div class="line"><span class="comment">     */</span></div><div class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;img.location&#125;"</span>)</div><div class="line">    <span class="keyword">private</span> String location;</div><div class="line"></div><div class="line">    <span class="meta">@Bean</span></div><div class="line">    <span class="function"><span class="keyword">public</span> MultipartConfigElement <span class="title">multipartConfigElement</span><span class="params">()</span></span>&#123;</div><div class="line">        MultipartConfigFactory factory = <span class="keyword">new</span> MultipartConfigFactory();</div><div class="line">        <span class="comment">//文件最大KB,MB</span></div><div class="line">        factory.setMaxFileSize(<span class="string">"2MB"</span>);</div><div class="line">        <span class="comment">//设置总上传数据总大小</span></div><div class="line">        factory.setMaxRequestSize(<span class="string">"10MB"</span>);</div><div class="line">        <span class="keyword">return</span> factory.createMultipartConfig();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ol>
<p>文件上传的方法,这个方法有些参数可能需要做简单的修改，大致就是文件先做文件保存路径的处理，然后保存文件到该路径，最后返回文件上传信息<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@PutMapping</span>(<span class="string">"/article/img/upload"</span>)</div><div class="line">   <span class="function"><span class="keyword">public</span> MarkDVo <span class="title">uploadImg</span><span class="params">(@RequestParam(<span class="string">"editormd-image-file"</span>)</span> MultipartFile multipartFile)  </span>&#123;</div><div class="line">       <span class="keyword">if</span> (multipartFile.isEmpty() || StringUtils.isBlank(multipartFile.getOriginalFilename())) &#123;</div><div class="line">          <span class="keyword">throw</span> <span class="keyword">new</span> BusinessException(ResultEnum.IMG_NOT_EMPTY);</div><div class="line">       &#125;</div><div class="line">       String contentType = multipartFile.getContentType();</div><div class="line">       <span class="keyword">if</span> (!contentType.contains(<span class="string">""</span>)) &#123;</div><div class="line">           <span class="keyword">throw</span> <span class="keyword">new</span> BusinessException(ResultEnum.IMG_FORMAT_ERROR);</div><div class="line">       &#125;</div><div class="line">       String root_fileName = multipartFile.getOriginalFilename();</div><div class="line">       logger.info(<span class="string">"上传图片:name=&#123;&#125;,type=&#123;&#125;"</span>, root_fileName, contentType);</div><div class="line">       <span class="comment">//处理图片</span></div><div class="line">       User currentUser = userService.getCurrentUser();</div><div class="line">       <span class="comment">//获取路径</span></div><div class="line">       String return_path = ImageUtil.getFilePath(currentUser);</div><div class="line">       String filePath = location + return_path;</div><div class="line">       logger.info(<span class="string">"图片保存路径=&#123;&#125;"</span>, filePath);</div><div class="line">       String file_name = <span class="keyword">null</span>;</div><div class="line">       <span class="keyword">try</span> &#123;</div><div class="line">           file_name = ImageUtil.saveImg(multipartFile, filePath);</div><div class="line">           MarkDVo markDVo = <span class="keyword">new</span> MarkDVo();</div><div class="line">           markDVo.setSuccess(<span class="number">0</span>);</div><div class="line">           <span class="keyword">if</span>(StringUtils.isNotBlank(file_name))&#123;</div><div class="line">               markDVo.setSuccess(<span class="number">1</span>);</div><div class="line">               markDVo.setMessage(<span class="string">"上传成功"</span>);</div><div class="line">               markDVo.setUrl(return_path+File.separator+file_name);</div><div class="line">               markDVo.setCallback(callback);</div><div class="line">           &#125;</div><div class="line">           logger.info(<span class="string">"返回值：&#123;&#125;"</span>,markDVo);</div><div class="line">           <span class="keyword">return</span> markDVo;</div><div class="line">       &#125; <span class="keyword">catch</span> (IOException e) &#123;</div><div class="line">           <span class="keyword">throw</span> <span class="keyword">new</span> BusinessException(ResultEnum.SAVE_IMG_ERROE);</div><div class="line">       &#125;</div><div class="line">   &#125;</div></pre></td></tr></table></figure></p>
<p>文件保存类<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment">   * 保存文件，直接以multipartFile形式</span></div><div class="line"><span class="comment">   * <span class="doctag">@param</span> multipartFile</span></div><div class="line"><span class="comment">   * <span class="doctag">@param</span> path 文件保存绝对路径</span></div><div class="line"><span class="comment">   * <span class="doctag">@return</span> 返回文件名</span></div><div class="line"><span class="comment">   * <span class="doctag">@throws</span> IOException</span></div><div class="line"><span class="comment">   */</span></div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">saveImg</span><span class="params">(MultipartFile multipartFile,String path)</span> <span class="keyword">throws</span> IOException </span>&#123;</div><div class="line">      File file = <span class="keyword">new</span> File(path);</div><div class="line">      <span class="keyword">if</span> (!file.exists()) &#123;</div><div class="line">          file.mkdirs();</div><div class="line">      &#125;</div><div class="line">      FileInputStream fileInputStream = (FileInputStream) multipartFile.getInputStream();</div><div class="line">      String fileName = Constants.getUUID() + <span class="string">".png"</span>;</div><div class="line">      BufferedOutputStream bos = <span class="keyword">new</span> BufferedOutputStream(<span class="keyword">new</span> FileOutputStream(path + File.separator + fileName));</div><div class="line">      <span class="keyword">byte</span>[] bs = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>];</div><div class="line">      <span class="keyword">int</span> len;</div><div class="line">      <span class="keyword">while</span> ((len = fileInputStream.read(bs)) != -<span class="number">1</span>) &#123;</div><div class="line">          bos.write(bs, <span class="number">0</span>, len);</div><div class="line">      &#125;</div><div class="line">      bos.flush();</div><div class="line">      bos.close();</div><div class="line">      <span class="keyword">return</span> fileName;</div><div class="line">  &#125;</div></pre></td></tr></table></figure></p>
<p>配置文件保存路径<br><img src="http://oy09glbzm.bkt.clouddn.com/17-12-28/13570974.jpg?imageView2/0/q/100|watermark/2/text/d2FucWhibG9nLnRvcA==/font/5a6L5L2T/fontsize/300/fill/I0Y2MEIyOA==/dissolve/100/gravity/SouthEast/dx/10/dy/10" alt=""><br>测试：直接使用postman上传<br><img src="http://oy09glbzm.bkt.clouddn.com/17-12-28/33998744.jpg?imageView2/0/q/100|watermark/2/text/d2FucWhibG9nLnRvcA==/font/5a6L5L2T/fontsize/300/fill/I0Y2MEIyOA==/dissolve/100/gravity/SouthEast/dx/10/dy/10" alt=""><br><img src="http://oy09glbzm.bkt.clouddn.com/17-12-28/48469105.jpg?imageView2/0/q/100|watermark/2/text/d2FucWhibG9nLnRvcA==/font/5a6L5L2T/fontsize/300/fill/I0Y2MEIyOA==/dissolve/100/gravity/SouthEast/dx/10/dy/10" alt=""><br>下面需要访问预览该上传的图片<br>在配置文件中添加对静态资源的配置。SpringBoot对静态的的处理，<a href="http://blog.csdn.net/zsl129/article/details/52906762" target="_blank" rel="external">Springboot 之 静态资源路径配置</a><br><img src="http://oy09glbzm.bkt.clouddn.com/17-12-28/31217645.jpg?imageView2/0/q/100|watermark/2/text/d2FucWhibG9nLnRvcA==/font/5a6L5L2T/fontsize/300/fill/I0Y2MEIyOA==/dissolve/100/gravity/SouthEast/dx/10/dy/10" alt=""><br>然后在浏览器链接栏输入：此处应该忽略图片<br><img src="http://oy09glbzm.bkt.clouddn.com/17-12-28/45678677.jpg?imageView2/0/q/100|watermark/2/text/d2FucWhibG9nLnRvcA==/font/5a6L5L2T/fontsize/300/fill/I0Y2MEIyOA==/dissolve/100/gravity/SouthEast/dx/10/dy/10" alt=""></p>
<h2 id="上传到七牛云"><a href="#上传到七牛云" class="headerlink" title="上传到七牛云"></a>上传到七牛云</h2><p>这里首先要在七牛云中注册一个账号，并开通对象存储空间，免费用户有10G的存储空间。教程：<a href="http://jiantuku.com/help/faq.html?src=settings_head" target="_blank" rel="external">http://jiantuku.com/help/faq.html?src=settings_head</a></p>
<p>然后在自己的项目中搭建环境：使用maven导包<br><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&lt;dependency&gt;</div><div class="line">    &lt;groupId&gt;com.qiniu&lt;/groupId&gt;</div><div class="line">    &lt;artifactId&gt;qiniu-java-sdk&lt;/artifactId&gt;</div><div class="line">    &lt;version&gt;[7.2.0, 7.2.99]&lt;/version&gt;</div><div class="line">&lt;/dependency&gt;</div></pre></td></tr></table></figure></p>
<p>然后再刚才找到刚才创建密钥，复制出来保存保存在项目资源文件中<br><img src="http://oy09glbzm.bkt.clouddn.com/17-12-28/69622466.jpg?imageView2/0/q/100|watermark/2/text/d2FucWhibG9nLnRvcA==/font/5a6L5L2T/fontsize/300/fill/I0Y2MEIyOA==/dissolve/100/gravity/SouthEast/dx/10/dy/10" alt=""><br>这里的bucket就是上面的存储空间名称，然后path是域名。<br><img src="http://oy09glbzm.bkt.clouddn.com/17-12-28/66830677.jpg?imageView2/0/q/100|watermark/2/text/d2FucWhibG9nLnRvcA==/font/5a6L5L2T/fontsize/300/fill/I0Y2MEIyOA==/dissolve/100/gravity/SouthEast/dx/10/dy/10" alt=""><br>上传工具类：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Component</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">QiniuUtil</span></span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Logger logger = LoggerFactory.getLogger(QiniuUtil.class);</div><div class="line"></div><div class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;qiniu.accessKey&#125;"</span>)</div><div class="line">    <span class="keyword">private</span> String accessKey;</div><div class="line"></div><div class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;qiniu.secretKey&#125;"</span>)</div><div class="line">    <span class="keyword">private</span> String secretKey;</div><div class="line"></div><div class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;qiniu.bucket&#125;"</span>)</div><div class="line">    <span class="keyword">private</span> String bucket;</div><div class="line"></div><div class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;qiniu.path&#125;"</span>)</div><div class="line">    <span class="keyword">private</span> String path;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line"><span class="comment">     * 将图片上传到七牛云</span></div><div class="line"><span class="comment">     * <span class="doctag">@param</span> file</span></div><div class="line"><span class="comment">     * <span class="doctag">@param</span> key 保存在空间中的名字，如果为空会使用文件的hash值为文件名</span></div><div class="line"><span class="comment">     * <span class="doctag">@return</span></span></div><div class="line"><span class="comment">     */</span></div><div class="line">    <span class="function"><span class="keyword">public</span>  String <span class="title">uploadImg</span><span class="params">(FileInputStream file, String key)</span> </span>&#123;</div><div class="line">        <span class="comment">//构造一个带指定Zone对象的配置类</span></div><div class="line">        Configuration cfg = <span class="keyword">new</span> Configuration(Zone.zone1());</div><div class="line"><span class="comment">//...其他参数参考类注释</span></div><div class="line">        UploadManager uploadManager = <span class="keyword">new</span> UploadManager(cfg);</div><div class="line"><span class="comment">//...生成上传凭证，然后准备上传</span></div><div class="line"><span class="comment">//        String bucket = "oy09glbzm.bkt.clouddn.com";</span></div><div class="line">        <span class="comment">//默认不指定key的情况下，以文件内容的hash值作为文件名</span></div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            Auth auth = Auth.create(accessKey, secretKey);</div><div class="line">            String upToken = auth.uploadToken(bucket);</div><div class="line">            <span class="keyword">try</span> &#123;</div><div class="line">                Response response = uploadManager.put(file, key, upToken, <span class="keyword">null</span>, <span class="keyword">null</span>);</div><div class="line">                <span class="comment">//解析上传成功的结果</span></div><div class="line">                DefaultPutRet putRet = JSON.parseObject(response.bodyString(), DefaultPutRet.class);</div><div class="line"><span class="comment">//                DefaultPutRet putRet = new Gson().fromJson(response.bodyString(), DefaultPutRet.class);</span></div><div class="line"><span class="comment">//                System.out.println(putRet.key);</span></div><div class="line"><span class="comment">//                System.out.println(putRet.hash);</span></div><div class="line">                String return_path = path+<span class="string">"/"</span>+putRet.key;</div><div class="line">                logger.info(<span class="string">"保存地址=&#123;&#125;"</span>,return_path);</div><div class="line">                <span class="keyword">return</span> return_path;</div><div class="line">            &#125; <span class="keyword">catch</span> (QiniuException ex) &#123;</div><div class="line">                Response r = ex.response;</div><div class="line">                System.err.println(r.toString());</div><div class="line">                <span class="keyword">try</span> &#123;</div><div class="line">                    System.err.println(r.bodyString());</div><div class="line">                &#125; <span class="keyword">catch</span> (QiniuException ex2) &#123;</div><div class="line">                    <span class="comment">//ignore</span></div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> <span class="string">""</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>上传接口方法<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment">   * 上传文件到七牛云存储</span></div><div class="line"><span class="comment">   * <span class="doctag">@param</span> multipartFile</span></div><div class="line"><span class="comment">   * <span class="doctag">@return</span></span></div><div class="line"><span class="comment">   * <span class="doctag">@throws</span> IOException</span></div><div class="line"><span class="comment">   */</span></div><div class="line">  <span class="meta">@PutMapping</span>(<span class="string">"/article/img/qiniu"</span>)</div><div class="line">  <span class="function"><span class="keyword">public</span> String <span class="title">uploadImgQiniu</span><span class="params">(@RequestParam(<span class="string">"editormd-image-file"</span>)</span> MultipartFile multipartFile) <span class="keyword">throws</span> IOException </span>&#123;</div><div class="line">      FileInputStream inputStream = (FileInputStream) multipartFile.getInputStream();</div><div class="line">      User currentUser = userService.getCurrentUser();</div><div class="line">      String path = qiniuUtil.uploadImg(inputStream, currentUser.getUsername()+<span class="string">"_"</span>+Constants.getUUID());</div><div class="line">      <span class="keyword">return</span> path;</div><div class="line">  &#125;</div></pre></td></tr></table></figure></p>
<p>测试<br><img src="http://oy09glbzm.bkt.clouddn.com/17-12-28/76790561.jpg?imageView2/0/q/100|watermark/2/text/d2FucWhibG9nLnRvcA==/font/5a6L5L2T/fontsize/300/fill/I0Y2MEIyOA==/dissolve/100/gravity/SouthEast/dx/10/dy/10" alt=""><br><img src="http://oy09glbzm.bkt.clouddn.com/17-12-28/19209895.jpg?imageView2/0/q/100|watermark/2/text/d2FucWhibG9nLnRvcA==/font/5a6L5L2T/fontsize/300/fill/I0Y2MEIyOA==/dissolve/100/gravity/SouthEast/dx/10/dy/10" alt=""></p>
<h2 id="上传文件到FastDFS"><a href="#上传文件到FastDFS" class="headerlink" title="上传文件到FastDFS"></a>上传文件到FastDFS</h2><p>首先需要搭建FastDFS服务器，这里就不介绍了。传送门：<a href="http://www.wanqhblog.top/2017/12/27/FastDFS%E7%B3%BB%E7%BB%9F%E7%9A%84%E6%90%AD%E5%BB%BA/">Linux下FastDFS系统的搭建</a><br>依赖<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">&lt;!--FastDFS存储图片 start--&gt;</div><div class="line"> &lt;dependency&gt;</div><div class="line">     &lt;groupId&gt;com.github.tobato&lt;/groupId&gt;</div><div class="line">     &lt;artifactId&gt;fastdfs-client&lt;/artifactId&gt;</div><div class="line">     &lt;version&gt;1.25.4-RELEASE&lt;/version&gt;</div><div class="line"> &lt;/dependency&gt;</div><div class="line"> &lt;!--FastDFS存储图片 end--&gt;</div></pre></td></tr></table></figure></p>
<p>添加配置信息</p>
<p><img src="http://oy09glbzm.bkt.clouddn.com/17-12-28/71671941.jpg?imageView2/0/q/100|watermark/2/text/d2FucWhibG9nLnRvcA==/font/5a6L5L2T/fontsize/300/fill/I0Y2MEIyOA==/dissolve/100/gravity/SouthEast/dx/10/dy/10" alt=""></p>
<p>FastDFS配置类<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Configuration</span></div><div class="line"><span class="meta">@ComponentScan</span>(value = <span class="string">"com.github.tobato.fastdfs.service"</span>)</div><div class="line"><span class="meta">@Import</span>(FdfsClientConfig.class)</div><div class="line"><span class="meta">@EnableMBeanExport</span>(registration = RegistrationPolicy.IGNORE_EXISTING)</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FastDfsConfig</span> </span>&#123;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>这里对于FastDFS文件的操作只处理上传，上传文件类：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">  <span class="meta">@Autowired</span></div><div class="line">  <span class="keyword">private</span> FastFileStorageClient storageClient;</div><div class="line"></div><div class="line">  <span class="meta">@Autowired</span></div><div class="line">  <span class="keyword">private</span> FdfsWebServer fdfsWebServer;</div><div class="line"></div><div class="line"><span class="meta">@PutMapping</span>(<span class="string">"/article/img/fdfs"</span>)</div><div class="line">  <span class="function"><span class="keyword">public</span> String <span class="title">uploadImgfdfs</span><span class="params">(@RequestParam(value = <span class="string">"editormd-image-file"</span>)</span> MultipartFile multipartFile) <span class="keyword">throws</span> IOException </span>&#123;</div><div class="line">      StorePath storePath= storageClient.uploadFile(multipartFile.getInputStream(), multipartFile.getSize(), <span class="string">"png"</span>, <span class="keyword">null</span>);</div><div class="line">      String path = storePath.getFullPath();</div><div class="line">      logger.info(<span class="string">"保存路径=&#123;&#125;"</span>,path);</div><div class="line">      <span class="keyword">return</span> path;</div><div class="line">  &#125;</div></pre></td></tr></table></figure></p>
<p>测试：<br><img src="http://oy09glbzm.bkt.clouddn.com/17-12-28/23800686.jpg" alt=""></p>
<hr>
<p>参考：</p>
<ul>
<li><a href="http://blog.csdn.net/zsl129/article/details/52906762" target="_blank" rel="external">Springboot 之 静态资源路径配置</a></li>
<li><a href="https://www.jianshu.com/p/fcc7dc5f8be0" target="_blank" rel="external">Springboot 之 多文件上传-知识林</a></li>
<li><a href="http://www.bijishequ.com/detail/527312" target="_blank" rel="external">springboot和fastdfs实现文件ajax上传</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;网站上传图片、文件等，最常见的就是直接上传到服务器的webapp目录下，或者直接上传服务的一个指定的文件夹下面。这种方式对于简单的单机应用确实是很方便、简单，出现的问题也会比较少。但是对于分布式项目，直接上传到项目路径的方式显然是不可靠的，而且随着业务量的增加，文件也会增加，对服务器的压力自然就增加了。这里简单的介绍自己所了解的几种方式保存文件。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;直接上传到指定的服务器路径；&lt;/li&gt;
&lt;li&gt;上传到第三方内容存储器，这里介绍将图片保存到七牛云&lt;/li&gt;
&lt;li&gt;自己搭建文件存储服务器，如：FastDFS&lt;h2 id=&quot;最简单的上传&quot;&gt;&lt;a href=&quot;#最简单的上传&quot; class=&quot;headerlink&quot; title=&quot;最简单的上传&quot;&gt;&lt;/a&gt;最简单的上传&lt;/h2&gt;首先说明，该项目结构是SpringBoot+mybatis。因为项目使用jar形式打包，所以这里将图片保存到一个指定的目录下。
    
    </summary>
    
      <category term="SpringBoot" scheme="http://www.wanqhblog.top/categories/SpringBoot/"/>
    
    
      <category term="图片上传" scheme="http://www.wanqhblog.top/tags/%E5%9B%BE%E7%89%87%E4%B8%8A%E4%BC%A0/"/>
    
      <category term="FastDFS" scheme="http://www.wanqhblog.top/tags/FastDFS/"/>
    
      <category term="七牛云" scheme="http://www.wanqhblog.top/tags/%E4%B8%83%E7%89%9B%E4%BA%91/"/>
    
  </entry>
  
  <entry>
    <title>Linux下FastDFS系统的搭建</title>
    <link href="http://www.wanqhblog.top/2017/12/27/FastDFS%E7%B3%BB%E7%BB%9F%E7%9A%84%E6%90%AD%E5%BB%BA/"/>
    <id>http://www.wanqhblog.top/2017/12/27/FastDFS系统的搭建/</id>
    <published>2017-12-27T03:41:58.000Z</published>
    <updated>2017-12-28T03:36:40.601Z</updated>
    
    <content type="html"><![CDATA[<p>FastDFS是由淘宝的余庆先生所开发，是一个轻量级、高性能的开源分布式文件系统，用纯C语言开发，包括文件存储、文件同步、文件访问（上传、下载）、存取负载均衡、在线扩容、相同内容只存储一份等功能，适合有大容量存储需求的应用或系统。做分布式系统开发时，其中要解决的一个问题就是图片、音视频、文件共享的问题，分布式文件系统正好可以解决这个需求。同类的分布式文件系统有谷歌的GFS、HDFS（Hadoop）、TFS（淘宝）等。 <a id="more"></a></p>
<p>源码开放下载地址：<a href="https://github.com/happyfish100" target="_blank" rel="external">https://github.com/happyfish100 </a><br>早期源码开放下载地址：<a href="https://sourceforge.net/projects/fastdfs/files/" target="_blank" rel="external">https://sourceforge.net/projects/fastdfs/files/ </a><br>官网论坛：<a href="http://bbs.chinaunix.net/forum-240-1.html" target="_blank" rel="external">http://bbs.chinaunix.net/forum-240-1.html</a></p>
<h2 id="术语"><a href="#术语" class="headerlink" title="术语"></a>术语</h2><ul>
<li><font color="red">Tracker Server：</font>跟踪服务器，主要做调度工作，在访问上起负载均衡的作用。记录storage server的状态，是连接Client和Storage server的枢纽。</li>
<li><font color="red">Storage Server：</font>存储服务器，文件和meta data都保存到存储服务器上</li>
<li><font color="red"> group：</font>组，也可称为卷。同组内服务器上的文件是完全相同的<br>文件标识：包括两部分：组名和文件名（包含路径）</li>
<li><font color="red">meta data：</font>文件相关属性，键值对（Key Value Pair）方式，如：width=1024,heigth=768<h2 id="FastDFS结构"><a href="#FastDFS结构" class="headerlink" title="FastDFS结构"></a>FastDFS结构</h2><h3 id="系统架构图"><a href="#系统架构图" class="headerlink" title="系统架构图"></a>系统架构图</h3><img src="http://oy09glbzm.bkt.clouddn.com/17-12-27/68974025.jpg?imageView2/0/q/100|watermark/2/text/d2FucWhibG9nLnRvcA==/font/5a6L5L2T/fontsize/500/fill/I0VGRUZFRg==/dissolve/100/gravity/SouthEast/dx/10/dy/10" alt=""><br>部署结构<br><img src="http://oy09glbzm.bkt.clouddn.com/17-12-27/61576190.jpg?imageView2/0/q/100|watermark/2/text/d2FucWhibG9nLnRvcA==/font/5a6L5L2T/fontsize/500/fill/I0VGRUZFRg==/dissolve/100/gravity/SouthEast/dx/10/dy/10" alt=""><h3 id="文件上传下载"><a href="#文件上传下载" class="headerlink" title="文件上传下载"></a>文件上传下载</h3><strong>上传流程</strong><br><img src="http://oy09glbzm.bkt.clouddn.com/17-12-27/23619298.jpg?imageView2/0/q/100|watermark/2/text/d2FucWhibG9nLnRvcA==/font/5a6L5L2T/fontsize/500/fill/I0VGRUZFRg==/dissolve/100/gravity/SouthEast/dx/10/dy/10" alt=""><br><strong>下载流程</strong><br><img src="http://oy09glbzm.bkt.clouddn.com/17-12-27/82524766.jpg?imageView2/0/q/100|watermark/2/text/d2FucWhibG9nLnRvcA==/font/5a6L5L2T/fontsize/500/fill/I0VGRUZFRg==/dissolve/100/gravity/SouthEast/dx/10/dy/10" alt=""><h2 id="系统的部署"><a href="#系统的部署" class="headerlink" title="系统的部署"></a>系统的部署</h2><h3 id="环境介绍"><a href="#环境介绍" class="headerlink" title="环境介绍"></a>环境介绍</h3>操作系统：centerOS 7.3 需要有gcc,安装命令<br><code>yum -y install gcc gcc+ gcc-c++ openssl openssl-devel pcre pcre-devel</code><br>FastDFS ：5.11<h3 id="安装libfastcommon（公共代码）"><a href="#安装libfastcommon（公共代码）" class="headerlink" title="安装libfastcommon（公共代码）"></a>安装libfastcommon（公共代码）</h3>下载zip包<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">wget https://github.com/happyfish100/libfastcommon/archive/master.zip</div></pre></td></tr></table></figure>
</li>
</ul>
<p>解压，如果解压出现<code>-bash: unzip: command not found</code>，说明系统没有安装unzip和zip，使用<code>yum install -y unzip zip</code>安装即可<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">unzip master.zip</div></pre></td></tr></table></figure></p>
<p>编译安装<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">./make.sh</div><div class="line"></div><div class="line">./make.sh install</div></pre></td></tr></table></figure></p>
<p>查看此库文件是否存在，存在则表示安装成功<br><code>ls -l /usr/lib64/libfastcommon.so</code></p>
<h3 id="安装FastDFS"><a href="#安装FastDFS" class="headerlink" title="安装FastDFS"></a>安装FastDFS</h3><p>同样需要下载解压和编译安装<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">wget https://github.com/happyfish100/fastdfs/archive/V5.11.zip</div><div class="line"></div><div class="line">unzip V5.11.zip</div><div class="line"></div><div class="line">./make.sh </div><div class="line"></div><div class="line">./make.sh install</div></pre></td></tr></table></figure></p>
<p>查看fdfs的相关命令,fastDFS命令目录：/usr/bin<br><img src="http://oy09glbzm.bkt.clouddn.com/17-12-27/4190816.jpg?imageView2/0/q/100|watermark/2/text/d2FucWhibG9nLnRvcA==/font/5a6L5L2T/fontsize/500/fill/I0VGRUZFRg==/dissolve/100/gravity/SouthEast/dx/10/dy/10" alt=""></p>
<h2 id="配置文件介绍"><a href="#配置文件介绍" class="headerlink" title="配置文件介绍"></a>配置文件介绍</h2><p>FastDFS的配置文件在/etc/fdfs下面，默认都是以.sample为后缀的，这个后缀要去掉，最好就是先复制一份出来。配置文件大部分是保持默认的，要修改的地方不多。</p>
<h3 id="tracker-conf配置介绍"><a href="#tracker-conf配置介绍" class="headerlink" title="tracker.conf配置介绍"></a>tracker.conf配置介绍</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># ===========================基本配置====================================</span></div><div class="line">	disabled=<span class="literal">false</span></div><div class="line">	<span class="comment">#配置tracker.conf这个配置文件是否生效，因为在启动fastdfs服务端进程时需要指定配置文件，所以需要使次配置文件生效。false是生效，true是让此文件不生效。</span></div><div class="line">	bind_addr=</div><div class="line">	<span class="comment">#程序的监听地址，如果不设定则监听所有地址</span></div><div class="line">	port=22122</div><div class="line">	<span class="comment">#tracker监听的端口</span></div><div class="line">	connect_timeout=30</div><div class="line">	<span class="comment">#连接超时时间，针对socket套接字函数connect，默认为30秒</span></div><div class="line">	network_timeout=60</div><div class="line">	<span class="comment">#网络通讯超时（秒）</span></div><div class="line">	base_path=/home/yuqing/fastdfs</div><div class="line">	<span class="comment">#Tracker数据/日志目录地址，这里一般要修改的，如：/opt/fdfs</span></div><div class="line">	max_connections=256</div><div class="line">	<span class="comment">#允许的最大连接数，这里要根据需求调整.如设置成2048.</span></div><div class="line">	accept_threads=1</div><div class="line">	<span class="comment">#接收数据的线程数</span></div><div class="line">	work_threads=4</div><div class="line">	<span class="comment">#工作线程数，一般为cpu个数，当然CPU核数太多的话可以稍小一点。如我们是12CCPU，这里设置为8.</span></div><div class="line">	min_buff_size = 8KB</div><div class="line">	<span class="comment">#接收/发送数据的buff大小，必须大于8KB</span></div><div class="line">	max_buff_size = 128KB</div><div class="line">	<span class="comment">#接收/发送数据的buff大小必须小于128KB</span></div><div class="line">	store_lookup=2</div><div class="line">	<span class="comment">#在存储文件时选择group的策略也就是文件上传选取group的规则，0:轮训策略 1:指定某一个组 2:负载均衡，选择空闲空间最大的group。</span></div><div class="line">	store_group=group2</div><div class="line">	<span class="comment">#如果上面store_lookup=1，这里就起作用了，这里就要指定某一个组来存储上传的文件了。（一般store_lookup=1是由于旧的组已经没有空间了，因为下面有规则设置，所以就要新添加的机器就要放到新组里面，所以再上传就要传到新组里面。）</span></div><div class="line">	store_server=0</div><div class="line">	<span class="comment"># 选择哪个storage server 进行上传操作一个文件被上传后，这个storage server就相当于这个文件的storage server源，会对同组的storage server推送这个文件达到同步效果</span></div><div class="line">	<span class="comment"># 0: 轮询方式（默认）</span></div><div class="line">	<span class="comment"># 1: 根据ip 地址进行排序选择第一个服务器（IP地址最小者）</span></div><div class="line">	<span class="comment"># 2: 根据优先级进行排序（上传优先级由storage server来设置，参数名为upload_priority），优先级值越小优先级越高。</span></div><div class="line">	store_path=0</div><div class="line">	<span class="comment">#选择文件上传到storage中的哪个(目录/挂载点),storage可以有多个存放文件的base path 0:轮训策略 2:负载均衡，选择空闲空间最大的。我们线上选择的是2，让其选择空闲空间最大的去存放。</span></div><div class="line">	download_server=0</div><div class="line">	<span class="comment"># 选择哪个 storage server 作为下载服务器。</span></div><div class="line">	<span class="comment"># 0: 轮询方式，可以下载当前文件的任一storage server</span></div><div class="line">	<span class="comment"># 1: 哪个为源storage server就用哪一个,就是之前上传到哪个storage server服务器就是哪个了</span></div><div class="line">	reserved_storage_space = 10%</div><div class="line">	<span class="comment">#系统预留空间，当一个group中的任何storage的剩余空间小于定义的值，整个group就不能上传文件了（V4开始支持百分比方式），如：10G（字节数可以是GB,MB,KB,B）或者10%。</span></div><div class="line">	log_level=info</div><div class="line">	<span class="comment">#日志信息级别</span></div><div class="line">	run_by_group=</div><div class="line">	<span class="comment">#进程以那个用户组运行，不指定默认是当前用户组</span></div><div class="line">	run_by_user=</div><div class="line">	<span class="comment">#进程以那个用户运行，不指定默认是当前用户</span></div><div class="line">	allow_hosts=*</div><div class="line">	<span class="comment"># 可以连接到此 tracker server 的ip范围，默认是允许所有（对所有类型的连接都有影响，包括客户端，storage server）</span></div><div class="line">	<span class="comment"># for example:</span></div><div class="line">	<span class="comment"># allow_hosts=10.0.1.[1-15,20]</span></div><div class="line">	<span class="comment"># allow_hosts=host[01-08,20-25].domain.com</span></div><div class="line">	<span class="comment"># allow_hosts=192.168.5.64/26</span></div><div class="line">	sync_log_buff_interval = 10</div><div class="line">	<span class="comment">#同步或刷新日志信息到硬盘的时间间隔，单位为秒。注意：tracker server的日志不是时时写硬盘的，而是先写内存。</span></div><div class="line">	check_active_interval = 120</div><div class="line">	<span class="comment">#检测storage服务器的间隔时间，storage定期主动向tracker发送心跳，如果在指定的时间没收到信号，tracker认为storage故障，默认120s</span></div><div class="line">	thread_stack_size = 64KB</div><div class="line">	<span class="comment">#线程栈的大小。FastDFS server端采用了线程方式。线程栈越大，一个线程占用的系统资源就越多。如果要启动更多的线程可以适当降低本参数值。</span></div><div class="line">	storage_ip_changed_auto_adjust = <span class="literal">true</span></div><div class="line">	<span class="comment">#这个参数控制当storage server IP地址改变时，集群是否自动调整。注：只有在storage server进程重启时才完成自动调整。</span></div><div class="line">	<span class="comment"># ===========================同步======================================</span></div><div class="line">	storage_sync_file_max_delay = 86400</div><div class="line">	<span class="comment"># V2.0引入的参数。存储服务器之间同步文件的最大延迟时间，缺省为1天。根据实际情况进行调整。</span></div><div class="line">	storage_sync_file_max_time = 300</div><div class="line">	<span class="comment"># V2.0引入的参数。存储服务器同步一个文件需要消耗的最大时间，缺省为300s，即5分钟。</span></div><div class="line">	<span class="comment"># 注：本参数并不影响文件同步过程。本参数仅在下载文件时，作为判断当前文件是否被同步完成的一个阀值。</span></div><div class="line">	<span class="comment"># ===========================trunk 和 slot============================</span></div><div class="line">	use_trunk_file = <span class="literal">false</span> </div><div class="line">	<span class="comment"># V3.0引入的参数。是否使用小文件合并存储特性，缺省是关闭的。</span></div><div class="line">	slot_min_size = 256</div><div class="line">	<span class="comment">#V3.0引入的参数。trunk file分配的最小字节数。比如文件只有16个字节，系统也会分配slot_min_size个字节。</span></div><div class="line">	slot_max_size = 16MB</div><div class="line">	<span class="comment">#V3.0引入的参数。只有文件大小&lt;=这个参数值的文件，才会合并存储。如果一个文件的大小大于这个参数值，将直接保存到一个文件中（即不采用合并存储方式）。</span></div><div class="line">	trunk_file_size = 64MB</div><div class="line">	<span class="comment">#V3.0引入的参数。合并存储的trunk file大小，至少4MB，缺省值是64MB。不建议设置得过大。</span></div><div class="line">	trunk_create_file_advance = <span class="literal">false</span></div><div class="line">	<span class="comment">#是否开启创建trunk file。只有当这个参数为true，下面3个以trunk_create_file_打头的参数才有效。默认我们开启trunk合并。</span></div><div class="line">	trunk_create_file_time_base = 02:00</div><div class="line">	<span class="comment"># 提前创建trunk file的起始时间点（基准时间），02:00表示第一次创建的时间点是凌晨2点  </span></div><div class="line">	trunk_create_file_interval = 86400</div><div class="line">	<span class="comment">#创建trunk file的时间间隔，单位为秒。如果每天只提前创建一次，则设置为86400  </span></div><div class="line">	trunk_create_file_space_threshold = 20G</div><div class="line">	<span class="comment"># 提前创建trunk file时，需要达到的空闲trunk大小，比如本参数为20G，而当前空闲trunk为4GB，那么只需要创建16GB的trunk file即可。  </span></div><div class="line">	trunk_init_check_occupying = <span class="literal">false</span></div><div class="line">	<span class="comment">#trunk初始化时，是否检查可用空间是否被占用</span></div><div class="line">	trunk_init_reload_from_binlog = <span class="literal">false</span></div><div class="line">	<span class="comment">#是否无条件从trunk binlog中加载trunk可用空间信息，FastDFS缺省是从快照文件storage_trunk.dat中加载trunk可用空间，该文件的第一行记录的是trunk binlog的offset，然后从binlog的offset开始加载</span></div><div class="line">	trunk_compress_binlog_min_interval = 0</div><div class="line">	<span class="comment">#压缩trunk binlog 的最小时间间隔，单位：秒。默认值为0，0代表不压缩。FastDFS会在trunk初始化或者被销毁的时候压缩trunk binlog文件，如果设置的话建议设置成86400，一天设置一次。</span></div><div class="line">	<span class="comment"># ===========================其他设置============================</span></div><div class="line">	use_storage_id = <span class="literal">false</span></div><div class="line">	<span class="comment">#是否使用storage id替换ip作为storage server标识，默认为false</span></div><div class="line">	storage_ids_filename = storage_ids.conf</div><div class="line">	<span class="comment">#在文件中设置组名、server ID和对应的IP地址，参见源码目录下的配置示例：storage_ids.conf</span></div><div class="line">	id_type_in_filename = ip</div><div class="line">	<span class="comment">#存储服务器的文件名中的id类型，取值如下</span></div><div class="line">	<span class="comment"># IP：存储服务器的IP地址</span></div><div class="line">	<span class="comment"># id：被存储服务器的服务器标识</span></div><div class="line">	<span class="comment"># 只有当use_storage_id设置为true时此参数是有效的，默认值是IP</span></div><div class="line">	store_slave_file_use_link = <span class="literal">false</span></div><div class="line">	<span class="comment">#存储从文件是否采用symbol link（符号链接）方式。如果设置为true，一个从文件将占用两个文件：原始文件及指向它的符号链接。</span></div><div class="line">	rotate_error_log = <span class="literal">false</span></div><div class="line">	<span class="comment">#是否定期轮转error log，目前仅支持一天轮转一次</span></div><div class="line">	error_log_rotate_time=00:00</div><div class="line">	<span class="comment">#error log定期轮转的时间点，只有当rotate_error_log设置为true时有效</span></div><div class="line">	rotate_error_log_size = 0</div><div class="line">	<span class="comment">#error log按大小轮转，设置为0表示不按文件大小轮转，否则当error log达到该大小，就会轮转到新文件中</span></div><div class="line">	log_file_keep_days = 0</div><div class="line">	<span class="comment">#保留日志文件0表示不删除旧日志文件，默认值为0</span></div><div class="line">	use_connection_pool = <span class="literal">false</span></div><div class="line">	<span class="comment">#是否使用连接池</span></div><div class="line">	connection_pool_max_idle_time = 3600</div><div class="line">	<span class="comment">#连接的空闲时间超过这个时间将被关闭，单位：秒</span></div><div class="line">	<span class="comment"># ===========================HTTP 相关=================================</span></div><div class="line">	http.server_port=8080</div><div class="line">	<span class="comment">#tracker server上的HTTP服务器端口号</span></div><div class="line">	http.check_alive_interval=30</div><div class="line">	<span class="comment"># 检查storage http server存活的间隔时间，单位为秒</span></div><div class="line">	http.check_alive_type=tcp</div><div class="line">	<span class="comment">#检查存储HTTP服务器的活动类型，值为：tcp：仅连接到具有HTTP端口的存储服务器，不要求和获取响应http：storage check alive url必须返回http状态200默认值为tcp</span></div><div class="line">	http.check_alive_uri=/status.html</div><div class="line">	<span class="comment">#检查storage http server是否alive的uri/url</span></div></pre></td></tr></table></figure>
<blockquote>
<p>上面有很大一部分提到了trunk合并，一般我们是默认不合并的，小文件就是存储到目录里面。下面两篇链接讲的比较详细和专业：<br><a href="http://blog.csdn.net/hfty290/article/details/42026215" target="_blank" rel="external">http://blog.csdn.net/hfty290/article/details/42026215</a><br><a href="http://blog.csdn.net/liuaigui/article/details/9981135" target="_blank" rel="external">http://blog.csdn.net/liuaigui/article/details/9981135</a></p>
<h3 id="storage-conf配置文件介绍"><a href="#storage-conf配置文件介绍" class="headerlink" title="storage.conf配置文件介绍"></a>storage.conf配置文件介绍</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div></pre></td><td class="code"><pre><div class="line">disabled=<span class="literal">false</span></div><div class="line"><span class="comment">#是否启用禁用配置文件，false是不启用禁用，true是启动禁用。</span></div><div class="line">group_name=group1</div><div class="line"><span class="comment">#本storage server所属组名</span></div><div class="line">bind_addr=</div><div class="line"><span class="comment">#绑定IP，默认就是监听在0.0.0.0上面</span></div><div class="line">client_bind=<span class="literal">true</span></div><div class="line"><span class="comment">#bind_addr通常是针对server的。当指定bind_addr时，本参数才有效。本storage server作为client连接其他服务器（如tracker server、其他storage server），是否绑定bind_addr。true：绑定bind_addr所指定的IP。false：绑定本机的任意IP</span></div><div class="line">port=23000</div><div class="line"><span class="comment">#storage server服务端口</span></div><div class="line">connect_timeout=30</div><div class="line"><span class="comment">#连接超时(秒)，默认值 30s</span></div><div class="line">network_timeout=60</div><div class="line"><span class="comment">#网络超时(秒)，默认值 60s</span></div><div class="line">heart_beat_interval=30</div><div class="line"><span class="comment">#心跳间隔时间，单位为秒 (这里是指主动向tracker server 发送心跳)</span></div><div class="line">stat_report_interval=60</div><div class="line"><span class="comment">#storage server向tracker server报告磁盘剩余空间的时间间隔，单位为秒。</span></div><div class="line">base_path=/home/yuqing/fastdfs</div><div class="line"><span class="comment"># base_path目录地址,根目录必须存在子目录会自动生成。注 :这里不是上传的文件存放的地址,之前是的,在某个版本后更改了</span></div><div class="line">max_connections=256</div><div class="line"><span class="comment">#最大连接数，根据需求可以调大，如设置成2048.</span></div><div class="line">buff_size = 256KB</div><div class="line"><span class="comment">#接收/发送数据的buff大小，必须大于8KB，如这里可以设置成2048KB，设置的大一点。</span></div><div class="line">accept_threads=1</div><div class="line"><span class="comment">#接收数据的线程数</span></div><div class="line">work_threads=4</div><div class="line"><span class="comment">#接收数据的线程数，可以是CPU的核数或者比CPU核数小。</span></div><div class="line">disk_rw_separated = <span class="literal">true</span></div><div class="line"><span class="comment">#磁盘IO读写是否分离，缺省是分离的。磁盘读/写分离为false则为混合读写，如果为true则为分离读写的。默认值为V2.00以后为true。</span></div><div class="line">disk_reader_threads = 1</div><div class="line"><span class="comment"># 针对单个存储路径的读线程数，缺省值为1。我们这里设置为4.</span></div><div class="line"><span class="comment"># 读写分离时，系统中的读线程数 = disk_reader_threads * store_path_count</span></div><div class="line"><span class="comment"># 读写混合时，系统中的读写线程数 = (disk_reader_threads + disk_writer_threads) * store_path_count</span></div><div class="line">disk_writer_threads = 1</div><div class="line"><span class="comment"># 针对单个存储路径的写线程数，缺省值为1。我们这里设置为4.</span></div><div class="line"><span class="comment"># 读写分离时，系统中的写线程数 = disk_writer_threads * store_path_count</span></div><div class="line"><span class="comment"># 读写混合时，系统中的读写线程数 = (disk_reader_threads + disk_writer_threads) * store_path_count</span></div><div class="line">sync_wait_msec=50</div><div class="line"><span class="comment"># 同步文件时，如果从binlog中没有读到要同步的文件，休眠N毫秒后重新读取。0表示不休眠，立即再次尝试读取。如果没特别需求，默认值50毫秒就可以了。</span></div><div class="line"><span class="comment"># 出于CPU消耗考虑，不建议设置为0。如何希望同步尽可能快一些，可以将本参数设置得小一些，比如设置为10ms</span></div><div class="line">sync_interval=0</div><div class="line"><span class="comment">#同步完一个文件后间隔多少毫秒同步下一个文件，0表示不休息直接同步</span></div><div class="line">sync_start_time=00:00</div><div class="line">sync_end_time=23:59</div><div class="line"><span class="comment">#上面两段表示这段时间内同步文件，也就是说全天都在同步数据。第一条是开始时间段，第二条是结束时间段。</span></div><div class="line">write_mark_file_freq=500</div><div class="line"><span class="comment">#同步完多少文件后写mark标记，什么是mak标记等下面搭建的时候会文件举例。</span></div><div class="line">store_path_count=1</div><div class="line"><span class="comment">#storage在存储文件时支持多路径，默认只设置一个，通俗的将也就是你要挂载几个存储盘，你这里就设置对应的磁盘数，比如12块盘当store，这里就设置为12.</span></div><div class="line">store_path0=/home/yuqing/fastdfs</div><div class="line"><span class="comment">#逐一配置store_path个路径，索引号基于0。注意配置方法后面有0,1,2 ......，需要配置0到store_path - 1。如果不配置base_path0，那边它就和base_path对应的路径一样。</span></div><div class="line"><span class="comment">#如下面的配置（这里是两块盘，所以store_path_count=2）：</span></div><div class="line"><span class="comment">#store_path0=/data01/fastdfs </span></div><div class="line"><span class="comment">#store_path1=/data02/fastdfs </span></div><div class="line">subdir_count_per_path=256</div><div class="line"><span class="comment"># FastDFS存储文件时，采用了两级目录。如果本参数只为N（如：256），那么storage server在初次运行时，会自动创建 N * N 个存放文件的子目录。</span></div><div class="line">tracker_server=192.168.209.121:22122</div><div class="line"><span class="comment">#tracker_server 的列表要写端口(是主动连接tracker_server)有多个tracker server时，每个tracker server写一行，如下面：</span></div><div class="line"><span class="comment">#192.168.1.103:22122</span></div><div class="line"><span class="comment">#192.168.1.104:22122</span></div><div class="line">log_level=info</div><div class="line"><span class="comment">#日志级别,我们这里设置为了warn。</span></div><div class="line">run_by_group=</div><div class="line"><span class="comment">#指定运行该程序的用户组，不设置就默认为当前启动程序的用户组。</span></div><div class="line">run_by_user=</div><div class="line"><span class="comment">#指定运行该程序的用户，不设置就默认为当前启动程序的用户。</span></div><div class="line">allow_hosts=*</div><div class="line"><span class="comment">#默认是允许所有主机连接</span></div><div class="line">file_distribute_path_mode=0</div><div class="line"><span class="comment"># 0: 轮流存放，在一个目录下存储设置的文件数后（参数file_distribute_rotate_count中设置文件数），使用下一个目录进行存储。</span></div><div class="line"><span class="comment"># 1: 随机存储，根据文件名对应的hash code来分散存储。</span></div><div class="line">file_distribute_rotate_count=100</div><div class="line"><span class="comment"># 当上面的参数file_distribute_path_mode配置为0（轮流存放方式）时，本参数有效。</span></div><div class="line"><span class="comment"># 当一个目录下的文件存放的文件数达到本参数值时，后续上传的文件存储到下一个目录中。</span></div><div class="line">fsync_after_written_bytes=0</div><div class="line"><span class="comment">#写大文件时调用fsync到磁盘，0：永远不要调用fsync。other：写多少字节后开始同步，当写入字节&gt; =这个字节时调用fsync。默认值为0（从不调用fsync）</span></div><div class="line">sync_log_buff_interval=10</div><div class="line"><span class="comment"># 同步或刷新日志信息到硬盘的时间间隔，单位为秒。注意：storage server 的日志信息不是时时写硬盘的，而是先写内存。</span></div><div class="line">sync_binlog_buff_interval=10</div><div class="line"><span class="comment">#同步binglog（更新操作日志）到硬盘的时间间隔，单位为秒。本参数会影响新上传文件同步延迟时间</span></div><div class="line">sync_stat_file_interval=300</div><div class="line"><span class="comment"># 把storage的stat文件同步到磁盘的时间间隔，单位为秒。注：如果stat文件内容没有变化，不会进行同步</span></div><div class="line">thread_stack_size=512KB</div><div class="line"><span class="comment"># 线程栈的大小。FastDFS server端采用了线程方式。应该大于等于512KB。</span></div><div class="line">upload_priority=10</div><div class="line"><span class="comment">#本storage server作为源服务器，上传文件的优先级，可以为负数。值越小，优先级越高。里就和 tracker.conf 中store_server= 2时的配置相对应了。</span></div><div class="line">if_alias_prefix=</div><div class="line"><span class="comment">#网卡别名，用ifconfig -a可以看到很多本机的网卡别名，类似eth0,eth0:0等等。多个网卡别名使用逗号分割，默认为空，让系统自动选择。</span></div><div class="line">check_file_duplicate=0</div><div class="line"><span class="comment"># 是否检测上传文件已经存在。如果已经存在，则不存文件内容，建立一个符号链接以节省磁盘空间。 这个应用要配合FastDHT 使用，所以打开前要先安装FastDHT。1或yes 是检测，0或no 是不检测</span></div><div class="line">file_signature_method=<span class="built_in">hash</span></div><div class="line"><span class="comment">#文件签名方法用于检查文件重复，hash：四个32位哈希码。md5：MD5签名。默认值是V4.01之后的哈希</span></div><div class="line">key_namespace=FastDFS</div><div class="line"><span class="comment">#当参数check_file_duplicate设定为1 或 yes时(true/on也是可以的)，在FastDHT中的命名空间。</span></div><div class="line">keep_alive=0</div><div class="line"><span class="comment"># 与FastDHT servers 的连接方式 (是否为持久连接) ，默认是0（短连接方式）。可以考虑使用长连接，这要看FastDHT server的连接数是否够用。</span></div><div class="line">use_access_log = <span class="literal">false</span></div><div class="line"><span class="comment">#是否记录访问日志</span></div><div class="line">rotate_access_log = <span class="literal">false</span></div><div class="line"><span class="comment"># 是否定期轮转access log，目前仅支持一天轮转一次</span></div><div class="line">access_log_rotate_time=00:00</div><div class="line"><span class="comment"># access log定期轮转的时间点，只有当rotate_access_log设置为true时有效</span></div><div class="line">rotate_error_log = <span class="literal">false</span></div><div class="line"><span class="comment">#是否定期轮转error log，目前仅支持一天轮转一次</span></div><div class="line">error_log_rotate_time=00:00</div><div class="line"><span class="comment"># error log定期轮转的时间点，只有当rotate_error_log设置为true时有效</span></div><div class="line">rotate_access_log_size = 0</div><div class="line"><span class="comment"># access log按文件大小轮转，设置为0表示不按文件大小轮转，否则当access log达到该大小，就会轮转到新文件中</span></div><div class="line">rotate_error_log_size = 0</div><div class="line"><span class="comment"># error log按文件大小轮转，设置为0表示不按文件大小轮转，否则当error log达到该大小，就会轮转到新文件中</span></div><div class="line">log_file_keep_days = 0</div><div class="line"><span class="comment">#保留日志文件的日期0表示不删除旧的日志文件</span></div><div class="line">file_sync_skip_invalid_record=<span class="literal">false</span></div><div class="line"><span class="comment">#文件同步的时候，是否忽略无效的binlog记录</span></div><div class="line">use_connection_pool = <span class="literal">false</span></div><div class="line"><span class="comment"># 是否使用连接池</span></div><div class="line">connection_pool_max_idle_time = 3600</div><div class="line"><span class="comment"># 连接的空闲时间超过这个时间将被关闭，单位：秒</span></div><div class="line">http.domain_name=</div><div class="line"><span class="comment">#如果domain_name为空，请使用此存储服务器的IP地址，否则此域名将在由跟踪服务器重定向的URL中出现</span></div><div class="line">http.server_port=8888</div><div class="line"><span class="comment">#该存储服务器上的Web服务器的端口</span></div></pre></td></tr></table></figure>
</blockquote>
<h3 id="client-conf配置文件介绍"><a href="#client-conf配置文件介绍" class="headerlink" title="client.conf配置文件介绍"></a>client.conf配置文件介绍</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line">connect_timeout=30</div><div class="line"><span class="comment">#连接的超时时间</span></div><div class="line">network_timeout=60</div><div class="line"><span class="comment">#网络超时(秒)，默认值 60s</span></div><div class="line">base_path=/home/yuqing/fastdfs</div><div class="line"><span class="comment">#存储日志文件的基本路径，如/opt/fastdfs</span></div><div class="line">tracker_server=192.168.0.197:22122</div><div class="line"><span class="comment">#tracker server的列表，多个的话就是多行，如：</span></div><div class="line"><span class="comment">#192.168.1.103:22122</span></div><div class="line"><span class="comment">#192.168.1.104:22122</span></div><div class="line">log_level=info</div><div class="line"><span class="comment">#日志级别</span></div><div class="line">use_connection_pool = <span class="literal">false</span></div><div class="line"><span class="comment">#是否使用连接池</span></div><div class="line">connection_pool_max_idle_time = 3600</div><div class="line"><span class="comment">#连接的空闲时间超过这个时间将被关闭，单位：秒</span></div><div class="line">load_fdfs_parameters_from_tracker=<span class="literal">false</span></div><div class="line"><span class="comment">#是否加载来自跟踪服务器的FastDFS参数，默认值为false。这里可以设置为true。</span></div><div class="line">use_storage_id = <span class="literal">false</span></div><div class="line"><span class="comment">#是否使用storage id替换ip作为storage server标识，默认为false</span></div><div class="line">storage_ids_filename = storage_ids.conf</div><div class="line"><span class="comment">#在文件中设置组名、server ID和对应的IP地址，参见源码目录下的配置示例：storage_ids.conf</span></div><div class="line">http.tracker_server_port=80</div><div class="line"><span class="comment">#HTTP设置，tracker server上的HTTP服务器端口号</span></div></pre></td></tr></table></figure>
<h3 id="配置启动Tracker"><a href="#配置启动Tracker" class="headerlink" title="配置启动Tracker"></a>配置启动Tracker</h3><p>首先创建数据目录，并修改tracker.conf配置文件<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">mkdir  /data/fastdfs/tracker</div></pre></td></tr></table></figure></p>
<p>修改配置文件<br><code>vim /etc/fdfs/tracker.conf</code><br><img src="http://oy09glbzm.bkt.clouddn.com/17-12-27/80552480.jpg?imageView2/0/q/100|watermark/2/text/d2FucWhibG9nLnRvcA==/font/5a6L5L2T/fontsize/500/fill/I0VGRUZFRg==/dissolve/100/gravity/SouthEast/dx/10/dy/10" alt=""><br>启动tracker<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">cd /usr/bin/</div><div class="line"></div><div class="line">fdfs_trackerd /etc/fdfs/tracker.conf restart</div></pre></td></tr></table></figure></p>
<p>查看启动结果，tracker的默认端口为 22122<br><img src="http://oy09glbzm.bkt.clouddn.com/17-12-27/15145051.jpg" alt=""></p>
<h3 id="配置启动storage"><a href="#配置启动storage" class="headerlink" title="配置启动storage"></a>配置启动storage</h3><p>按照前面的介绍，storage应该安装在其他服务器节点上，并且可以添加多个groups。这里为了方便，直接跟Tracker在同一台服务器，并且就不安装多个了。<br>修storage.conf配置文件<br><img src="http://oy09glbzm.bkt.clouddn.com/17-12-27/63365541.jpg" alt=""><br><img src="http://oy09glbzm.bkt.clouddn.com/17-12-27/12855148.jpg" alt=""><br>启动stroge<br><img src="http://oy09glbzm.bkt.clouddn.com/17-12-27/58576437.jpg" alt=""></p>
<h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><p>直接下载官方的测试demo：<a href="https://github.com/happyfish100/fastdfs-client-java" target="_blank" rel="external">https://github.com/happyfish100/fastdfs-client-java</a><br>这里使用idea运行项目，新建fastDFS.conf<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">connect_timeout = <span class="number">2</span></div><div class="line">network_timeout = <span class="number">20</span></div><div class="line">#tracker服务器地址，如果有多个tracker可以配置多个tracker_server</div><div class="line">tracker_server=<span class="number">192.168</span>.18.129:<span class="number">22122</span></div></pre></td></tr></table></figure></p>
<p>需要运行的类，先添加两个参数：一个是配置文件，一个是要上传文件。<br><img src="http://oy09glbzm.bkt.clouddn.com/17-12-27/33260434.jpg?imageView2/0/q/100|watermark/2/text/d2FucWhibG9nLnRvcA==/font/5a6L5L2T/fontsize/500/fill/I0VGRUZFRg==/dissolve/100/gravity/SouthEast/dx/10/dy/10" alt=""></p>
<p><img src="http://oy09glbzm.bkt.clouddn.com/17-12-27/87962066.jpg?imageView2/0/q/100|watermark/2/text/d2FucWhibG9nLnRvcA==/font/5a6L5L2T/fontsize/500/fill/I0VGRUZFRg==/dissolve/100/gravity/SouthEast/dx/10/dy/10" alt=""></p>
<p><img src="http://oy09glbzm.bkt.clouddn.com/17-12-27/22721002.jpg?imageView2/0/q/100|watermark/2/text/d2FucWhibG9nLnRvcA==/font/5a6L5L2T/fontsize/500/fill/I0VGRUZFRg==/dissolve/100/gravity/SouthEast/dx/10/dy/10" alt=""><br>点击运行即可，运行结果</p>
<h2 id=""><a href="#" class="headerlink" title=""></a><img src="http://oy09glbzm.bkt.clouddn.com/17-12-27/58813378.jpg?imageView2/0/q/100|watermark/2/text/d2FucWhibG9nLnRvcA==/font/5a6L5L2T/fontsize/500/fill/I0VGRUZFRg==/dissolve/100/gravity/SouthEast/dx/10/dy/10" alt=""></h2><p>参考:</p>
<ul>
<li><a href="http://www.51niux.com/?id=137" target="_blank" rel="external">FastDFS之基础知识</a></li>
<li><a href="https://www.jianshu.com/p/1c71ae024e5e" target="_blank" rel="external">FASTDFS</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;FastDFS是由淘宝的余庆先生所开发，是一个轻量级、高性能的开源分布式文件系统，用纯C语言开发，包括文件存储、文件同步、文件访问（上传、下载）、存取负载均衡、在线扩容、相同内容只存储一份等功能，适合有大容量存储需求的应用或系统。做分布式系统开发时，其中要解决的一个问题就是图片、音视频、文件共享的问题，分布式文件系统正好可以解决这个需求。同类的分布式文件系统有谷歌的GFS、HDFS（Hadoop）、TFS（淘宝）等。
    
    </summary>
    
      <category term="FastDFS" scheme="http://www.wanqhblog.top/categories/FastDFS/"/>
    
    
      <category term="分布式文件系统" scheme="http://www.wanqhblog.top/tags/%E5%88%86%E5%B8%83%E5%BC%8F%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F/"/>
    
  </entry>
  
  <entry>
    <title>SpringBoot使用Redis做缓存</title>
    <link href="http://www.wanqhblog.top/2017/12/26/SpringBoot%E4%BD%BF%E7%94%A8Redis%E5%81%9A%E7%BC%93%E5%AD%98/"/>
    <id>http://www.wanqhblog.top/2017/12/26/SpringBoot使用Redis做缓存/</id>
    <published>2017-12-26T15:26:40.000Z</published>
    <updated>2017-12-27T03:30:02.132Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>随着时间的积累，应用的使用用户不断增加，数据规模也越来越大，往往数据库查询操作会成为影响用户使用体验的瓶颈，此时使用缓存往往是解决这一问题非常好的手段之一。Spring 3开始提供了强大的基于注解的缓存支持，可以通过注解配置方式低侵入的给原有Spring应用增加缓存功能，提高数据访问性能。<br>在Spring Boot中对于缓存的支持，提供了一系列的自动化配置，使我们可以非常方便的使用缓存。<br><a id="more"></a></p>
</blockquote>
<h2 id="缓存工具简单比较"><a href="#缓存工具简单比较" class="headerlink" title="缓存工具简单比较"></a>缓存工具简单比较</h2><p>实现缓存有多种方式：EhCache、MemCached、Redis等</p>
<ol>
<li>EhCache：纯Java进程内缓存框架，配置简单、结构清晰、功能强大。开始接触javaweb的时候，不管是使用hibernate还是mybatis，这个应该是最常见的缓存的工具；经常会用作二级缓存。百度百科上的特点：</li>
</ol>
<p><img src="http://oy09glbzm.bkt.clouddn.com/17-12-26/79766332.jpg" alt=""></p>
<ol>
<li>MemCached：一个自由开源的，高性能的分布式对象缓存；使用key-value存储系统。特点：    <ul>
<li>协议简单</li>
<li>基于libevent的事件处理</li>
<li>内置内存存储方式</li>
<li>memcached不互相通信的分布式</li>
</ul>
</li>
<li>Redis：NoSql数据库，不仅仅支持k/v存储，同时还提供list、set、hash的数据结构的存储。具体学习材料可以进官网，传送门：<a href="http://www.redis.cn/" target="_blank" rel="external">http://www.redis.cn/</a><h2 id="Redis缓存介绍"><a href="#Redis缓存介绍" class="headerlink" title="Redis缓存介绍"></a>Redis缓存介绍</h2>本文的项目主要是SpringBoot+mybatis+redis+mysql。使用redis做缓存可以有几种实现方式：</li>
<li>直接将redis作为mybatis的二级缓存；</li>
<li>通过注解方式给项目添加缓存；</li>
<li>手动调用jedis。这种方式不推荐。。。<h2 id="环境的搭建"><a href="#环境的搭建" class="headerlink" title="环境的搭建"></a>环境的搭建</h2>在SpringBoot中已经有对于缓存的支持，只需要做简单的配置添加即可。<br>pom.xml文件<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"> <span class="comment">&lt;!--redis--&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-data-redis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line"><span class="comment">&lt;!--缓存--&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-cache<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div></pre></td></tr></table></figure>
</li>
</ol>
<p>添加redis的配置,这列使用的是yml的配置<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"># redis配置</div><div class="line">  redis:</div><div class="line">    #数据库索引，默认为0</div><div class="line">    database: <span class="number">0</span></div><div class="line">    #服务器地址</div><div class="line">    host: localhost</div><div class="line">    #端口</div><div class="line">    port: <span class="number">6379</span></div><div class="line">    #密码（默认为空）</div><div class="line">    password:</div><div class="line">    pool:</div><div class="line">      #连接池最大连接数（使用负值表示没有限制）</div><div class="line">      max-active: <span class="number">8</span></div><div class="line">      #连接池最大阻塞等待时间（使用负值表示没有限制）</div><div class="line">      max-wait: -<span class="number">1</span></div><div class="line">      # 连接池中的最大空闲连接</div><div class="line">      max-idle: <span class="number">8</span></div><div class="line">      # 连接池中的最小空闲连接</div><div class="line">      min-idle: <span class="number">0</span></div><div class="line">    # 连接超时时间（毫秒）</div><div class="line">    timeout: <span class="number">5000</span></div></pre></td></tr></table></figure></p>
<h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><h3 id="使用注解配置缓存"><a href="#使用注解配置缓存" class="headerlink" title="使用注解配置缓存"></a>使用注解配置缓存</h3><p>这种方式比较简单，在相应的service中添加Cache注解就可以，项目代码，mybatis的配置文件以及mapper文件省略，<br>test实体类：这里使用了lombok的<code>@Data</code>注解<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Data</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> <span class="keyword">implements</span> <span class="title">Serializable</span></span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> String id;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> String name;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> String remake;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>service类：这里的注解使用就是在service类中使用<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Service</span></div><div class="line"><span class="meta">@CacheConfig</span>(cacheNames = <span class="string">"test"</span>)</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestService</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="meta">@Autowired</span></div><div class="line">    <span class="keyword">private</span> TestMapper testMapper;</div><div class="line"></div><div class="line">    <span class="meta">@Cacheable</span>(key = <span class="string">"#p0"</span>)</div><div class="line">    <span class="function"><span class="keyword">public</span> Test <span class="title">get</span><span class="params">(String id)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> testMapper.get(id);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@CachePut</span>(key = <span class="string">"#p0.id"</span>)</div><div class="line">    <span class="function"><span class="keyword">public</span> Test <span class="title">insert</span><span class="params">(Test test)</span> </span>&#123;</div><div class="line">        testMapper.insert(test);</div><div class="line">        <span class="keyword">return</span> test;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@CachePut</span>(key = <span class="string">"#p0.id"</span>)</div><div class="line">    <span class="function"><span class="keyword">public</span> Test <span class="title">update</span><span class="params">(Test test)</span> </span>&#123;</div><div class="line">        testMapper.update(test);</div><div class="line">        <span class="keyword">return</span> test;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>测试类：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@RunWith</span>(SpringRunner.class)</div><div class="line"><span class="meta">@SpringBootTest</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestServiceTest</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Logger logger = LoggerFactory.getLogger(TestServiceTest.class);</div><div class="line">    <span class="meta">@Autowired</span></div><div class="line">    <span class="keyword">private</span> TestService testService;</div><div class="line"></div><div class="line">    <span class="meta">@Test</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">get</span><span class="params">()</span> </span>&#123;</div><div class="line">        com.wqh.blog.domain.Test test = testService.get(<span class="string">"d8e875c8-9425-485b-9665-f5dda1e788bf"</span>);</div><div class="line">        logger.info(<span class="string">"======"</span>+test+<span class="string">"============="</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Test</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">insert</span><span class="params">()</span> </span>&#123;</div><div class="line">        com.wqh.blog.domain.Test test = <span class="keyword">new</span> com.wqh.blog.domain.Test();</div><div class="line">        test.setId(UUID.randomUUID().toString());</div><div class="line">        test.setName(<span class="string">"redis"</span>);</div><div class="line">        test.setRemake(<span class="string">"hhhhhhhhhhhhhhhhhhhhhhh"</span>);</div><div class="line">        testService.insert(test);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Test</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">update</span><span class="params">()</span> </span>&#123;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>首先运行，插入方法，然后使用RedisClient查看，可以发现已经有数据。然后调用get方法，控制台并没有打印sql语句，配置成功<br><img src="http://oy09glbzm.bkt.clouddn.com/17-12-26/36759880.jpg" alt=""></p>
<h4 id="Cache注解"><a href="#Cache注解" class="headerlink" title="Cache注解"></a>Cache注解</h4><p>这里直接引用程序员DD大神博客的内容：</p>
<ul>
<li><font color="red">@CacheConfig：</font>主要用于配置该类中会用到的一些共用的缓存配置。在这里@CacheConfig(cacheNames = “test”)：配置了该数据访问对象中返回的内容将存储于名为test的缓存对象中，我们也可以不使用该注解，直接通过@Cacheable自己配置缓存集的名字来定义。</li>
<li><font color="red">@Cacheable：</font>配置了get函数的返回值将被加入缓存。同时在查询时，会先从缓存中获取，若不存在才再发起对数据库的访问。该注解主要有下面几个参数：        <ul>
<li><font color="red">value、cacheNames：</font>两个等同的参数（cacheNames为Spring 4新增，作为value的别名），用于指定缓存存储的集合名。由于Spring 4中新增了@CacheConfig，因此在Spring 3中原本必须有的value属性，也成为非必需项了</li>
<li><font color="red">key：</font>缓存对象存储在Map集合中的key值，非必需，缺省按照函数的所有参数组合作为key值，若自己配置需使用SpEL表达式，比如：@Cacheable(key = “#p0”)：使用函数第一个参数作为缓存的key值，更多关于SpEL表达式的详细内容可参考官方文档</li>
<li><font color="red">condition：</font>缓存对象的条件，非必需，也需使用SpEL表达式，只有满足表达式条件的内容才会被缓存，比如：@Cacheable(key = “#p0”, condition = “#p0.length() &lt; 3”)，表示只有当第一个参数的长度小于3的时候才会被缓存，若做此配置上面的AAA用户就不会被缓存，读者可自行实验尝试。</li>
<li><font color="red">unless：</font>另外一个缓存条件参数，非必需，需使用SpEL表达式。它不同于condition参数的地方在于它的判断时机，该条件是在函数被调用之后才做判断的，所以它可以通过对result进行判断。</li>
<li><font color="red">keyGenerator：</font>用于指定key生成器，非必需。若需要指定一个自定义的key生成器，我们需要去实现org.springframework.cache.interceptor.KeyGenerator接口，并使用该参数来指定。需要注意的是：该参数与key是互斥的</li>
<li><font color="red">cacheManager：</font>用于指定使用哪个缓存管理器，非必需。只有当有多个时才需要使用</li>
<li><font color="red">cacheResolver：</font>用于指定使用那个缓存解析器，非必需。需通过org.springframework.cache.interceptor.CacheResolver接口来实现自己的缓存解析器，并用该参数指定。</li>
</ul>
</li>
<li><font color="red">@CachePut：</font>配置于函数上，能够根据参数定义条件来进行缓存，它与@Cacheable不同的是，它每次都会真是调用函数，所以主要用于数据新增和修改操作上。它的参数与@Cacheable类似，具体功能可参考上面对@Cacheable参数的解析</li>
<li><font color="red">@CacheEvict：</font>配置于函数上，通常用在删除方法上，用来从缓存中移除相应数据。除了同@Cacheable一样的参数之外，它还有下面两个参数：<ul>
<li><font color="red">allEntries：</font>非必需，默认为false。当为true时，会移除所有数据</li>
<li><font color="red">beforeInvocation：</font>非必需，默认为false，会在调用方法之后移除数据。当为true时，会在调用方法之前移除数据。</li>
</ul>
</li>
</ul>
<h3 id="使用redis做mybatis的二级缓存"><a href="#使用redis做mybatis的二级缓存" class="headerlink" title="使用redis做mybatis的二级缓存"></a>使用redis做mybatis的二级缓存</h3><p>在mybatis中有一级缓存、二级缓存</p>
<ol>
<li>一级缓存：该缓存是基于SqlSession的，mybatis默认开启一级缓存。</li>
<li>二级缓存：该缓存是Mapper级别的，默认没有开启二级缓存，需要在配置文件中开启：<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">&lt;!-- 开启二级缓存，默认是<span class="keyword">false</span> --&gt;</div><div class="line">&lt;setting name=<span class="string">"cacheEnabled"</span> value=<span class="string">"true"</span>/&gt;</div></pre></td></tr></table></figure>
</li>
</ol>
<p>依赖跟前面一样，使用redis做二级缓存，主要是要实现<code>org.apache.ibatis.cache</code>包下的<code>Cache</code>接口<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RedisCache</span> <span class="keyword">implements</span> <span class="title">Cache</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Logger logger = LoggerFactory.getLogger(RedisCache.class);</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="keyword">final</span> ReadWriteLock readWriteLock = <span class="keyword">new</span> ReentrantReadWriteLock();</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String id;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> RedisTemplate redisTemplate;</div><div class="line">    <span class="comment">/**</span></div><div class="line"><span class="comment">     *    redis过期时间</span></div><div class="line"><span class="comment">     */</span></div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> EXPIRE_TIME_IN_MINUTES = <span class="number">300</span>;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">RedisCache</span><span class="params">(String id)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (id == <span class="keyword">null</span>) &#123;</div><div class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"Cache instances require an ID"</span>);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">this</span>.id = id;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getId</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> id;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line"><span class="comment">     * Put query result to redis</span></div><div class="line"><span class="comment">     * TimeUnit.HOURS 设置时间的类型：时、分、秒、毫秒</span></div><div class="line"><span class="comment">     * <span class="doctag">@param</span> key</span></div><div class="line"><span class="comment">     * <span class="doctag">@param</span> value</span></div><div class="line"><span class="comment">     */</span></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">putObject</span><span class="params">(Object key, Object value)</span> </span>&#123;</div><div class="line">        RedisTemplate redisTemplate = getRedisTemplate();</div><div class="line">        ValueOperations opsForValue = redisTemplate.opsForValue();</div><div class="line">        opsForValue.set(key, value, EXPIRE_TIME_IN_MINUTES, TimeUnit.HOURS);</div><div class="line">        logger.debug(<span class="string">"Put query result to redis"</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line"><span class="comment">     * Get cached query result from redis</span></div><div class="line"><span class="comment">     *</span></div><div class="line"><span class="comment">     * <span class="doctag">@param</span> key</span></div><div class="line"><span class="comment">     * <span class="doctag">@return</span></span></div><div class="line"><span class="comment">     */</span></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">getObject</span><span class="params">(Object key)</span> </span>&#123;</div><div class="line">        RedisTemplate redisTemplate = getRedisTemplate();</div><div class="line">        ValueOperations opsForValue = redisTemplate.opsForValue();</div><div class="line">        logger.debug(<span class="string">"Get cached query result from redis"</span>);</div><div class="line">        Object o = opsForValue.get(key);</div><div class="line">        <span class="keyword">return</span> o;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line"><span class="comment">     * Remove cached query result from redis</span></div><div class="line"><span class="comment">     *</span></div><div class="line"><span class="comment">     * <span class="doctag">@param</span> key</span></div><div class="line"><span class="comment">     * <span class="doctag">@return</span></span></div><div class="line"><span class="comment">     */</span></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="meta">@SuppressWarnings</span>(<span class="string">"unchecked"</span>)</div><div class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">removeObject</span><span class="params">(Object key)</span> </span>&#123;</div><div class="line">        RedisTemplate redisTemplate = getRedisTemplate();</div><div class="line">        redisTemplate.delete(key);</div><div class="line">        logger.debug(<span class="string">"Remove cached query result from redis"</span>);</div><div class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line"><span class="comment">     * Clears this cache instance</span></div><div class="line"><span class="comment">     */</span></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">clear</span><span class="params">()</span> </span>&#123;</div><div class="line">        RedisTemplate redisTemplate = getRedisTemplate();</div><div class="line">        redisTemplate.execute((RedisCallback) connection -&gt; &#123;</div><div class="line">            connection.flushDb();</div><div class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">        &#125;);</div><div class="line">        logger.debug(<span class="string">"Clear all the cached query result from redis"</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line"><span class="comment">     * This method is not used</span></div><div class="line"><span class="comment">     *</span></div><div class="line"><span class="comment">     * <span class="doctag">@return</span></span></div><div class="line"><span class="comment">     */</span></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getSize</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> ReadWriteLock <span class="title">getReadWriteLock</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> readWriteLock;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> RedisTemplate <span class="title">getRedisTemplate</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (redisTemplate == <span class="keyword">null</span>) &#123;</div><div class="line">            redisTemplate = SpringContextHolder.getBean(<span class="string">"cacheRedisTemplate"</span>);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> redisTemplate;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>自定义一个序列化接口<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RedisObjectSerializer</span> <span class="keyword">implements</span> <span class="title">RedisSerializer</span>&lt;<span class="title">Object</span>&gt; </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> Converter&lt;Object, <span class="keyword">byte</span>[]&gt; serializer = <span class="keyword">new</span> SerializingConverter();</div><div class="line">    <span class="keyword">private</span> Converter&lt;<span class="keyword">byte</span>[], Object&gt; deserializer = <span class="keyword">new</span> DeserializingConverter();</div><div class="line"></div><div class="line">    <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">byte</span>[] EMPTY_ARRAY = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">0</span>];</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="keyword">public</span> <span class="keyword">byte</span>[] serialize(Object object) <span class="keyword">throws</span> SerializationException &#123;</div><div class="line">        <span class="keyword">if</span> (object == <span class="keyword">null</span>) &#123;</div><div class="line">            <span class="keyword">return</span> EMPTY_ARRAY;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            <span class="keyword">return</span> serializer.convert(object);</div><div class="line">        &#125; <span class="keyword">catch</span> (Exception ex) &#123;</div><div class="line">            <span class="keyword">return</span> EMPTY_ARRAY;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">deserialize</span><span class="params">(<span class="keyword">byte</span>[] bytes)</span> <span class="keyword">throws</span> SerializationException </span>&#123;</div><div class="line">        <span class="keyword">if</span> (isEmpty(bytes)) &#123;</div><div class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            <span class="keyword">return</span> deserializer.convert(bytes);</div><div class="line">        &#125; <span class="keyword">catch</span> (Exception ex) &#123;</div><div class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> SerializationException(<span class="string">"Cannot deserialize"</span>, ex);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">isEmpty</span><span class="params">(<span class="keyword">byte</span>[] data)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> (data == <span class="keyword">null</span> || data.length == <span class="number">0</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>redis的配置类<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Configuration</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RedisConfig</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="meta">@Bean</span></div><div class="line">    <span class="function"><span class="keyword">public</span> JedisConnectionFactory <span class="title">jedisConnectionFactory</span><span class="params">()</span></span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> JedisConnectionFactory();</div><div class="line">    &#125;</div><div class="line"></div><div class="line"></div><div class="line">    <span class="meta">@Bean</span></div><div class="line">    <span class="function"><span class="keyword">public</span> RedisTemplate&lt;String,Object&gt; <span class="title">cacheRedisTemplate</span><span class="params">(RedisConnectionFactory redisConnectionFactory)</span></span>&#123;</div><div class="line">        RedisTemplate&lt;String,Object&gt; redisTemplate = <span class="keyword">new</span> RedisTemplate&lt;&gt;();</div><div class="line">        redisTemplate.setConnectionFactory(redisConnectionFactory);</div><div class="line"></div><div class="line"></div><div class="line">        Jackson2JsonRedisSerializer&lt;Object&gt; jackson2JsonRedisSerializer = <span class="keyword">new</span> Jackson2JsonRedisSerializer&lt;Object&gt;(Object.class);</div><div class="line">        ObjectMapper om = <span class="keyword">new</span> ObjectMapper();</div><div class="line">        om.setVisibility(PropertyAccessor.ALL, JsonAutoDetect.Visibility.ANY);</div><div class="line">        om.enableDefaultTyping(ObjectMapper.DefaultTyping.NON_FINAL);</div><div class="line">        jackson2JsonRedisSerializer.setObjectMapper(om);</div><div class="line"></div><div class="line">        <span class="comment">// 设置值（value）的序列化采用自定义的RedisObjectSerializer</span></div><div class="line">        redisTemplate.setValueSerializer(<span class="keyword">new</span> RedisObjectSerializer());</div><div class="line">        <span class="comment">// 设置键（key）的序列化采用jackson2JsonRedisSerializer</span></div><div class="line">        redisTemplate.setKeySerializer(jackson2JsonRedisSerializer);</div><div class="line"></div><div class="line">        redisTemplate.afterPropertiesSet();</div><div class="line">        <span class="keyword">return</span> redisTemplate;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>前面已经开启了二级缓存，现在需要修改Mapper.xml文件<br><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">&lt;!--表示开启基于redis的二级缓存--&gt;</div><div class="line">  &lt;cache type=<span class="string">"com.wqh.blog.config.cache.RedisCache"</span>&gt;</div><div class="line">      &lt;property name=<span class="string">"eviction"</span> value=<span class="string">"LRU"</span> /&gt;</div><div class="line">      &lt;property name=<span class="string">"flushInterval"</span> value=<span class="string">"6000000"</span> /&gt;</div><div class="line">      &lt;property name=<span class="string">"size"</span> value=<span class="string">"1024"</span> /&gt;</div><div class="line">      &lt;property name=<span class="string">"readOnly"</span> value=<span class="string">"false"</span> /&gt;</div><div class="line">  &lt;/cache&gt;</div></pre></td></tr></table></figure></p>
<p>另外在插入、修改和删除时需要添加<code>flushCache=&quot;true&quot;</code>。<br>缓存添加成功的话，使用RedisClient可以查看：<br><img src="http://oy09glbzm.bkt.clouddn.com/17-12-27/38131953.jpg" alt=""></p>
<h3 id="手动将数据添加到redis"><a href="#手动将数据添加到redis" class="headerlink" title="手动将数据添加到redis"></a>手动将数据添加到redis</h3><p>在上面的RedisConfig类中添加方法，比如我这里要将Test对象保存到redis:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Bean</span></div><div class="line">  <span class="function"><span class="keyword">public</span> RedisTemplate&lt;String,Test&gt; <span class="title">testRedisTemplate</span><span class="params">(RedisConnectionFactory redisConnectionFactory)</span></span>&#123;</div><div class="line">      RedisTemplate&lt;String,Test&gt; template = <span class="keyword">new</span> RedisTemplate&lt;String,Test&gt;();</div><div class="line">      template.setConnectionFactory(redisConnectionFactory);</div><div class="line">      <span class="comment">//直接使用Jedis提供的StringRedisSerializer</span></div><div class="line">      template.setKeySerializer(<span class="keyword">new</span> StringRedisSerializer());</div><div class="line"></div><div class="line">      Jackson2JsonRedisSerializer&lt;Test&gt; jackson2JsonRedisSerializer = <span class="keyword">new</span> Jackson2JsonRedisSerializer&lt;Test&gt;(Test.class);</div><div class="line">      ObjectMapper om = <span class="keyword">new</span> ObjectMapper();</div><div class="line">      om.setVisibility(PropertyAccessor.ALL, JsonAutoDetect.Visibility.ANY);</div><div class="line">      om.enableDefaultTyping(ObjectMapper.DefaultTyping.NON_FINAL);</div><div class="line">      jackson2JsonRedisSerializer.setObjectMapper(om);</div><div class="line"></div><div class="line">      <span class="comment">//使用jackson2JsonRedisSerializer序列化value</span></div><div class="line">      template.setValueSerializer(jackson2JsonRedisSerializer);</div><div class="line">      <span class="keyword">return</span> template;</div><div class="line">  &#125;</div></pre></td></tr></table></figure></p>
<p>测试类<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Autowired</span></div><div class="line"><span class="keyword">private</span> RedisTemplate&lt;String, com.wqh.blog.domain.Test&gt; testRedisTemplate;</div><div class="line"></div><div class="line"><span class="meta">@Test</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testRedis</span><span class="params">()</span> <span class="keyword">throws</span> Exception</span>&#123;</div><div class="line">	com.wqh.blog.domain.Test test = <span class="keyword">new</span> com.wqh.blog.domain.Test();</div><div class="line">	test.setId(UUID.randomUUID().toString());</div><div class="line">	test.setName(<span class="string">"redis"</span>);</div><div class="line">	test.setRemake(<span class="string">"hhhhhhhhhhhhhhhhhhhhhhh"</span>);</div><div class="line">	testRedisTemplate.opsForValue().set(test.getId(),test);</div><div class="line">	Assert.assertEquals(<span class="string">"redis"</span>,testRedisTemplate.opsForValue().get(test.getId()).getName());</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><p>前面使用注解方式添加缓存的功能，如果使用RedisClient查看数据的话，会发现数出现乱码现象，这主要是序列化问题。解决办法只要自定义一个redisTemplate的bean<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Bean</span></div><div class="line"><span class="function"><span class="keyword">public</span> RedisTemplate&lt;Object, Object&gt; <span class="title">redisTemplate</span><span class="params">()</span> </span>&#123;</div><div class="line">    RedisTemplate&lt;Object, Object&gt; redisTemplate = <span class="keyword">new</span> RedisTemplate&lt;&gt;();</div><div class="line">    redisTemplate.setConnectionFactory(jedisConnectionFactory());</div><div class="line">    <span class="comment">//key序列化方式,但是如果方法上有Long等非String类型的话，会报类型转换错误</span></div><div class="line">    <span class="comment">//Long类型不可以会出现异常信息;</span></div><div class="line">    RedisSerializer&lt;String&gt; redisSerializer = <span class="keyword">new</span> StringRedisSerializer();</div><div class="line">    redisTemplate.setKeySerializer(redisSerializer);</div><div class="line">    Jackson2JsonRedisSerializer jackson2JsonRedisSerializer = <span class="keyword">new</span> Jackson2JsonRedisSerializer(Object.class);</div><div class="line">    ObjectMapper om = <span class="keyword">new</span> ObjectMapper();</div><div class="line">    om.setVisibility(PropertyAccessor.ALL, JsonAutoDetect.Visibility.ANY);</div><div class="line">    om.enableDefaultTyping(ObjectMapper.DefaultTyping.NON_FINAL);</div><div class="line">    jackson2JsonRedisSerializer.setObjectMapper(om);</div><div class="line"></div><div class="line">    redisTemplate.setValueSerializer(jackson2JsonRedisSerializer);</div><div class="line">    redisTemplate.setHashValueSerializer(jackson2JsonRedisSerializer);</div><div class="line">    redisTemplate.afterPropertiesSet();</div><div class="line"></div><div class="line">    <span class="keyword">return</span> redisTemplate;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<hr>
<p>参考：</p>
<ul>
<li><p><a href="http://blog.didispace.com/springbootcache1/" target="_blank" rel="external">Spring Boot中的缓存支持（一）注解配置与EhCache使用</a></p>
</li>
<li><p><a href="http://blog.csdn.net/tianyaleixiaowu/article/details/70595073" target="_blank" rel="external">Springboot中使用redis，配置redis的key value生成策略</a></p>
</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;随着时间的积累，应用的使用用户不断增加，数据规模也越来越大，往往数据库查询操作会成为影响用户使用体验的瓶颈，此时使用缓存往往是解决这一问题非常好的手段之一。Spring 3开始提供了强大的基于注解的缓存支持，可以通过注解配置方式低侵入的给原有Spring应用增加缓存功能，提高数据访问性能。&lt;br&gt;在Spring Boot中对于缓存的支持，提供了一系列的自动化配置，使我们可以非常方便的使用缓存。&lt;br&gt;
    
    </summary>
    
      <category term="SpringBoot" scheme="http://www.wanqhblog.top/categories/SpringBoot/"/>
    
    
      <category term="SpringBoot" scheme="http://www.wanqhblog.top/tags/SpringBoot/"/>
    
      <category term="Redis" scheme="http://www.wanqhblog.top/tags/Redis/"/>
    
  </entry>
  
  <entry>
    <title>CentOS下Nginx的配置安装</title>
    <link href="http://www.wanqhblog.top/2017/11/25/CentOS%E4%B8%8BNginx%E7%9A%84%E9%85%8D%E7%BD%AE%E5%AE%89%E8%A3%85/"/>
    <id>http://www.wanqhblog.top/2017/11/25/CentOS下Nginx的配置安装/</id>
    <published>2017-11-25T01:15:26.000Z</published>
    <updated>2017-12-29T02:49:51.302Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>Nginx(“engine x”)是一款是由俄罗斯的程序设计师Igor Sysoev所开发高性能的 Web和 反向代理 服务器，也是一个 IMAP/POP3/SMTP 代理服务器。在高连接并发的情况下，Nginx是Apache服务器不错的替代品。<br>NGINX是一个免费的开源高性能的HTTP服务器和反向代理，以及一个IMAP / POP3代理服务器。NGINX以其高性能，稳定性，丰富的功能集，简单的配置和低资源消耗而闻名。<br>NGINX是为解决C10K问题而编写的一些服务器之一。与传统的服务器不同，NGINX不依赖线程来处理请求。相反，它使用了一个更具可扩展性的事件驱动（异步）体系结构。这种体系结构使用很小但更重要的是，在负载下可预测的内存量。即使您不希望同时处理数千个请求，您仍然可以从NGINX的高性能和小内存占用中受益。NGINX在所有方向都可以扩展：从最小的VPS一直到大型的服务器集群。<a id="more"></a></p>
<h2 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h2><p>nginx使用编译安装，所以需要确定系统已经安装编译工具以及库文件<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">yum -y install make zlib zlib-devel gcc-c++ libtool  openssl openssl-devel</div></pre></td></tr></table></figure></p>
</blockquote>
<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><h3 id="安装PCRE"><a href="#安装PCRE" class="headerlink" title="安装PCRE"></a>安装PCRE</h3><p>PCRE的作用是使nginx支持Rewrite功能。<a href="https://sourceforge.net/projects/pcre/files/" target="_blank" rel="external">https://sourceforge.net/projects/pcre/files/</a></p>
<ol>
<li><p>下载，保存目录<code>/usr/local/nginx</code></p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">[root@localhost nginx]# wget https://sourceforge.net/projects/pcre/files/pcre/8.41/pcre-8.41.tar.gz</div></pre></td></tr></table></figure>
</li>
<li><p>解压，解压之后进入目录</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">[root@localhost nginx]# tar -zvxf pcre-8.41.tar.gz </div><div class="line"></div><div class="line">[root@localhost nginx]# cd pcre-8.41/</div></pre></td></tr></table></figure>
</li>
<li><p>编译安装</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">[root@localhost pcre2-10.30]# ./configure </div><div class="line">[root@localhost pcre2-10.30]# make</div><div class="line">[root@localhost pcre2-10.30]# make install</div></pre></td></tr></table></figure>
</li>
<li><p>查看版本<br><img src="http://oy09glbzm.bkt.clouddn.com/17-12-29/3951804.jpg" alt=""></p>
<h3 id="安装nginx"><a href="#安装nginx" class="headerlink" title="安装nginx"></a>安装nginx</h3><p>如果nginx还需支持SSL则还需要安装http_ssl_module模块，这里就不介绍了。<br>下载，<a href="http://nginx.org/download/" target="_blank" rel="external">http://nginx.org/download/</a>选择对应的版本，这里使用1.9.0</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">[root@localhost nginx]# wget http://nginx.org/download/nginx-1.9.0.tar.gz</div></pre></td></tr></table></figure>
</li>
</ol>
<p>下载完成后，同样是要解压编译安装.<br><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">[root@localhost nginx]# tar -zvxf nginx-1.9.0.tar.gz </div><div class="line">[root@localhost nginx]# cd nginx-1.9.0/</div><div class="line">[root@localhost nginx-1.9.0]# ./configure --prefix=/usr/local/webserver/nginx --with-http_stub_status_module --with-pcre=/usr/local/nginx/pcre-8.41</div><div class="line">[root@localhost nginx-1.9.0]# make</div><div class="line">[root@localhost nginx-1.9.0]# make install</div></pre></td></tr></table></figure></p>
<p>查看nginx版本<br><img src="http://oy09glbzm.bkt.clouddn.com/17-12-29/14426767.jpg" alt=""><br>配置文件路径：<code>/usr/local/webserver/nginx/conf/nginx.conf</code>，使用vim编辑配置文件，添加location：</p>
<p><img src="http://oy09glbzm.bkt.clouddn.com/17-12-29/30992423.jpg?imageView2/0/q/75|watermark/2/text/d2FucWhibG9nLnRvcA==/font/5a6L5L2T/fontsize/300/fill/IzJDMUJFRQ==/dissolve/100/gravity/SouthEast/dx/10/dy/10" alt=""></p>
<h3 id="启动测试"><a href="#启动测试" class="headerlink" title="启动测试"></a>启动测试</h3><p>在测试之前先运行一个tomcat服务器，使用8080端口：<br><img src="http://oy09glbzm.bkt.clouddn.com/17-12-29/92166265.jpg?imageView2/0/q/75|watermark/2/text/d2FucWhibG9nLnRvcA==/font/5a6L5L2T/fontsize/300/fill/IzJDMUJFRQ==/dissolve/100/gravity/SouthEast/dx/10/dy/10" alt=""><br>然后启动nginx服务器：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">[root@localhost apache-tomcat-8.0.48]# /usr/local/webserver/nginx/sbin/nginx</div></pre></td></tr></table></figure></p>
<p><img src="http://oy09glbzm.bkt.clouddn.com/17-12-29/85044529.jpg?imageView2/0/q/75|watermark/2/text/d2FucWhibG9nLnRvcA==/font/5a6L5L2T/fontsize/300/fill/IzJDMUJFRQ==/dissolve/100/gravity/SouthEast/dx/10/dy/10" alt=""><br>上面我们配置了转发<code>/test</code>:</p>
<p><img src="http://oy09glbzm.bkt.clouddn.com/17-12-29/95715631.jpg?imageView2/0/q/75|watermark/2/text/d2FucWhibG9nLnRvcA==/font/5a6L5L2T/fontsize/300/fill/IzJDMUJFRQ==/dissolve/100/gravity/SouthEast/dx/10/dy/10" alt=""></p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;Nginx(“engine x”)是一款是由俄罗斯的程序设计师Igor Sysoev所开发高性能的 Web和 反向代理 服务器，也是一个 IMAP/POP3/SMTP 代理服务器。在高连接并发的情况下，Nginx是Apache服务器不错的替代品。&lt;br&gt;NGINX是一个免费的开源高性能的HTTP服务器和反向代理，以及一个IMAP / POP3代理服务器。NGINX以其高性能，稳定性，丰富的功能集，简单的配置和低资源消耗而闻名。&lt;br&gt;NGINX是为解决C10K问题而编写的一些服务器之一。与传统的服务器不同，NGINX不依赖线程来处理请求。相反，它使用了一个更具可扩展性的事件驱动（异步）体系结构。这种体系结构使用很小但更重要的是，在负载下可预测的内存量。即使您不希望同时处理数千个请求，您仍然可以从NGINX的高性能和小内存占用中受益。NGINX在所有方向都可以扩展：从最小的VPS一直到大型的服务器集群。
    
    </summary>
    
      <category term="Nginx" scheme="http://www.wanqhblog.top/categories/Nginx/"/>
    
    
      <category term="Nginx" scheme="http://www.wanqhblog.top/tags/Nginx/"/>
    
      <category term="CentOS" scheme="http://www.wanqhblog.top/tags/CentOS/"/>
    
  </entry>
  
  <entry>
    <title>SpringMVC使用websocket做消息推送</title>
    <link href="http://www.wanqhblog.top/2017/11/22/websocket/"/>
    <id>http://www.wanqhblog.top/2017/11/22/websocket/</id>
    <published>2017-11-22T12:13:57.000Z</published>
    <updated>2017-11-22T13:06:57.226Z</updated>
    
    <content type="html"><![CDATA[<h2 id="WebSocket"><a href="#WebSocket" class="headerlink" title="WebSocket"></a>WebSocket</h2><blockquote>
<p>WebSocket协议支持（在受控环境中运行不受信任的代码的）客户端与（选择加入该代码的通信的）远程主机之间进行全双工通信。用于此的安全模型是Web浏览器常用的基于原始的安全模式。 协议包括一个开放的握手以及随后的TCP层上的消息帧。 该技术的目标是为基于浏览器的、需要和服务器进行双向通信的（服务器不能依赖于打开多个HTTP连接（例如，使用XMLHttpRequest或<code>&lt;</code>iframe&gt;和长轮询））应用程序提供一种通信机制。</p>
</blockquote>
<h2 id="socket消息推送流程"><a href="#socket消息推送流程" class="headerlink" title="socket消息推送流程"></a>socket消息推送流程</h2><ol>
<li>后台创建socket服务<a id="more"></a>；</li>
<li>用户登录后与后台建立socket连接，默认使用websocket，如果浏览器不支持则使用scokjs连接；</li>
<li>建立连接后，服务端可以向用户推送信息；</li>
</ol>
<p>javaweb中，socket的实现方式有多种，这里使用Spring-webscoket的方式实现。</p>
<h2 id="demo"><a href="#demo" class="headerlink" title="demo"></a>demo</h2><h3 id="搭建环境"><a href="#搭建环境" class="headerlink" title="搭建环境"></a>搭建环境</h3><p>在SpringMVC的项目基础上，导入websocket的相关jar包。<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-websocket<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.1.9.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-messaging<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.1.9.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div></pre></td></tr></table></figure></p>
<h3 id="websocket服务端实现类"><a href="#websocket服务端实现类" class="headerlink" title="websocket服务端实现类"></a>websocket服务端实现类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="meta">@Configuration</span></div><div class="line"><span class="meta">@EnableWebMvc</span></div><div class="line"><span class="meta">@EnableWebSocket</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WebSocketConfig</span> <span class="keyword">extends</span> <span class="title">WebMvcConfigurerAdapter</span> <span class="keyword">implements</span> <span class="title">WebSocketConfigurer</span></span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Logger logger = LoggerFactory.getLogger(WebSocketConfig.class);</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">registerWebSocketHandlers</span><span class="params">(WebSocketHandlerRegistry registry)</span> </span>&#123;</div><div class="line">        System.out.println(<span class="string">"==========================注册socket"</span>);</div><div class="line">        <span class="comment">//注册websocket server实现类，"/webSocketServer"访问websocket的地址</span></div><div class="line">        registry.addHandler(msgSocketHandle(),</div><div class="line">                <span class="string">"/webSocketServer"</span>).</div><div class="line">                addInterceptors(<span class="keyword">new</span> WebSocketHandshakeInterceptor());</div><div class="line">        <span class="comment">//使用socketjs的注册方法</span></div><div class="line">        registry.addHandler(msgSocketHandle(),</div><div class="line">                <span class="string">"/sockjs/webSocketServer"</span>).</div><div class="line">                addInterceptors(<span class="keyword">new</span> WebSocketHandshakeInterceptor())</div><div class="line">                .withSockJS();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">	 <span class="comment">/**</span></div><div class="line"><span class="comment">     *</span></div><div class="line"><span class="comment">     * <span class="doctag">@return</span> 消息发送的Bean</span></div><div class="line"><span class="comment">     */</span></div><div class="line">    <span class="meta">@Bean</span>(name = <span class="string">"msgSocketHandle"</span>)</div><div class="line">    <span class="function"><span class="keyword">public</span> WebSocketHandler <span class="title">msgSocketHandle</span><span class="params">()</span></span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> MsgScoketHandle();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这里使用的config配置的形式注册bean和配置，所以需要在SpringMVC的配置文件中添加对类的自动扫描<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">mvc:annotation-driven</span> /&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">"com.wqh.websocket"</span>/&gt;</span></div></pre></td></tr></table></figure></p>
<h3 id="拦截器类"><a href="#拦截器类" class="headerlink" title="拦截器类"></a>拦截器类</h3><p>主要是获取到当前连接的用户，并把用户保存到WebSocketSession中<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WebSocketHandshakeInterceptor</span> <span class="keyword">implements</span> <span class="title">HandshakeInterceptor</span> </span>&#123;</div><div class="line">   <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Logger logger = LoggerFactory.getLogger(WebSocketHandshakeInterceptor.class);</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line"><span class="comment">     * 握手前</span></div><div class="line"><span class="comment">     * <span class="doctag">@param</span> request</span></div><div class="line"><span class="comment">     * <span class="doctag">@param</span> response</span></div><div class="line"><span class="comment">     * <span class="doctag">@param</span> webSocketHandler</span></div><div class="line"><span class="comment">     * <span class="doctag">@param</span> attributes</span></div><div class="line"><span class="comment">     * <span class="doctag">@return</span></span></div><div class="line"><span class="comment">     * <span class="doctag">@throws</span> Exception</span></div><div class="line"><span class="comment">     */</span></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">beforeHandshake</span><span class="params">(ServerHttpRequest request, ServerHttpResponse response, WebSocketHandler webSocketHandler, Map&lt;String, Object&gt; attributes)</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">        logger.info(<span class="string">"握手操作"</span>);</div><div class="line">        <span class="keyword">if</span> (request <span class="keyword">instanceof</span> ServletServerHttpRequest)&#123;</div><div class="line">           ServletServerHttpRequest servletServerHttpRequest = (ServletServerHttpRequest) request;</div><div class="line">           HttpSession session = servletServerHttpRequest.getServletRequest().getSession(<span class="keyword">false</span>);</div><div class="line">           <span class="keyword">if</span>(session != <span class="keyword">null</span>)&#123;</div><div class="line">           		<span class="comment">//从session中获取当前用户</span></div><div class="line">               User user = (User) session.getAttribute(<span class="string">"user"</span>);</div><div class="line">               attributes.put(<span class="string">"user"</span>,user);</div><div class="line">           &#125;</div><div class="line">       &#125;</div><div class="line"></div><div class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line"><span class="comment">     * 握手后</span></div><div class="line"><span class="comment">     * <span class="doctag">@param</span> serverHttpRequest</span></div><div class="line"><span class="comment">     * <span class="doctag">@param</span> serverHttpResponse</span></div><div class="line"><span class="comment">     * <span class="doctag">@param</span> webSocketHandler</span></div><div class="line"><span class="comment">     * <span class="doctag">@param</span> e</span></div><div class="line"><span class="comment">     */</span></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">afterHandshake</span><span class="params">(ServerHttpRequest serverHttpRequest, ServerHttpResponse serverHttpResponse, WebSocketHandler webSocketHandler, Exception e)</span> </span>&#123;</div><div class="line"></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="socket处理消息类"><a href="#socket处理消息类" class="headerlink" title="socket处理消息类"></a>socket处理消息类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Component</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MsgScoketHandle</span> <span class="keyword">implements</span> <span class="title">WebSocketHandler</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="comment">/**已经连接的用户*/</span></div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> ArrayList&lt;WebSocketSession&gt; users;</div><div class="line"></div><div class="line">    <span class="keyword">static</span> &#123;</div><div class="line">    	<span class="comment">//保存当前连接用户</span></div><div class="line">        users = Lists.newArrayList();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line"><span class="comment">     * 建立链接</span></div><div class="line"><span class="comment">     * <span class="doctag">@param</span> webSocketSession</span></div><div class="line"><span class="comment">     * <span class="doctag">@throws</span> Exception</span></div><div class="line"><span class="comment">     */</span></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">afterConnectionEstablished</span><span class="params">(WebSocketSession webSocketSession)</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">        <span class="comment">//将用户信息添加到list中</span></div><div class="line">        users.add(webSocketSession);</div><div class="line">        System.out.println(<span class="string">"=====================建立连接成功=========================="</span>);</div><div class="line">        User user  = (User) webSocketSession.getAttributes().get(<span class="string">"user"</span>);</div><div class="line">        <span class="keyword">if</span>(user != <span class="keyword">null</span>)&#123;</div><div class="line">            System.out.println(<span class="string">"当前连接用户======"</span>+user.getName());</div><div class="line">        &#125;</div><div class="line">        System.out.println(<span class="string">"webSocket连接数量====="</span>+users.size());</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line"><span class="comment">     * 接收消息</span></div><div class="line"><span class="comment">     * <span class="doctag">@param</span> webSocketSession</span></div><div class="line"><span class="comment">     * <span class="doctag">@param</span> webSocketMessage</span></div><div class="line"><span class="comment">     * <span class="doctag">@throws</span> Exception</span></div><div class="line"><span class="comment">     */</span></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleMessage</span><span class="params">(WebSocketSession webSocketSession, WebSocketMessage&lt;?&gt; webSocketMessage)</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">        User user = (User) webSocketSession.getAttributes().get(<span class="string">"user"</span>);</div><div class="line">        System.out.println(<span class="string">"收到用户:"</span>+user.getName()+<span class="string">"的消息"</span>);</div><div class="line">        System.out.println(webSocketMessage.getPayload().toString());</div><div class="line">        System.out.println(<span class="string">"==========================================="</span>);</div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line"><span class="comment">     * 异常处理</span></div><div class="line"><span class="comment">     * <span class="doctag">@param</span> webSocketSession</span></div><div class="line"><span class="comment">     * <span class="doctag">@param</span> throwable</span></div><div class="line"><span class="comment">     * <span class="doctag">@throws</span> Exception</span></div><div class="line"><span class="comment">     */</span></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleTransportError</span><span class="params">(WebSocketSession webSocketSession, Throwable throwable)</span></span>&#123;</div><div class="line">        <span class="keyword">if</span> (webSocketSession.isOpen())&#123;</div><div class="line">            <span class="comment">//关闭session</span></div><div class="line">            <span class="keyword">try</span> &#123;</div><div class="line">                webSocketSession.close();</div><div class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="comment">//移除用户</span></div><div class="line">        users.remove(webSocketSession);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line"><span class="comment">     * 断开链接</span></div><div class="line"><span class="comment">     * <span class="doctag">@param</span> webSocketSession</span></div><div class="line"><span class="comment">     * <span class="doctag">@param</span> closeStatus</span></div><div class="line"><span class="comment">     * <span class="doctag">@throws</span> Exception</span></div><div class="line"><span class="comment">     */</span></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">afterConnectionClosed</span><span class="params">(WebSocketSession webSocketSession, CloseStatus closeStatus)</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">        users.remove(webSocketSession);</div><div class="line">        User user = (User) webSocketSession.getAttributes().get(<span class="string">"user"</span>);</div><div class="line">        System.out.println(user.getName()+<span class="string">"断开连接"</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">supportsPartialMessages</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line"><span class="comment">     * 发送消息给指定的用户</span></div><div class="line"><span class="comment">     * <span class="doctag">@param</span> user</span></div><div class="line"><span class="comment">     * <span class="doctag">@param</span> messageInfo</span></div><div class="line"><span class="comment">     */</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sendMessageToUser</span><span class="params">(User user, TextMessage messageInfo)</span></span>&#123;</div><div class="line">        <span class="keyword">for</span> (WebSocketSession session : users) &#123;</div><div class="line">            User sessionUser = (User) session.getAttributes().get(<span class="string">"user"</span>);</div><div class="line">            <span class="comment">//根据用户名去判断用户接收消息的用户</span></div><div class="line">            <span class="keyword">if</span>(user.getName().equals(sessionUser.getName()))&#123;</div><div class="line">                <span class="keyword">try</span> &#123;</div><div class="line">                    <span class="keyword">if</span> (session.isOpen())&#123;</div><div class="line">                        session.sendMessage(messageInfo);</div><div class="line">                        System.out.println(<span class="string">"发送消息给："</span>+user.getName()+<span class="string">"内容："</span>+messageInfo);</div><div class="line">                    &#125;</div><div class="line">                    <span class="keyword">break</span>;</div><div class="line">                &#125; <span class="keyword">catch</span> (IOException e) &#123;</div><div class="line">                    e.printStackTrace();</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="controller及页面"><a href="#controller及页面" class="headerlink" title="controller及页面"></a>controller及页面</h3><p>这里简单的模拟登录，前台传入登录参数，直接将参数保存到session中。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@RequestMapping</span>(<span class="string">"websocket"</span>)</div><div class="line"><span class="meta">@Controller</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserController</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="meta">@Autowired</span></div><div class="line">    <span class="keyword">private</span> MsgScoketHandle msgScoketHandle;</div><div class="line"></div><div class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"login"</span>)</div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">login</span><span class="params">(User user, HttpServletRequest request)</span></span>&#123;</div><div class="line">        user.setId(UUID.randomUUID().toString().replace(<span class="string">"-"</span>,<span class="string">""</span>));</div><div class="line">        request.getSession().setAttribute(<span class="string">"user"</span>,user);</div><div class="line">        <span class="keyword">return</span> <span class="string">"/index"</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@ResponseBody</span></div><div class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"sendMsg"</span>)</div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">sendMag</span><span class="params">(String content,String toUserName)</span></span>&#123;</div><div class="line">        User user = <span class="keyword">new</span> User();</div><div class="line">        user.setName(toUserName);</div><div class="line">        TextMessage textMessage = <span class="keyword">new</span> TextMessage(content);</div><div class="line">        msgScoketHandle.sendMessageToUser(user,textMessage);</div><div class="line">        <span class="keyword">return</span> <span class="string">"200"</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>登录页面省略，直接socket连接页面，这里使用<code>sockjs</code>来创建连接，所以需要先添加js文件<br><a href="https://raw.githubusercontent.com/sockjs/sockjs-client/master/dist/sockjs.min.js" target="_blank" rel="external">sockjs.min.js</a><br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></div><div class="line"><span class="undefined">    $(document).ready(function() &#123;</span></div><div class="line"><span class="undefined">        var ws;</span></div><div class="line"><span class="undefined">        if ('WebSocket' in window) &#123;</span></div><div class="line"><span class="undefined">            ws = new WebSocket("ws://"+window.location.host+"/webSocketServer");</span></div><div class="line"><span class="undefined">        &#125; else if ('MozWebSocket' in window) &#123;</span></div><div class="line"><span class="undefined">            ws = new MozWebSocket("ws://"+window.location.host+"/webSocketServer");</span></div><div class="line"><span class="undefined">        &#125; else &#123;</span></div><div class="line"><span class="undefined">            //如果是低版本的浏览器，则用SockJS这个对象，对应了后台“sockjs/webSocketServer”这个注册器，</span></div><div class="line"><span class="undefined">            //它就是用来兼容低版本浏览器的</span></div><div class="line"><span class="undefined">            ws = new SockJS("http://"+window.location.host+"/sockjs/webSocketServer");</span></div><div class="line"><span class="undefined">        &#125;</span></div><div class="line"><span class="undefined">        ws.onopen = function (evnt) &#123;</span></div><div class="line"><span class="undefined">        &#125;;</span></div><div class="line"><span class="undefined">        //接收到消息</span></div><div class="line"><span class="undefined">        ws.onmessage = function (evnt) &#123;</span></div><div class="line"><span class="undefined">            alert(evnt.data);</span></div><div class="line"><span class="undefined">            $("#msg").html(evnt.data);</span></div><div class="line"><span class="undefined">        &#125;;</span></div><div class="line"><span class="undefined">        ws.onerror = function (evnt) &#123;</span></div><div class="line"><span class="undefined">            console.log(evnt)</span></div><div class="line"><span class="undefined">        &#125;;</span></div><div class="line"><span class="undefined">        ws.onclose = function (evnt) &#123;</span></div><div class="line"><span class="undefined">        &#125;</span></div><div class="line"><span class="undefined"></span></div><div class="line"><span class="undefined">        $("#btn1").click(function () &#123;</span></div><div class="line"><span class="undefined"></span></div><div class="line"><span class="undefined">            ws.send($("#text").val());</span></div><div class="line"><span class="undefined">        &#125;);</span></div><div class="line"><span class="undefined">        $("#btn2").bind("click",function () &#123;</span></div><div class="line"><span class="undefined">            var url = "$&#123;pageContext.request.contextPath&#125;/websocket/sendMsg";</span></div><div class="line"><span class="undefined">            var content =  $("#text").val();</span></div><div class="line"><span class="undefined">            var toUserName = "admin"</span></div><div class="line"><span class="undefined">            $.ajax(&#123;</span></div><div class="line"><span class="undefined">                data: "content=" + content + "&amp;toUserName=" + toUserName,</span></div><div class="line"><span class="undefined">                type: "get",</span></div><div class="line"><span class="undefined">                dataType: 'text',</span></div><div class="line"><span class="undefined">                async: false,</span></div><div class="line"><span class="undefined">                contentType: "application/x-www-form-urlencoded;charset=UTF-8",</span></div><div class="line"><span class="undefined">                encoding: "UTF-8",</span></div><div class="line"><span class="undefined">                url: url,</span></div><div class="line"><span class="undefined">                success: function (data) &#123;</span></div><div class="line"><span class="undefined">                    alert(data.toString());</span></div><div class="line"><span class="undefined">                &#125;,</span></div><div class="line"><span class="undefined">                error: function (msg) &#123;</span></div><div class="line"><span class="undefined">                    alert(msg);</span></div><div class="line"><span class="undefined">                &#125;,</span></div><div class="line"><span class="undefined"></span></div><div class="line"><span class="undefined">            &#125;);</span></div><div class="line"><span class="undefined"></span></div><div class="line"><span class="undefined">        &#125;)</span></div><div class="line"><span class="undefined">    &#125;);</span></div><div class="line"><span class="undefined"></span></div><div class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">当前登录用户：$&#123;pageContext.session.getAttribute("user").name&#125;<span class="tag">&lt;<span class="name">br</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">id</span>=<span class="string">"text"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">"btn1"</span> <span class="attr">value</span>=<span class="string">"发送给后台"</span>&gt;</span>发送给后台<span class="tag">&lt;/<span class="name">button</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">"btn2"</span> <span class="attr">value</span>=<span class="string">"发送给其他用户"</span>&gt;</span>发送给其他用户<span class="tag">&lt;/<span class="name">button</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"msg"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure></p>
<h2 id="启动项目"><a href="#启动项目" class="headerlink" title="启动项目"></a>启动项目</h2><p>在控制可以看到socket注册成功<br><img src="http://oy09glbzm.bkt.clouddn.com/17-11-22/12127517.jpg" alt=""><br>访问页面，第一个用户使用admin登录，第二个使用1234登录<br><img src="http://oy09glbzm.bkt.clouddn.com/17-11-22/50674851.jpg" alt=""><img src="http://oy09glbzm.bkt.clouddn.com/17-11-22/16242008.jpg" alt=""><br>首先将消息发送给后台，后台打印消息<br><img src="http://oy09glbzm.bkt.clouddn.com/17-11-22/37329041.jpg" alt=""><br>使用1234用户发送消息给admin<br><img src="http://oy09glbzm.bkt.clouddn.com/17-11-22/51622418.jpg" alt=""></p>
<h2 id="爬坑"><a href="#爬坑" class="headerlink" title="爬坑"></a>爬坑</h2><p>在Springmvc项目中都会指定连接访问的后缀，比如.do、.action，但是这里会导致按照以上配置会导致前端连接socket服务时404。我的解决办法是修改web.xml，将<code>DispatcherServlet</code>的<code>&lt;url-pattern&gt;</code>改为<code>/</code>。。。但是新的问题又出现了，页面无法加载资源文件，所以还需要在SpringMVC.xml中添加对静态资源的配置，这里具体的<code>mapping</code>和<code>location</code>看自己的具体项目。<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">mvc:resources</span> <span class="attr">mapping</span>=<span class="string">"/css/**"</span> <span class="attr">location</span>=<span class="string">"/css/"</span> /&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">mvc:resources</span> <span class="attr">mapping</span>=<span class="string">"/images/**"</span> <span class="attr">location</span>=<span class="string">"/images/"</span> /&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">mvc:resources</span> <span class="attr">mapping</span>=<span class="string">"/js/**"</span> <span class="attr">location</span>=<span class="string">"/js/"</span> /&gt;</span></div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;WebSocket&quot;&gt;&lt;a href=&quot;#WebSocket&quot; class=&quot;headerlink&quot; title=&quot;WebSocket&quot;&gt;&lt;/a&gt;WebSocket&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;WebSocket协议支持（在受控环境中运行不受信任的代码的）客户端与（选择加入该代码的通信的）远程主机之间进行全双工通信。用于此的安全模型是Web浏览器常用的基于原始的安全模式。 协议包括一个开放的握手以及随后的TCP层上的消息帧。 该技术的目标是为基于浏览器的、需要和服务器进行双向通信的（服务器不能依赖于打开多个HTTP连接（例如，使用XMLHttpRequest或&lt;code&gt;&amp;lt;&lt;/code&gt;iframe&amp;gt;和长轮询））应用程序提供一种通信机制。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;socket消息推送流程&quot;&gt;&lt;a href=&quot;#socket消息推送流程&quot; class=&quot;headerlink&quot; title=&quot;socket消息推送流程&quot;&gt;&lt;/a&gt;socket消息推送流程&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;后台创建socket服务
    
    </summary>
    
      <category term="websocket" scheme="http://www.wanqhblog.top/categories/websocket/"/>
    
    
      <category term="springmvc" scheme="http://www.wanqhblog.top/tags/springmvc/"/>
    
      <category term="websocket" scheme="http://www.wanqhblog.top/tags/websocket/"/>
    
  </entry>
  
  <entry>
    <title>SpringBoot持久化层操作</title>
    <link href="http://www.wanqhblog.top/2017/10/05/SpringBoot%E6%8C%81%E4%B9%85%E5%8C%96%E5%B1%82/"/>
    <id>http://www.wanqhblog.top/2017/10/05/SpringBoot持久化层/</id>
    <published>2017-10-05T14:26:18.000Z</published>
    <updated>2017-10-06T01:35:24.670Z</updated>
    
    <content type="html"><![CDATA[<h2 id="使用Spring-Data-Jpa操作数据库"><a href="#使用Spring-Data-Jpa操作数据库" class="headerlink" title="使用Spring Data Jpa操作数据库"></a>使用Spring Data Jpa操作数据库</h2><p>要使用Spring Data Jpa必须先添加相应的依赖<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-data-jpa<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>数据库配置信息，使用yml的配置文件，个人感觉这种配置结构更清晰<a id="more"></a><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">spring:</div><div class="line">  #数据库的配置</div><div class="line">  datasource:</div><div class="line">    driver-class-name: com.mysql.jdbc.Driver</div><div class="line">    url: jdbc:mysql://127.0.0.1:3306/springbootjpa</div><div class="line">    username: root</div><div class="line">    password: 1234</div><div class="line">  #配置jpa</div><div class="line">  jpa:</div><div class="line">    hibernate:</div><div class="line">      ddl-auto: update #设置数据库的行为</div><div class="line">    show-sql: true</div></pre></td></tr></table></figure></p>
<p>添加实体类：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Entity</span><span class="comment">//数据库表的映射</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="meta">@Id</span></div><div class="line">    <span class="meta">@GeneratedValue</span><span class="comment">//设置为自增主键</span></div><div class="line">    <span class="keyword">private</span> Integer id;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> String name;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> String age;</div><div class="line">	</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="title">User</span><span class="params">()</span></span>&#123;</div><div class="line">    &#125;	</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> Integer <span class="title">getId</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> id;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setId</span><span class="params">(Integer id)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.id = id;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> name;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.name = name;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getAge</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> age;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(String age)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.age = age;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>添加完实体类之后就可以启动项目，启动项目会自动创建User表。</p>
<h3 id="CRUD操作"><a href="#CRUD操作" class="headerlink" title="CRUD操作"></a>CRUD操作</h3><p>在Spring-Data-Jpa 中提供了一种类似于声明式编程的方式，开发者只需要编写数据访问接口（称为Repository），Spring Data JPA就能基于接口中的方法命名自动地生成实现。<br>定义 UserRepository 接口，继承JpaRepository，此接口是 Spring-Data-Jpa 内部定义好的泛型接口，第一个参数实体类，第二个参数是ID。已经帮我们实现了基本的增删改查的功能，现在只要持有 UserRepository 就能操作数据表<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Repository</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserRepository</span>  <span class="keyword">extends</span> <span class="title">JpaRepository</span> </span>&#123;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h3><p>进入源码查看接口的继承结构发现 JpaRepository继承自PagingAndSortingRepository继承自CrudRepository继承自Repository。</p>
<h4 id="Repository"><a href="#Repository" class="headerlink" title="Repository"></a>Repository</h4><p> 泛型接口，第一个参数是实体类，第二个参数是实体类ID，最顶层接口，不包含任何方法，目的是为了统一所有的 Repository 的类型，且能让组件扫描的时候自动识别<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Repository</span>&lt;<span class="title">T</span>, <span class="title">ID</span> <span class="keyword">extends</span> <span class="title">Serializable</span>&gt; </span>&#123;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h4 id="CrudRepository"><a href="#CrudRepository" class="headerlink" title="CrudRepository"></a>CrudRepository</h4><p>Repository的子接口，封装数据表的 CRUD 方法。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">CrudRepository</span>&lt;<span class="title">T</span>, <span class="title">ID</span> <span class="keyword">extends</span> <span class="title">Serializable</span>&gt; <span class="keyword">extends</span> <span class="title">Repository</span>&lt;<span class="title">T</span>, <span class="title">ID</span>&gt; </span>&#123;</div><div class="line">  &lt;S extends T&gt; <span class="function">S <span class="title">save</span><span class="params">(S var1)</span></span>;<span class="comment">//存储一条数据实体</span></div><div class="line"></div><div class="line">  &lt;S extends T&gt; <span class="function">Iterable&lt;S&gt; <span class="title">save</span><span class="params">(Iterable&lt;S&gt; var1)</span></span>;<span class="comment">//批量存储数据</span></div><div class="line"></div><div class="line">  <span class="function">T <span class="title">findOne</span><span class="params">(ID var1)</span></span>;<span class="comment">//根据id查询一条数据实体</span></div><div class="line"></div><div class="line">  <span class="function"><span class="keyword">boolean</span> <span class="title">exists</span><span class="params">(ID var1)</span></span>;<span class="comment">//判断指定id是否存在</span></div><div class="line"></div><div class="line">  <span class="function">Iterable&lt;T&gt; <span class="title">findAll</span><span class="params">()</span></span>;<span class="comment">//查询所有的数据</span></div><div class="line"></div><div class="line">  <span class="function">Iterable&lt;T&gt; <span class="title">findAll</span><span class="params">(Iterable&lt;ID&gt; var1)</span></span>;<span class="comment">//根据一组id批量查询实体</span></div><div class="line"></div><div class="line">  <span class="function"><span class="keyword">long</span> <span class="title">count</span><span class="params">()</span></span>;<span class="comment">//返回数据的条数</span></div><div class="line"></div><div class="line">  <span class="function"><span class="keyword">void</span> <span class="title">delete</span><span class="params">(ID var1)</span></span>;<span class="comment">//根据id删除数据</span></div><div class="line"></div><div class="line">  <span class="function"><span class="keyword">void</span> <span class="title">delete</span><span class="params">(T var1)</span></span>;<span class="comment">//删除数据</span></div><div class="line"></div><div class="line">  <span class="function"><span class="keyword">void</span> <span class="title">delete</span><span class="params">(Iterable&lt;? extends T&gt; var1)</span></span>;<span class="comment">//批量删除数据</span></div><div class="line"></div><div class="line">  <span class="function"><span class="keyword">void</span> <span class="title">deleteAll</span><span class="params">()</span></span>;<span class="comment">//删除所有数据</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h4 id="PagingAndSortingRepository"><a href="#PagingAndSortingRepository" class="headerlink" title="PagingAndSortingRepository"></a>PagingAndSortingRepository</h4><p>CrudRepository的子接口，扩展了分页和排序功能。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">PagingAndSortingRepository</span>&lt;<span class="title">T</span>, <span class="title">ID</span> <span class="keyword">extends</span> <span class="title">Serializable</span>&gt; <span class="keyword">extends</span> <span class="title">CrudRepository</span>&lt;<span class="title">T</span>, <span class="title">ID</span>&gt; </span>&#123;</div><div class="line">  <span class="function">Iterable&lt;T&gt; <span class="title">findAll</span><span class="params">(Sort var1)</span></span>;<span class="comment">//根据某个排序获取所有数据</span></div><div class="line">  <span class="function">Page&lt;T&gt; <span class="title">findAll</span><span class="params">(Pageable var1)</span></span>;<span class="comment">//根据分页信息获取某一页的数据</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h4 id="JpaRepository"><a href="#JpaRepository" class="headerlink" title="JpaRepository"></a>JpaRepository</h4><p>PagingAndSortingRepository的子接口，增加一些实用的功能, 如批量操作<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">JpaRepository</span>&lt;<span class="title">T</span>, <span class="title">ID</span> <span class="keyword">extends</span> <span class="title">Serializable</span>&gt; <span class="keyword">extends</span> <span class="title">PagingAndSortingRepository</span>&lt;<span class="title">T</span>, <span class="title">ID</span>&gt; </span>&#123;</div><div class="line">  <span class="function">List&lt;T&gt; <span class="title">findAll</span><span class="params">()</span></span>; <span class="comment">//获取所有数据，以List的方式返回</span></div><div class="line"></div><div class="line">  <span class="function">List&lt;T&gt; <span class="title">findAll</span><span class="params">(Sort var1)</span></span>; <span class="comment">//根据某个排序获取所有数据，以List的方式返回</span></div><div class="line"></div><div class="line">  <span class="function">List&lt;T&gt; <span class="title">findAll</span><span class="params">(Iterable&lt;ID&gt; var1)</span></span>; <span class="comment">//根据一组id返回对应的对象，以List的方式返回</span></div><div class="line"></div><div class="line">  &lt;S extends T&gt; <span class="function">List&lt;S&gt; <span class="title">save</span><span class="params">(Iterable&lt;S&gt; var1)</span></span>; <span class="comment">//将一组对象持久化到数据库中，以List的方式返回</span></div><div class="line"></div><div class="line">  <span class="function"><span class="keyword">void</span> <span class="title">flush</span><span class="params">()</span></span>; <span class="comment">//将修改更新到数据库</span></div><div class="line"></div><div class="line">  &lt;S extends T&gt; <span class="function">S <span class="title">saveAndFlush</span><span class="params">(S var1)</span></span>; <span class="comment">//保存数据并将修改更新到数据库</span></div><div class="line"></div><div class="line">  <span class="function"><span class="keyword">void</span> <span class="title">deleteInBatch</span><span class="params">(Iterable&lt;T&gt; var1)</span></span>; <span class="comment">//批量删除数据</span></div><div class="line"></div><div class="line">  <span class="function"><span class="keyword">void</span> <span class="title">deleteAllInBatch</span><span class="params">()</span></span>; <span class="comment">//批量删除所有数据</span></div><div class="line"></div><div class="line">  <span class="function">T <span class="title">getOne</span><span class="params">(ID var1)</span></span>; <span class="comment">//根据id查找并返回一个对象</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="自定义查询"><a href="#自定义查询" class="headerlink" title="自定义查询"></a>自定义查询</h3><p>Spring Data 会识别出find…By, read…By和get…By这样的前缀，从后面的命名中解析出查询的条件。方法命名的的第一个By表示查询条件的开始，多个条件可以通过And和Or来连接。</p>
<h2 id="事务处理"><a href="#事务处理" class="headerlink" title="事务处理"></a>事务处理</h2><p>在SpringData中事务的处理只需要在Service所需要加事务的方法上添加注解<strong>@Transactional</strong>，前提是使用基于组件扫描。如果使用基于注注解的配置包扫描，则需要在配置类上使用<strong>@EnableTransactionManagement</strong>来开启对事务的支持。</p>
<h2 id="SpringBoot整合Mybatis"><a href="#SpringBoot整合Mybatis" class="headerlink" title="SpringBoot整合Mybatis"></a>SpringBoot整合Mybatis</h2><p>首先需要添加mybatis-Spring的依赖：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis.spring.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">version</span>&gt;</span>1.3.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.43<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>配置文件：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">#配置数据源</div><div class="line">spring:</div><div class="line">  datasource:</div><div class="line">      driver-class-name: com.mysql.jdbc.Driver</div><div class="line">      url: jdbc:mysql://127.0.0.1:3306/springbootjpa?useUnicode=true&amp;characterEncoding=utf-8</div><div class="line">      username: root</div><div class="line">      password: 1234</div><div class="line">#mybatis的配置</div><div class="line">mybatis:</div><div class="line">  type-aliases-package: com.wqh.springbootmybatis.domain</div></pre></td></tr></table></figure></p>
<p>Maper<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Repository</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserMapper</span></span>&#123;</div><div class="line">    <span class="meta">@Select</span>(<span class="string">"select * from user"</span>)</div><div class="line">    <span class="function"><span class="keyword">public</span> List&lt;UserEntity&gt; <span class="title">findAll</span><span class="params">()</span></span>;</div><div class="line"></div><div class="line">    <span class="meta">@Insert</span>(<span class="string">"insert into user(name,age) values(#&#123;name&#125;,#&#123;age&#125;)"</span>)</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">saveUser</span><span class="params">(UserEntity user)</span></span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>这里使用的注解形式，如果需要使用xml配置方式，可以在配置文件中加入相应配置<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">config-location:   //配置文件的地址</div><div class="line">mapper-locations:  //Mapper配置文件的地址</div></pre></td></tr></table></figure></p>
<p>配置类：这里如果不使用第三方数据源（如：druid）可以不用该类；<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Configuration</span></div><div class="line"><span class="comment">//指明了扫描dao层，并且给dao层注入指定的SqlSessionTemplate</span></div><div class="line"><span class="meta">@MapperScan</span>(basePackages = <span class="string">"com.wqh.dao"</span>, sqlSessionTemplateRef = <span class="string">"sqlSessionTemplate"</span>)</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DataSourceConfig</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;spring.datasource.driver-class-name&#125;"</span>)</div><div class="line">    <span class="keyword">private</span> String driverClass;</div><div class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;spring.datasource.url&#125;"</span>)</div><div class="line">    <span class="keyword">private</span> String url;</div><div class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;spring.datasource.username&#125;"</span>)</div><div class="line">    <span class="keyword">private</span> String uasername;</div><div class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;spring.datasource.password&#125;"</span>)</div><div class="line">    <span class="keyword">private</span> String password;</div><div class="line"></div><div class="line">    <span class="meta">@Bean</span>(name = <span class="string">"dataSource"</span>)</div><div class="line">    <span class="meta">@Primary</span><span class="comment">//多数据源时，指定该Bean为主</span></div><div class="line">    <span class="function"><span class="keyword">public</span> DataSource <span class="title">dataSource</span><span class="params">()</span> </span>&#123;</div><div class="line">    	<span class="comment">//使用Druid数据源</span></div><div class="line">        DruidDataSource druidDataSource = <span class="keyword">new</span> DruidDataSource();</div><div class="line">        druidDataSource.setDriverClassName(driverClass);</div><div class="line">        druidDataSource.setUrl(url);</div><div class="line">        druidDataSource.setUsername(uasername);</div><div class="line">        druidDataSource.setPassword(password);</div><div class="line">        <span class="keyword">return</span> druidDataSource;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Bean</span>(name = <span class="string">"sqlSessionFactory"</span>)</div><div class="line">    <span class="meta">@Primary</span></div><div class="line">    <span class="function"><span class="keyword">public</span> SqlSessionFactory <span class="title">sqlSessionFactory</span><span class="params">(@Qualifier(<span class="string">"dataSource"</span>)</span> DataSource dataSource) <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">        SqlSessionFactoryBean sqlSessionFactoryBean = <span class="keyword">new</span> SqlSessionFactoryBean();</div><div class="line">        sqlSessionFactoryBean.setDataSource(dataSource);</div><div class="line">        <span class="keyword">return</span> sqlSessionFactoryBean.getObject();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Bean</span>(name = <span class="string">"dataSourceTransactionManager"</span>)</div><div class="line">    <span class="meta">@Primary</span></div><div class="line">    <span class="function"><span class="keyword">public</span> DataSourceTransactionManager <span class="title">dataSourceTransactionManager</span><span class="params">(@Qualifier(<span class="string">"dataSource"</span>)</span> DataSource dataSource) </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> DataSourceTransactionManager(dataSource);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Bean</span>(name = <span class="string">"sqlSessionTemplate"</span>)</div><div class="line">    <span class="meta">@Primary</span></div><div class="line">    <span class="function"><span class="keyword">public</span> SqlSessionTemplate <span class="title">sqlSessionTemplate</span><span class="params">(@Qualifier(<span class="string">"sqlSessionFactory"</span>)</span> SqlSessionFactory sqlSessionFactory) </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> SqlSessionTemplate(sqlSessionFactory);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>测试<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@RunWith</span>(SpringRunner.class)</div><div class="line"><span class="meta">@SpringBootTest</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserServiceTest</span> </span>&#123;</div><div class="line">    <span class="meta">@Autowired</span></div><div class="line">    <span class="keyword">private</span> UserService userService;</div><div class="line">    <span class="meta">@Test</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">saveUser</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">        UserEntity u = <span class="keyword">new</span> UserEntity();</div><div class="line">        u.setName(<span class="string">"wqh"</span>);</div><div class="line">        u.setAge(<span class="string">"23"</span>);</div><div class="line">        userService.saveUser(u);</div><div class="line"></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>参考：</p>
<ul>
<li><a href="http://www.jianshu.com/p/ff4839931c54" target="_blank" rel="external">http://www.jianshu.com/p/ff4839931c54</a></li>
<li><a href="http://www.ityouknow.com/springboot" target="_blank" rel="external">springboot(六)：如何优雅的使用mybatis</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;使用Spring-Data-Jpa操作数据库&quot;&gt;&lt;a href=&quot;#使用Spring-Data-Jpa操作数据库&quot; class=&quot;headerlink&quot; title=&quot;使用Spring Data Jpa操作数据库&quot;&gt;&lt;/a&gt;使用Spring Data Jpa操作数据库&lt;/h2&gt;&lt;p&gt;要使用Spring Data Jpa必须先添加相应的依赖&lt;br&gt;&lt;figure class=&quot;highlight xml&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;dependency&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;groupId&lt;/span&gt;&amp;gt;&lt;/span&gt;org.springframework.boot&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;groupId&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;artifactId&lt;/span&gt;&amp;gt;&lt;/span&gt;spring-boot-starter-data-jpa&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;artifactId&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;dependency&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;数据库配置信息，使用yml的配置文件，个人感觉这种配置结构更清晰
    
    </summary>
    
      <category term="Spring" scheme="http://www.wanqhblog.top/categories/Spring/"/>
    
    
      <category term="SpringBoot" scheme="http://www.wanqhblog.top/tags/SpringBoot/"/>
    
      <category term="Data-Jpa" scheme="http://www.wanqhblog.top/tags/Data-Jpa/"/>
    
      <category term="mybatis" scheme="http://www.wanqhblog.top/tags/mybatis/"/>
    
      <category term="hibernate" scheme="http://www.wanqhblog.top/tags/hibernate/"/>
    
  </entry>
  
  <entry>
    <title>SpringBoot入门</title>
    <link href="http://www.wanqhblog.top/2017/10/05/SpringBoot%E5%85%A5%E9%97%A8/"/>
    <id>http://www.wanqhblog.top/2017/10/05/SpringBoot入门/</id>
    <published>2017-10-05T01:40:20.000Z</published>
    <updated>2017-10-05T07:20:18.813Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Spring中常用注解"><a href="#Spring中常用注解" class="headerlink" title="Spring中常用注解"></a>Spring中常用注解</h2><h3 id="声明Bean的注解"><a href="#声明Bean的注解" class="headerlink" title="声明Bean的注解"></a>声明Bean的注解</h3><ul>
<li><strong>@Component：</strong>声明类为组件，没有明确的角色；</li>
<li><strong>@Service：</strong>声明该类在业务逻辑层（service层）使用；</li>
<li><strong>@Reponsitory：</strong>在数据访问层（dao层）使用；</li>
<li><strong>@Controller：</strong>表现层（MVC-&gt;SpringMVC）使用；<br>四个注解效果几乎等效，主要是区别类的作用，是层次更清晰。</li>
<li><strong>@Scope：</strong>描述Spring容器如何新建Bean实例，<ul>
<li><strong>Singleton：</strong>单例，一个Spring容器中只有一个Bean实例，Spring默认为该配置</li>
<li><strong>Prototype：</strong>每次调用新建一个Bean实例</li>
<li><strong>Request：</strong>web项目中，给每一个http request新建一个Bean实例</li>
<li><strong>Session：</strong>web项目中，给每一个http session新建一个Bean实例</li>
<li><strong>GlobalSession：</strong>这个只在portal应用中有用，给每一个global http session新建一个bean实例 <h3 id="注入Bean的注解"><a href="#注入Bean的注解" class="headerlink" title="注入Bean的注解"></a>注入Bean的注解</h3></li>
</ul>
</li>
<li><strong>@Autowired:</strong>自动装配，Spring提供的注解；<a id="more"></a>默认按类型装配，默认情况下必须要求依赖对象必须存在，如果要允许null 值，可以设置它的required属性为false，如：@Autowired(required=false) ，如果我们想使用名称装配可以结合<strong>@Qualifier</strong>注解进行使用</li>
<li><strong>@Resource：</strong>JSR-250提供的注解；默认安照名称进行装配，名称可以通过name属性进行指定，如果没有指定name属性，当注解写在字段上时，默认取字段名进行按照名称查找，如果注解写在setter方法上默认取属性名进行装配。 当找不到与名称匹配的bean时才按照类型进行装配。但是需要注意的是，如果name属性一旦指定，就只会按照名称进行装配。</li>
<li><strong>@Inject：</strong>JSR-330提供的注解。与<strong>@Autowired</strong>基本一样，按类型装配，可以通过<strong>@Qualifier</strong>显式指定装配类型<br>这三个注解可在set方法或者属性上，个人觉得注解在属性上更好，优点是代码少，层次更清晰。<h3 id="Java配置注解"><a href="#Java配置注解" class="headerlink" title="Java配置注解"></a>Java配置注解</h3></li>
<li><strong>@Configuration：</strong>声明当前类是一个配置类，该类相当于Spring一个xml配置文件。这个类中可能有0个或多个@Bean注解。也可以不使用包扫描，因为所有的Bean都在此类中定义。</li>
<li><strong>@Bean：</strong>注解在方法上，声明当前方法返回的是值为一个Bean；如果</li>
<li><p><strong>@ComponentScan：</strong>自动扫描指定包名下所有使用<strong>@Servcie</strong>、<strong>@Reponsitory</strong>、<strong>@Controller</strong>和<strong>@Component</strong>的类，并注册为Bean。<br>使用java配置方式的Spring程序，可以使用<strong>AnnotationConfigApplicationContext</strong>作为Spring容器，接受输入一个配置类作为参数，然后使用<strong>genBean()</strong>获取配置的Bean。</p>
<h3 id="AOP注解"><a href="#AOP注解" class="headerlink" title="AOP注解"></a>AOP注解</h3><p>AOP：面向切面编程，相对于OOP面向对象编程；Spring的AOP的存在是为了解耦,AOP可以让一组类共享相同行为。在OOP中只能通过继承类和实现接口来使代码的耦合度增强，且继承是能为单继承，阻碍更多行为添加到一组类上，AOP弥补了OOP的不足。<br>Spring支持AspectJ的注解式切面编程。</p>
</li>
<li><p><strong>@Aspect:</strong>声明是一个切面；</p>
</li>
<li><strong>@Before：</strong>定义切点，定义为前置通知</li>
<li><strong>@After：</strong>定义为后置通知</li>
<li><strong>@Around：</strong>定义为环绕通知，其中参数为切点</li>
<li><strong>@PointCut：</strong>定义统一的拦截规则，上面的通知可以引用</li>
</ul>
<p>如果是使用java配置方式的Spring程序，需要在配置类上使用<strong>@EnableAspectJAutoProxy</strong>开启对AspectJ代理的支持。</p>
<h3 id="Spring-EL和资源调用注解"><a href="#Spring-EL和资源调用注解" class="headerlink" title="Spring EL和资源调用注解"></a>Spring EL和资源调用注解</h3><p>Spring EL表达式支持在xml和注解中使用，类似于jsp的EL表达式。</p>
<ul>
<li><strong>@PropertySource:</strong>指定资源文件地址，</li>
<li><strong>@Value：</strong>其中的参数为读取资源信息，也可以使用该注解注入，这样就需要配置一个PropertySourcePalceholderConfigurer的Bean。<h3 id="Bean的初始化和销毁"><a href="#Bean的初始化和销毁" class="headerlink" title="Bean的初始化和销毁"></a>Bean的初始化和销毁</h3>使用JSR250形式的Bean</li>
<li><strong>@PostConstruct：</strong>在构造函数执行完之后执行</li>
<li><strong>@PerDestory：</strong>在Bean销毁之前执行<br>在<strong>@Bean</strong>注解中可以指定属性：initMethod和destoryMethod指定类的init和destory方法在构造之后、bean销毁之前执行。<h3 id="异步注解"><a href="#异步注解" class="headerlink" title="异步注解"></a>异步注解</h3></li>
<li><strong>@EnableAsync：</strong>注解开启异步任务支持，在配置类中使用</li>
<li><strong>@Async：</strong>表明该方法是个异步方法，如果该注解用在类上，则表明该类所有的方法都是异步方法。<h3 id="计划任务"><a href="#计划任务" class="headerlink" title="计划任务"></a>计划任务</h3></li>
<li><strong>@EnableScheduling：</strong>在配置类来开启对计划任务的支持，</li>
<li><strong>@Schedule：</strong>声明这是一个计划任务，使用fixedRate属性每个固定时间执行，cron可按照指定时间执行，cron是UNIX和类UNIX系统下的定时任务。<h3 id="测试注解"><a href="#测试注解" class="headerlink" title="测试注解"></a>测试注解</h3></li>
<li><strong>@ContextConfiguration：</strong>加载配置ApplicationContext，其中class属性用来加载配置类</li>
<li><strong>@ActiveProfile：</strong>用来声明活动的profile<h3 id="Spring-MVC注解"><a href="#Spring-MVC注解" class="headerlink" title="Spring MVC注解"></a>Spring MVC注解</h3></li>
<li><strong>@Controller：</strong>声明该类是一个控制器</li>
<li><strong>@RequestMapping：</strong>配置URL和方法之间的映射</li>
<li><strong>@ResponseBody：</strong>支持将返回值放在response体内，而不是返回一个页面；此注解可放在返回值钱或者方法前。返回一般为json数据</li>
<li><strong>@RequestBody：</strong>允许request的参数放在request体内，而不是直接在地址后面，此注解放在参数钱</li>
<li><strong>@PathVariable：</strong>用来接收路径参数</li>
<li><strong>@RestController:</strong>组合注解，组合了@Controller和@ResponseBody</li>
<li><strong>@ControllerAdvice：</strong>可以将对于控制器的全局配置放置在同一个位置</li>
<li><strong>@ExceptionHandler:</strong>用于全局处理控制里的异常，</li>
<li><strong>@InitBinder：</strong>用来设置WebDataBinder，<strong>WebDataBinder</strong>用来自动绑定前台参数到Model中</li>
<li><strong>@ModelAttribute：</strong>绑定键值对到Model里，<strong>@ControllerAdvice</strong>注解标注的类中是让全局的@RequestMapping都能获得到在此处设置的键值对。<h3 id="其他注解"><a href="#其他注解" class="headerlink" title="其他注解"></a>其他注解</h3></li>
<li><strong>@Profile：</strong>为在不同环境下使用不同的配置提供支持</li>
<li><strong>@ConfigurationProperties：</strong>绑定指定的properties中的值，并且支持层级关系。</li>
<li><strong>@Primary：</strong> 标志这个 Bean 如果在多个同类 Bean 候选时，该 Bean 优先被考虑。</li>
<li><strong>@Conditional：</strong>根据满足某一特定条件创建一个特定的Bean</li>
<li><strong>@EnableWebMvc：</strong>开启Web MVC的配置支持</li>
<li><strong>@EnableConfigurationProperties：</strong>开启对<strong>@ConfigurationProperties</strong>注解配置Bean的支持</li>
<li><strong>@EnableTransactionManagement:</strong>开启对注解式事务的支持</li>
<li><strong>@EnableCaching：</strong>开启注解式的缓存支持<h2 id="SpringBoot简介"><a href="#SpringBoot简介" class="headerlink" title="SpringBoot简介"></a>SpringBoot简介</h2><blockquote>
<p>Spring Boot是由Pivotal团队提供的全新框架，其设计目的是用来简化新Spring应用的初始搭建以及开发过程。该框架使用了特定的方式来进行配置，从而使开发人员不再需要定义样板化的配置。通过这种方式，Spring Boot致力于在蓬勃发展的快速应用开发领域(rapid application development)成为领导者。</p>
</blockquote>
</li>
</ul>
<h3 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h3><ol>
<li>快速构建项目；</li>
<li>对主流开发框架的无配置集成；</li>
<li>项目可独立运行，无须外部依赖Servlet容器；</li>
<li>提供运行时的应用监控；</li>
<li>极大地提高了开发、部署效率；</li>
<li>与云计算的天然集成。</li>
</ol>
<h2 id="创建第一个SpringBoot应用"><a href="#创建第一个SpringBoot应用" class="headerlink" title="创建第一个SpringBoot应用"></a>创建第一个SpringBoot应用</h2><p>可以使用Spring网站在线创建：<a href="https://start.spring.io/" target="_blank" rel="external">https://start.spring.io/</a><br><img src="https://i.imgur.com/09JwCTm.png" alt=""><br>下载完解压后就能得到一个标准的maven项目，这里也可以选择gradle方式<br><img src="https://i.imgur.com/XURuy7w.png" alt=""><br>使用IDE创建，这里使用IDEA创建：<br>选择Spring Initializr，在右边选择jdk版本<br><img src="https://i.imgur.com/fsAi30r.png" alt=""><br>修改填写maven的一些属性，这里的Java Version要与前面的版本对应<br><img src="https://i.imgur.com/8mnotun.png" alt=""><br>选择SpringBoot的版本以及需要添加的依赖<br><img src="https://i.imgur.com/nfymcBB.png" alt=""><br>最后就是项目名称<br><img src="https://i.imgur.com/YCAnc3f.png" alt=""><br>创建完成的项目结构：<br><img src="https://i.imgur.com/4F2kGUw.png" alt=""><br>添加一个Controller并启动项目测试：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@RestController</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Hello</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/hello"</span>)</div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">hello</span><span class="params">()</span></span>&#123;</div><div class="line">        <span class="keyword">return</span>  <span class="string">"Hello SpringBoot"</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@SpringBootApplication</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DemoApplication</span> </span>&#123;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">		SpringApplication.run(DemoApplication.class, args);</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>访问：<a href="http://localhost:8080/hello" target="_blank" rel="external">http://localhost:8080/hello</a><br><img src="https://i.imgur.com/QtGfbag.png" alt=""></p>
<h2 id="表单验证"><a href="#表单验证" class="headerlink" title="表单验证"></a>表单验证</h2><p>创建一个学生类，添加学生信息验证学生年龄最小为20岁，学生姓名不能为空：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Students</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> String id;</div><div class="line"></div><div class="line">    <span class="meta">@NotNull</span>(message = <span class="string">"姓名必传"</span>)</div><div class="line">    <span class="keyword">private</span> String name;</div><div class="line"></div><div class="line">    <span class="comment">//@Min 该注解限制字段的最小值</span></div><div class="line">    <span class="meta">@Min</span>(value = <span class="number">20</span> ,message = <span class="string">"未满20岁的学生禁止注册！！"</span>)</div><div class="line">    <span class="keyword">private</span> Integer age;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Students</span><span class="params">()</span> </span>&#123;</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getId</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> id;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setId</span><span class="params">(String id)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.id = id;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> name;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.name = name;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> Integer <span class="title">getAge</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> age;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(Integer age)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.age = age;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="string">"Students&#123;"</span> +</div><div class="line">                <span class="string">"id='"</span> + id + <span class="string">'\''</span> +</div><div class="line">                <span class="string">", name='"</span> + name + <span class="string">'\''</span> +</div><div class="line">                <span class="string">", age="</span> + age +</div><div class="line">                <span class="string">'&#125;'</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/** 日志打印 */</span></div><div class="line">   <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> Logger logger = LoggerFactory.getLogger(Hello.class);</div><div class="line"></div><div class="line">   <span class="comment">/**</span></div><div class="line"><span class="comment">    * <span class="doctag">@Valid</span> 表示该对象需要验证</span></div><div class="line"><span class="comment">    * <span class="doctag">@param</span> student </span></div><div class="line"><span class="comment">    * <span class="doctag">@param</span> bindingResult 验证返回的信息</span></div><div class="line"><span class="comment">    * <span class="doctag">@return</span></span></div><div class="line"><span class="comment">    */</span></div><div class="line">   <span class="meta">@PostMapping</span>(<span class="string">"/saveStudent"</span>)</div><div class="line">   <span class="function"><span class="keyword">public</span> Object <span class="title">saveStudent</span><span class="params">(@Valid Students student,BindingResult bindingResult)</span></span>&#123;</div><div class="line">       <span class="keyword">if</span>(bindingResult.hasErrors())&#123;</div><div class="line">           <span class="comment">//如果失败，打印并返回验证结果</span></div><div class="line">           String error = bindingResult.getFieldError().getDefaultMessage();<span class="comment">//获取错误信息</span></div><div class="line">           logger.info(String.format(<span class="string">"errorMsg=&#123;&#125;"</span>),error+<span class="string">"age:"</span>+student.getAge());</div><div class="line">           <span class="keyword">return</span> error;</div><div class="line">       &#125;</div><div class="line">       <span class="keyword">return</span> student;</div><div class="line">   &#125;</div></pre></td></tr></table></figure>
<p><img src="https://i.imgur.com/2xKpn9f.png" alt=""><br><img src="https://i.imgur.com/d5jrdmg.png" alt=""></p>
<h2 id="统一异常处理"><a href="#统一异常处理" class="headerlink" title="统一异常处理"></a>统一异常处理</h2><p>@ControllerAdvice:使用该注解标注的类，表明该类是Controller的全局配置类；<br>@ExceptionHandler：全局处理控制器的异常<br>自定义异常类<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">**</div><div class="line"> * Created By wqh</div><div class="line"> * <span class="number">2017</span>/<span class="number">9</span>/<span class="number">24</span>   <span class="number">15</span>:<span class="number">13</span></div><div class="line"> * Description: 自定义异常，只有继承RuntimeException才能被Spring的hadler捕获</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StudentExceprion</span> <span class="keyword">extends</span> <span class="title">RuntimeException</span></span>&#123;</div><div class="line">    <span class="keyword">private</span> Integer code;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">StudentExceprion</span><span class="params">(ResultEnum resultEnum)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>(resultEnum.getMessage());</div><div class="line">        <span class="keyword">this</span>.code = resultEnum.getCode();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> Integer <span class="title">getCode</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> code;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setCode</span><span class="params">(Integer code)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.code = code;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment"> * Created By wqh</span></div><div class="line"><span class="comment"> * 2017/9/24 14:50</span></div><div class="line"><span class="comment"> * Description:返回结果的封装的工具类</span></div><div class="line"><span class="comment"> */</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ResultUtil</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> ResponseResult <span class="title">success</span><span class="params">(Object object)</span></span>&#123;</div><div class="line">        ResponseResult responseResult = <span class="keyword">new</span> ResponseResult();</div><div class="line">        responseResult.setCode(<span class="number">1</span>);</div><div class="line">        responseResult.setMessage(<span class="string">"成功"</span>);</div><div class="line">        responseResult.setData(object);</div><div class="line">        <span class="keyword">return</span> responseResult;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span>  ResponseResult <span class="title">success</span><span class="params">()</span></span>&#123;</div><div class="line">        <span class="keyword">return</span> success(<span class="keyword">null</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> ResponseResult <span class="title">error</span><span class="params">(Integer code,String content)</span></span>&#123;</div><div class="line">        ResponseResult&lt;Students&gt; responseResult = <span class="keyword">new</span> ResponseResult&lt;&gt;();</div><div class="line">        responseResult.setCode(code);</div><div class="line">        responseResult.setMessage(content);</div><div class="line">        <span class="keyword">return</span> responseResult;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>控制层全局配置类<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@ControllerAdvice</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ExceptionHandle</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="meta">@ExceptionHandler</span>(value = Exception.class)</div><div class="line">    <span class="meta">@ResponseBody</span></div><div class="line">    <span class="function"><span class="keyword">public</span> ResponseResult <span class="title">handle</span><span class="params">(Exception e)</span></span>&#123;</div><div class="line">        <span class="keyword">if</span>(e <span class="keyword">instanceof</span> StudentExceprion)&#123;</div><div class="line">            StudentExceprion studentExceprion = (StudentExceprion) e;</div><div class="line">            <span class="keyword">return</span> ResultUtil.error(studentExceprion.getCode(),studentExceprion.getMessage());</div><div class="line">        &#125;<span class="keyword">else</span> &#123;</div><div class="line"></div><div class="line">            <span class="keyword">return</span> ResultUtil.error(ResultEnum.UNKNOW_ERROR.getCode(),ResultEnum.UNKNOW_ERROR.getMessage());</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment"> * Created By wqh</span></div><div class="line"><span class="comment"> * 2017/9/24   15:26</span></div><div class="line"><span class="comment"> * Description: 返回结果的枚举类</span></div><div class="line"><span class="comment"> */</span></div><div class="line"><span class="keyword">public</span> <span class="keyword">enum</span>  ResultEnum &#123;</div><div class="line">    UNKNOW_ERROR (-<span class="number">1</span>,<span class="string">"未知错误"</span>),</div><div class="line">    SUCCESS(<span class="number">1</span>,<span class="string">"成功"</span>),</div><div class="line">    PRIMARY_ERROR(<span class="number">100</span>,<span class="string">"你可能在上小学"</span>),</div><div class="line">    MIDDLE_ERROR(<span class="number">101</span>,<span class="string">"你可能在上初中"</span>),</div><div class="line">    WORK_ERROR(<span class="number">102</span>,<span class="string">"你可能在打工"</span>);</div><div class="line"></div><div class="line">    <span class="keyword">private</span> Integer code;</div><div class="line">    <span class="keyword">private</span> String message;</div><div class="line"></div><div class="line">    ResultEnum(Integer code, String message) &#123;</div><div class="line">        <span class="keyword">this</span>.code = code;</div><div class="line">        <span class="keyword">this</span>.message = message;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> Integer <span class="title">getCode</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> code;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getMessage</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> message;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment"> * Created By wqh</span></div><div class="line"><span class="comment"> * 2017/9/24 14:43</span></div><div class="line"><span class="comment"> * Description: 相应结果的封装</span></div><div class="line"><span class="comment"> */</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ResponseResult</span>&lt;<span class="title">T</span>&gt; </span>&#123;</div><div class="line"></div><div class="line">   <span class="comment">/** 响应码 */</span></div><div class="line">    <span class="keyword">private</span> Integer code;</div><div class="line"></div><div class="line">    <span class="comment">/** 响应信息 */</span></div><div class="line">    <span class="keyword">private</span> String message;</div><div class="line"></div><div class="line">    <span class="comment">/** 数据 */</span></div><div class="line">    <span class="keyword">private</span> T data;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> Integer <span class="title">getCode</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> code;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setCode</span><span class="params">(Integer code)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.code = code;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getMessage</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> message;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setMessage</span><span class="params">(String message)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.message = message;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> T <span class="title">getData</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> data;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setData</span><span class="params">(T data)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.data = data;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getAge</span><span class="params">(String id)</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">    Students stu = studentDao.findOne(id);</div><div class="line">    <span class="keyword">if</span>(stu.getAge()&lt;<span class="number">10</span>)&#123;</div><div class="line">        <span class="comment">//抛出自定义异常</span></div><div class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> StudentExceprion(ResultEnum.PRIMARY_ERROR);</div><div class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span> (stu.getAge()&gt;<span class="number">10</span> &amp;&amp; stu.getAge()&lt;<span class="number">15</span>)&#123;</div><div class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> StudentExceprion(ResultEnum.MIDDLE_ERROR);</div><div class="line">    &#125;<span class="keyword">else</span>&#123;</div><div class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> StudentExceprion(ResultEnum.WORK_ERROR);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>在控制层直接调用Service层既可，但是异常需要往外抛，交给统一的处理</p>
<h2 id="单元测试"><a href="#单元测试" class="headerlink" title="单元测试"></a>单元测试</h2><p>使用Junit进行单元测试时很重要的，这里分别介绍测试service和dao层<br>添加测试依赖<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div></pre></td></tr></table></figure></p>
<h3 id="测试Service层"><a href="#测试Service层" class="headerlink" title="测试Service层"></a>测试Service层</h3><p>Service层的测试比较简单，只要将Serice的Bean注入到测试类中。但是在SpringBoot中的测试类，需要在类上添加两个注解<strong>@RunWith(SpringRunner.class)、@SpringBootTest</strong><br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Autowired</span></div><div class="line">  <span class="keyword">private</span> StudentService studentService;</div><div class="line"></div><div class="line">  <span class="meta">@Test</span></div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">saveStus</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line"></div><div class="line">      Students student = <span class="keyword">new</span> Students();</div><div class="line">      student.setAge(<span class="number">155</span>);</div><div class="line">      student.setName(<span class="string">"wqeqwasd"</span>);</div><div class="line">      student.setMoney(<span class="number">13</span>d);</div><div class="line">      studentService.saveStus(student);</div><div class="line"></div><div class="line">  &#125;</div></pre></td></tr></table></figure></p>
<h3 id="测试Controller层"><a href="#测试Controller层" class="headerlink" title="测试Controller层"></a>测试Controller层</h3><p>在开发Rest风格API时，对于Controller层的测试也是相当重要的；<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@RunWith</span>(SpringRunner.class)</div><div class="line"><span class="meta">@SpringBootTest</span></div><div class="line"><span class="meta">@AutoConfigureMockMvc</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StudentActionTest</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="meta">@Autowired</span></div><div class="line">    <span class="keyword">private</span> MockMvc mockMvc;</div><div class="line">    <span class="meta">@Test</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">save</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">        mockMvc.perform(MockMvcRequestBuilders.post(<span class="string">"/studentAction/save"</span>)</div><div class="line">                                                .param(<span class="string">"name"</span>,<span class="string">"wqh"</span>)</div><div class="line">                                                .param(<span class="string">"age"</span>,<span class="string">"50"</span>))<span class="comment">//添加参数</span></div><div class="line">                .andExpect(MockMvcResultMatchers.status().isOk())<span class="comment">//返回状态码为200</span></div><div class="line">                .andDo(print())<span class="comment">//打印出请求和相应的内容</span></div><div class="line">                .andReturn().getResponse().getContentAsString();<span class="comment">//将返回信息转化为String类型</span></div><div class="line"><span class="comment">//                .andExpect(MockMvcResultMatchers.content().string("ww"));//返回结果必须是ww</span></div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h2 id="SpringBoot实现热部署"><a href="#SpringBoot实现热部署" class="headerlink" title="SpringBoot实现热部署"></a>SpringBoot实现热部署</h2><p>SpringBoot热部署是使用了spring-boot-devtools工具：<br>添加依赖<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!--热部署功能--&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-devtools<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>Pom文件build中添加<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">plugins</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">fork</span>&gt;</span>true<span class="tag">&lt;/<span class="name">fork</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>IDEA配置<br>当我们修改了Java类后，IDEA默认是不自动编译的，而spring-boot-devtools又是监测classpath下的文件发生变化才会重启应用，所以需要设置IDEA的自动编译：<br><img src="https://i.imgur.com/S8SPCWm.png" alt=""></p>
<h2 id="学习资料汇总"><a href="#学习资料汇总" class="headerlink" title="学习资料汇总"></a>学习资料汇总</h2><h3 id="推荐博客"><a href="#推荐博客" class="headerlink" title="推荐博客"></a>推荐博客</h3><ul>
<li><a href="http://blog.didispace.com/categories/Spring-Boot/" target="_blank" rel="external">程序猿DD</a></li>
<li><a href="http://blog.csdn.net/liaokailin/article/category/5765237" target="_blank" rel="external">liaokailin的专栏</a></li>
<li><a href="http://blog.720ui.com/columns/springboot_all/" target="_blank" rel="external">Spring Boot 揭秘与实战 系列</a></li>
<li><a href="http://blog.csdn.net/column/details/spring-boot.html" target="_blank" rel="external">catoop的专栏</a></li>
<li><a href="http://www.jianshu.com/c/f0cf6eae1754" target="_blank" rel="external">简书Spring Boot专题</a></li>
<li><a href="http://blog.csdn.net/column/details/15397.html" target="_blank" rel="external">方志朋Spring Boot 专栏</a></li>
<li><a href="http://lihao312.iteye.com/" target="_blank" rel="external">Spring-boot集成</a></li>
<li><a href="http://www.ityouknow.com/spring-boot" target="_blank" rel="external">纯洁的微笑</a><h3 id="推荐网站"><a href="#推荐网站" class="headerlink" title="推荐网站"></a>推荐网站</h3></li>
<li><a href="http://projects.spring.io/spring-boot/" target="_blank" rel="external">Spring boot 官网</a></li>
<li><a href="https://qbgbook.gitbooks.io/spring-boot-reference-guide-zh/content/" target="_blank" rel="external">Spring Boot参考指南-中文版</a></li>
<li><a href="https://dongchuan.gitbooks.io/gradle-user-guide-/content/tutorials/" target="_blank" rel="external">Gradle 中文参考指南</a></li>
<li><a href="http://www.imooc.com/learn/767" target="_blank" rel="external">慕课网视频</a></li>
<li><a href="http://www.mkyong.com/tutorials/spring-boot-tutorials/" target="_blank" rel="external">spring-boot-tutorials</a><h3 id="开源代码"><a href="#开源代码" class="headerlink" title="开源代码"></a>开源代码</h3></li>
<li><a href="https://github.com/spring-projects/spring-boot/tree/master/spring-boot-samples" title="SpringBoot官方例子" target="_blank" rel="external">SpringBoot官方例子</a></li>
<li><a href="https://github.com/ityouknow/spring-boot-examples" target="_blank" rel="external">spring-boot-examples</a></li>
<li><a href="https://github.com/dyc87112/SpringBoot-Learning" target="_blank" rel="external">SpringBoot-Learning</a></li>
<li><a href="https://github.com/cloudfavorites/favorites-web" target="_blank" rel="external">favorites-web</a></li>
<li><a href="https://github.com/JeffLi1993/springboot-learning-example" target="_blank" rel="external">springboot-learning-example</a></li>
<li><a href="https://github.com/leelance/spring-boot-all" target="_blank" rel="external">spring-boot-all</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Spring中常用注解&quot;&gt;&lt;a href=&quot;#Spring中常用注解&quot; class=&quot;headerlink&quot; title=&quot;Spring中常用注解&quot;&gt;&lt;/a&gt;Spring中常用注解&lt;/h2&gt;&lt;h3 id=&quot;声明Bean的注解&quot;&gt;&lt;a href=&quot;#声明Bean的注解&quot; class=&quot;headerlink&quot; title=&quot;声明Bean的注解&quot;&gt;&lt;/a&gt;声明Bean的注解&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;@Component：&lt;/strong&gt;声明类为组件，没有明确的角色；&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;@Service：&lt;/strong&gt;声明该类在业务逻辑层（service层）使用；&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;@Reponsitory：&lt;/strong&gt;在数据访问层（dao层）使用；&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;@Controller：&lt;/strong&gt;表现层（MVC-&amp;gt;SpringMVC）使用；&lt;br&gt;四个注解效果几乎等效，主要是区别类的作用，是层次更清晰。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;@Scope：&lt;/strong&gt;描述Spring容器如何新建Bean实例，&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Singleton：&lt;/strong&gt;单例，一个Spring容器中只有一个Bean实例，Spring默认为该配置&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Prototype：&lt;/strong&gt;每次调用新建一个Bean实例&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Request：&lt;/strong&gt;web项目中，给每一个http request新建一个Bean实例&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Session：&lt;/strong&gt;web项目中，给每一个http session新建一个Bean实例&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;GlobalSession：&lt;/strong&gt;这个只在portal应用中有用，给每一个global http session新建一个bean实例 &lt;h3 id=&quot;注入Bean的注解&quot;&gt;&lt;a href=&quot;#注入Bean的注解&quot; class=&quot;headerlink&quot; title=&quot;注入Bean的注解&quot;&gt;&lt;/a&gt;注入Bean的注解&lt;/h3&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;@Autowired:&lt;/strong&gt;自动装配，Spring提供的注解；
    
    </summary>
    
      <category term="Spring" scheme="http://www.wanqhblog.top/categories/Spring/"/>
    
    
      <category term="SpringBooot" scheme="http://www.wanqhblog.top/tags/SpringBooot/"/>
    
  </entry>
  
  <entry>
    <title>Oracle新建用户</title>
    <link href="http://www.wanqhblog.top/2017/10/01/oracle%E6%96%B0%E5%BB%BA%E7%94%A8%E6%88%B7/"/>
    <id>http://www.wanqhblog.top/2017/10/01/oracle新建用户/</id>
    <published>2017-10-01T01:22:39.000Z</published>
    <updated>2017-10-02T02:15:11.009Z</updated>
    
    <content type="html"><![CDATA[<p>1.首先我们可以用scott用户以sysdba的身份登录oracle.<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">conn scott/tiger as sysdba</div></pre></td></tr></table></figure></p>
<p>2.然后我就可以来创建用户了.<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">create</span> <span class="keyword">user</span> <span class="keyword">name</span> <span class="keyword">identified</span> <span class="keyword">by</span> <span class="keyword">name</span>;</div></pre></td></tr></table></figure></p>
<p>3.修改用户的密码. <a id="more"></a><br><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">alter</span> <span class="keyword">user</span> <span class="keyword">name</span> <span class="keyword">identified</span> <span class="keyword">by</span> <span class="keyword">password</span>;</div></pre></td></tr></table></figure></p>
<p>4.创建一个表空间.<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">create</span> <span class="keyword">tablespace</span> tablespace_name <span class="keyword">datafile</span> <span class="string">'c:\tablespace_name.dbf'</span> <span class="keyword">size</span> <span class="number">200</span>M;</div></pre></td></tr></table></figure></p>
<p>5.创建好表空间,还需要将表空间分配给用户.<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">alter</span> <span class="keyword">user</span> <span class="keyword">name</span> <span class="keyword">default</span> <span class="keyword">tablespace</span> tablespacename;</div></pre></td></tr></table></figure></p>
<p>6.给用户分配了表空间,用户还不能登陆（没有登录权限）,因此还需要为用户分配权限<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">grant</span> <span class="keyword">create</span> <span class="keyword">session</span>,<span class="keyword">create</span> <span class="keyword">table</span>,<span class="keyword">create</span> <span class="keyword">view</span>,<span class="keyword">create</span> <span class="keyword">sequence</span>,<span class="keyword">unlimited</span> <span class="keyword">tablespace</span> <span class="keyword">to</span> tablespace_name;</div></pre></td></tr></table></figure></p>
<p>7.删除user<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">drop</span> <span class="keyword">user</span> ×× <span class="keyword">cascade</span></div></pre></td></tr></table></figure></p>
<p>8.说明： 删除了user，只是删除了该user下的schema objects，是不会删除相应的tablespace的。<br>删除tablespace<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">DROP</span> <span class="keyword">TABLESPACE</span> tablespace_name <span class="keyword">INCLUDING</span> <span class="keyword">CONTENTS</span> <span class="keyword">AND</span> <span class="keyword">DATAFILES</span>;</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;1.首先我们可以用scott用户以sysdba的身份登录oracle.&lt;br&gt;&lt;figure class=&quot;highlight sql&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;conn scott/tiger as sysdba&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;2.然后我就可以来创建用户了.&lt;br&gt;&lt;figure class=&quot;highlight sql&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;create&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;user&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;identified&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;by&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;name&lt;/span&gt;;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;3.修改用户的密码.
    
    </summary>
    
    
      <category term="oracle" scheme="http://www.wanqhblog.top/tags/oracle/"/>
    
  </entry>
  
  <entry>
    <title>Oeacle常见的日期处理</title>
    <link href="http://www.wanqhblog.top/2017/09/27/Oeacle%E6%97%A5%E6%9C%9F/"/>
    <id>http://www.wanqhblog.top/2017/09/27/Oeacle日期/</id>
    <published>2017-09-27T11:51:00.000Z</published>
    <updated>2017-10-09T06:47:12.964Z</updated>
    
    <content type="html"><![CDATA[<h2 id="日期处理常用函数"><a href="#日期处理常用函数" class="headerlink" title="日期处理常用函数"></a>日期处理常用函数</h2><ol>
<li>sysdate：当前日期和时间；</li>
<li>to_char()：将数值型或日期型转换为字符型；</li>
<li>to_date()：日期转换函数，例：to_date(‘2017-09-27 10:00:00’, ‘yyyy-mm-dd hh24:mi:ss’)；</li>
<li>last_day(sysdate)：返回日期所在月的最后一天；</li>
<li>trunc(number[,decimals])：指定元素格式截去一部分日期值；</li>
<li>add_months(D,N)：返回日期D加N月后对应的日期时间，N为正时则表示D之后；N为负时则表示为D之前；N为小数则会自动先删除小数部分，而用整数部分;<a id="more"></a></li>
<li>decode(条件,值1,翻译值1,值2,翻译值2,…值n,翻译值n,缺省值)：根据条件返回相应的值；</li>
<li>ceil(n)：取大于等于数值n的最小整数；</li>
<li>floor(n)：取小于等于数值n的最大整数；</li>
<li>dbtimezone()：返回时区；</li>
<li>……<h2 id="常见操作"><a href="#常见操作" class="headerlink" title="常见操作"></a>常见操作</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div></pre></td><td class="code"><pre><div class="line"><span class="comment">--得到当前的日期</span></div><div class="line"><span class="keyword">select</span> <span class="keyword">sysdate</span> <span class="keyword">from</span> dual;</div><div class="line"></div><div class="line"><span class="comment">--取得当前日期是本月的第几周</span></div><div class="line"><span class="keyword">select</span> to_char(<span class="keyword">sysdate</span>,<span class="string">'YYYYMMDD HH24:MI:SS W'</span>) <span class="keyword">from</span> dual;</div><div class="line"></div><div class="line"><span class="keyword">select</span> to_char(<span class="keyword">sysdate</span>,<span class="string">'w'</span>) <span class="keyword">from</span> dual;</div><div class="line"></div><div class="line"><span class="comment">--取得当前日期是一个星期中的第几天,注意星期日是第一天 返回的是number 1开始星期天</span></div><div class="line"><span class="keyword">select</span> to_char(<span class="keyword">sysdate</span>,<span class="string">'d'</span>) <span class="keyword">from</span> dual;</div><div class="line"><span class="keyword">select</span> to_char(<span class="keyword">sysdate</span>,<span class="string">'yyyy'</span>) <span class="keyword">from</span> dual;<span class="comment">--取得年</span></div><div class="line"><span class="keyword">select</span> to_char(<span class="keyword">sysdate</span>,<span class="string">'q'</span>) <span class="keyword">from</span> dual;<span class="comment">--取得季度</span></div><div class="line"><span class="keyword">select</span> to_char(<span class="keyword">sysdate</span>,<span class="string">'mm'</span>) <span class="keyword">from</span> dual;<span class="comment">--取得月份</span></div><div class="line"><span class="keyword">select</span> to_char(<span class="keyword">sysdate</span>,<span class="string">'dd'</span>) <span class="keyword">from</span> dual;<span class="comment">--取得日期</span></div><div class="line"><span class="keyword">select</span> to_char(<span class="keyword">sysdate</span>,<span class="string">'ddd'</span>) <span class="keyword">from</span> dual;<span class="comment">-- 一年中的第几天</span></div><div class="line"><span class="keyword">select</span> to_char(<span class="keyword">sysdate</span>,<span class="string">'ww'</span>) <span class="keyword">from</span> dual; <span class="comment">-- 年中的第几个星期</span></div><div class="line"><span class="keyword">select</span> to_char(<span class="keyword">sysdate</span>,<span class="string">'w'</span>) <span class="keyword">from</span> dual;  <span class="comment">-- 该月的第几个信息</span></div><div class="line"><span class="keyword">select</span> to_char(<span class="keyword">sysdate</span>,<span class="string">'day'</span>) <span class="keyword">from</span> dual; <span class="comment">--星期几</span></div><div class="line"><span class="keyword">select</span> to_char(<span class="keyword">sysdate</span>,<span class="string">'hh'</span>) <span class="keyword">from</span> dual; <span class="comment">--小时 12小时制</span></div><div class="line"><span class="keyword">select</span> to_char(<span class="keyword">sysdate</span>,<span class="string">'hh24'</span>) <span class="keyword">from</span> dual; <span class="comment">--小时 24小时制</span></div><div class="line"><span class="keyword">select</span> to_char(<span class="keyword">sysdate</span>,<span class="string">'MI'</span>) <span class="keyword">from</span> dual; <span class="comment">--分</span></div><div class="line"><span class="keyword">select</span> to_char(<span class="keyword">sysdate</span>,<span class="string">'ss'</span>) <span class="keyword">from</span> dual; <span class="comment">--秒</span></div><div class="line">  </div><div class="line"><span class="comment">--得到当天凌晨0点0分0秒的日期</span></div><div class="line"><span class="keyword">select</span> trunc(<span class="keyword">sysdate</span>) <span class="keyword">from</span> dual;</div><div class="line">  </div><div class="line"><span class="comment">--得到这天的最后一秒</span></div><div class="line"><span class="keyword">select</span> trunc(<span class="keyword">sysdate</span>)+<span class="number">0.99999</span> <span class="keyword">from</span> dual;</div><div class="line"></div><div class="line"><span class="comment">--得到小时的具体数值</span></div><div class="line"><span class="keyword">select</span> trunc(<span class="keyword">sysdate</span>)+<span class="number">1</span>/<span class="number">24</span> <span class="keyword">from</span> dual;</div><div class="line"><span class="keyword">select</span> trunc(<span class="keyword">sysdate</span>)+<span class="number">7</span>/<span class="number">24</span> <span class="keyword">from</span> dual;</div><div class="line"></div><div class="line"><span class="comment">--得到明天凌晨0点0分0秒的日期</span></div><div class="line"><span class="keyword">select</span> trunc(<span class="keyword">sysdate</span>+<span class="number">1</span>) <span class="keyword">from</span> dual;</div><div class="line"><span class="keyword">select</span> trunc(<span class="keyword">sysdate</span>)+<span class="number">1</span> <span class="keyword">from</span> dual;</div><div class="line"></div><div class="line"><span class="comment">--本月一日的日期</span></div><div class="line"><span class="keyword">select</span> trunc(<span class="keyword">sysdate</span>,<span class="string">'mm'</span>) <span class="keyword">from</span> dual;</div><div class="line"></div><div class="line"><span class="comment">--下月一日的日期</span></div><div class="line"><span class="keyword">select</span> trunc(add_months(<span class="keyword">sysdate</span>, <span class="number">1</span>),<span class="string">'mm'</span>) <span class="keyword">from</span> dual;</div><div class="line"></div><div class="line"><span class="comment">--返回当前月的最后一天</span></div><div class="line"><span class="keyword">select</span> <span class="keyword">last_day</span>(<span class="keyword">sysdate</span>) <span class="keyword">from</span> dual;</div><div class="line"><span class="keyword">select</span> <span class="keyword">last_day</span>(trunc(<span class="keyword">sysdate</span>)) <span class="keyword">from</span> dual;</div><div class="line"><span class="keyword">select</span> trunc(<span class="keyword">last_day</span>(<span class="keyword">sysdate</span>)) <span class="keyword">from</span> dual;</div><div class="line"><span class="keyword">select</span> trunc(add_months(<span class="keyword">sysdate</span>,<span class="number">1</span>),<span class="string">'mm'</span>) - <span class="number">1</span> <span class="keyword">from</span> dual;</div><div class="line"></div><div class="line"><span class="comment">--得到一年的每一天</span></div><div class="line"><span class="keyword">select</span> trunc(<span class="keyword">sysdate</span>,<span class="string">'yyyy'</span>)+ rn <span class="number">-1</span> date0 <span class="keyword">from</span></div><div class="line">(<span class="keyword">select</span> <span class="keyword">rownum</span> rn <span class="keyword">from</span> all_objects</div><div class="line"><span class="keyword">where</span> <span class="keyword">rownum</span>&lt;<span class="number">366</span>);</div><div class="line"></div><div class="line"><span class="comment">--给现有的日期加上2年</span></div><div class="line"><span class="keyword">select</span> add_months(<span class="keyword">sysdate</span>,<span class="number">24</span>) <span class="keyword">from</span> dual;</div><div class="line"></div><div class="line"><span class="comment">--判断某一日子所在年分是否为润年</span></div><div class="line"><span class="keyword">select</span> <span class="keyword">decode</span>(to_char(<span class="keyword">last_day</span>(trunc(<span class="keyword">sysdate</span>,<span class="string">'y'</span>)+<span class="number">31</span>),<span class="string">'dd'</span>),<span class="string">'29'</span>,<span class="string">'闰年'</span>,<span class="string">'平年'</span>) <span class="keyword">from</span> dual;</div><div class="line"></div><div class="line"><span class="comment">--判断两年后是否为润年</span></div><div class="line"><span class="keyword">select</span> <span class="keyword">decode</span>(to_char(<span class="keyword">last_day</span>(trunc(add_months(<span class="keyword">sysdate</span>,<span class="number">24</span>),<span class="string">'y'</span>)+<span class="number">31</span>),<span class="string">'dd'</span>),<span class="string">'29'</span>,<span class="string">'闰年'</span>,<span class="string">'平年'</span>) <span class="keyword">from</span> dual;</div><div class="line"></div><div class="line"><span class="comment">--查询当前日期的季度</span></div><div class="line"><span class="keyword">select</span> <span class="keyword">ceil</span>(to_number(to_char(<span class="keyword">sysdate</span>,<span class="string">'mm'</span>))/<span class="number">3</span>) <span class="keyword">from</span> dual;</div></pre></td></tr></table></figure>
</li>
</ol>
<h2 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h2><p>根据时间以及用户id计算该用户本周、本日、本月记录的数据<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="comment">-- 本日 </span></div><div class="line"><span class="keyword">select</span> y.create_by,<span class="keyword">count</span>(y.create_date),u.name <span class="keyword">from</span> <span class="keyword">test</span> y,sys_user u</div><div class="line"> <span class="keyword">where</span> <span class="keyword">to_date</span>(y.create_date)=<span class="keyword">to_date</span>(<span class="keyword">sysdate</span>) <span class="keyword">and</span> y.create_by=u.id</div><div class="line"><span class="keyword">group</span> <span class="keyword">by</span> y.create_by,u.name;</div><div class="line"></div><div class="line"><span class="comment">--本周</span></div><div class="line"><span class="keyword">select</span> create_by,<span class="keyword">count</span>(create_date)</div><div class="line"><span class="keyword">from</span> <span class="keyword">test</span></div><div class="line"><span class="keyword">where</span> <span class="keyword">to_date</span>(create_date)&gt;=<span class="keyword">to_date</span>(<span class="keyword">sysdate</span>-to_number(to_char(<span class="keyword">sysdate</span><span class="number">-1</span>,<span class="string">'D'</span>)+<span class="number">1</span>)) <span class="keyword">and</span> slzt=<span class="string">'1'</span></div><div class="line"><span class="keyword">group</span> <span class="keyword">by</span> create_by;</div><div class="line"></div><div class="line"><span class="comment">--本月</span></div><div class="line"><span class="keyword">select</span> to_char(create_date,<span class="string">'yyyy-mm'</span>),create_by,<span class="keyword">count</span>(create_date) <span class="keyword">from</span> <span class="keyword">test</span></div><div class="line"><span class="keyword">where</span> <span class="keyword">to_date</span>(create_date)&gt;=<span class="keyword">to_date</span>(trunc(<span class="keyword">sysdate</span>,<span class="string">'mm'</span>)) <span class="keyword">and</span> <span class="keyword">to_date</span>(create_date)&lt;=<span class="keyword">to_date</span>(<span class="keyword">last_day</span>(<span class="keyword">sysdate</span>))</div><div class="line"><span class="keyword">group</span> <span class="keyword">by</span> to_char(create_date,<span class="string">'yyyy-mm'</span>),create_by;</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;日期处理常用函数&quot;&gt;&lt;a href=&quot;#日期处理常用函数&quot; class=&quot;headerlink&quot; title=&quot;日期处理常用函数&quot;&gt;&lt;/a&gt;日期处理常用函数&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;sysdate：当前日期和时间；&lt;/li&gt;
&lt;li&gt;to_char()：将数值型或日期型转换为字符型；&lt;/li&gt;
&lt;li&gt;to_date()：日期转换函数，例：to_date(‘2017-09-27 10:00:00’, ‘yyyy-mm-dd hh24:mi:ss’)；&lt;/li&gt;
&lt;li&gt;last_day(sysdate)：返回日期所在月的最后一天；&lt;/li&gt;
&lt;li&gt;trunc(number[,decimals])：指定元素格式截去一部分日期值；&lt;/li&gt;
&lt;li&gt;add_months(D,N)：返回日期D加N月后对应的日期时间，N为正时则表示D之后；N为负时则表示为D之前；N为小数则会自动先删除小数部分，而用整数部分;
    
    </summary>
    
    
      <category term="oracle" scheme="http://www.wanqhblog.top/tags/oracle/"/>
    
  </entry>
  
  <entry>
    <title>SpringAOP的使用</title>
    <link href="http://www.wanqhblog.top/2017/08/28/SpringAOP/"/>
    <id>http://www.wanqhblog.top/2017/08/28/SpringAOP/</id>
    <published>2017-08-28T02:10:56.000Z</published>
    <updated>2017-08-28T05:35:42.274Z</updated>
    
    <content type="html"><![CDATA[<h2 id="什么是AOP"><a href="#什么是AOP" class="headerlink" title="什么是AOP"></a>什么是AOP</h2><p>AOP（Aspect Oriented Programming 面向切面编程），通过预编译方式和运行期动态代理实现程序功能的统一维护的一种技术。AOP是OOP的延续，是软件开发中的一个热点，也是Spring框架中的一个重要内容，是函数式编程的一种衍生范型。利用AOP可以对业务逻辑的各个部分进行隔离，从而使得业务逻辑各部分之间的耦合度降低，提高程序的可重用性，同时提高了开发的效率。</p>
<p>常用于日志记录，性能统计，安全控制，事务处理，异常处理等等。</p>
<h2 id="定义AOP术语"><a href="#定义AOP术语" class="headerlink" title="定义AOP术语"></a>定义AOP术语</h2><a id="more"></a>
<p>切面（Aspect）：切面是一个关注点的模块化，这个关注点可能是横切多个对象；</p>
<p>连接点（Join Point）：连接点是指在程序执行过程中某个特定的点，比如某方法调用的时候或者处理异常的时候；</p>
<p>通知（Advice）：指在切面的某个特定的连接点上执行的动作。Spring切面可以应用5中通知：</p>
<ul>
<li>前置通知（Before）:在目标方法或者说连接点被调用前执行的通知；</li>
<li>后置通知（After）：指在某个连接点完成后执行的通知；</li>
<li>返回通知（After-returning）：指在某个连接点成功执行之后执行的通知；</li>
<li>异常通知（After-throwing）：指在方法抛出异常后执行的通知；</li>
<li>环绕通知（Around）：指包围一个连接点通知，在被通知的方法调用之前和之后执行自定义的方法。</li>
</ul>
<p>切点（Pointcut）：指匹配连接点的断言。通知与一个切入点表达式关联，并在满足这个切入的连接点上运行，例如：当执行某个特定的名称的方法。</p>
<p>引入（Introduction）：引入也被称为内部类型声明，声明额外的方法或者某个类型的字段。</p>
<p>目标对象（Target Object）：目标对象是被一个或者多个切面所通知的对象。</p>
<p>AOP代理（AOP Proxy）：AOP代理是指AOP框架创建的对对象，用来实现切面契约（包括通知方法等功能）</p>
<p>织入（Wearving）：指把切面连接到其他应用出程序类型或者对象上，并创建一个被通知的对象。或者说形成代理对象的方法的过程。</p>
<p><img src="http://i.imgur.com/NNwG4Yz.png" alt=""></p>
<h2 id="Spring对AOP的支持"><a href="#Spring对AOP的支持" class="headerlink" title="Spring对AOP的支持"></a>Spring对AOP的支持</h2><ol>
<li>基于代理的经典SpringAOP；</li>
<li>纯POJO切面；</li>
<li>@AspectJ注解驱动的切面；</li>
<li>注入式AspectJ切面（适用于Spring各版本）；</li>
</ol>
<p>前三种都是SpringAOP实现的变体，SpringAOP构建在动态代理基础之上，因此，Spring对AOP的支持局限于方法的拦截。</p>
<h2 id="切入点表达式"><a href="#切入点表达式" class="headerlink" title="切入点表达式"></a>切入点表达式</h2><p><img src="http://i.imgur.com/z8MbDIP.png" alt=""></p>
<h2 id="使用SpringAOP"><a href="#使用SpringAOP" class="headerlink" title="使用SpringAOP"></a>使用SpringAOP</h2><p>SpringAOP的支持必须呀导入spring-aspects的jar包<br><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&lt;dependency&gt;</div><div class="line">    &lt;groupId&gt;org.springframework&lt;/groupId&gt;</div><div class="line">    &lt;artifactId&gt;spring-aspects&lt;/artifactId&gt;</div><div class="line">    &lt;version&gt;4.3.5.RELEASE&lt;/version&gt;</div><div class="line">&lt;/dependency&gt;</div></pre></td></tr></table></figure></p>
<h3 id="使用注解定义切面"><a href="#使用注解定义切面" class="headerlink" title="使用注解定义切面"></a>使用注解定义切面</h3><p>采用注解的方式定义切面以及通知</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Aspect</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Audience</span> </span>&#123;</div><div class="line">    <span class="comment">//使用@Pointcut注解声明频繁使用的切入点表达式</span></div><div class="line">    <span class="meta">@Pointcut</span>(<span class="string">"execution(* com.wqh.concert.Performance.perform(..))"</span>)</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">performance</span><span class="params">()</span></span>&#123;&#125;</div><div class="line">    </div><div class="line">    <span class="meta">@Before</span>(<span class="string">"performance()"</span>)</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">silenceCellPhones</span><span class="params">()</span></span>&#123;</div><div class="line">        System.out.println(<span class="string">"Sillencing cell phones"</span>);</div><div class="line">    &#125;</div><div class="line">    <span class="meta">@Before</span>(<span class="string">"performance()"</span>)</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">takeSeats</span><span class="params">()</span></span>&#123;</div><div class="line">        System.out.println(<span class="string">"Task Seat"</span>);</div><div class="line">    &#125;</div><div class="line">    <span class="meta">@AfterReturning</span>(<span class="string">"performance()"</span>)</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">applause</span><span class="params">()</span></span>&#123;</div><div class="line">        System.out.println(<span class="string">"CLAP CLAP CLAP"</span>);</div><div class="line">    &#125;</div><div class="line">    <span class="meta">@AfterThrowing</span>(<span class="string">"performance()"</span>)</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">demandRefund</span><span class="params">()</span></span>&#123;</div><div class="line">        System.out.println(<span class="string">"Demand a Refund"</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>另外需要在applicationContext.xml也就是spring的配置文件中添加配置：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&lt;!--启用AspectJ的自动代理--&gt;</div><div class="line">&lt;aop:aspectj-autoproxy/&gt;</div><div class="line">&lt;!--声明bean--&gt;</div><div class="line">&lt;bean <span class="class"><span class="keyword">class</span></span>=<span class="string">"com.wqh.concert.Audience"</span>/&gt;</div></pre></td></tr></table></figure>
<h3 id="在XML中声明切面"><a href="#在XML中声明切面" class="headerlink" title="在XML中声明切面"></a>在XML中声明切面</h3><p>定义pojo类，这里只是把上面定义的注解全public class AudienceXML {<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">silenceCellPhones</span><span class="params">()</span> </span>&#123;</div><div class="line">    System.out.println(<span class="string">"Sillencing cell phones"</span>);</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">takeSeats</span><span class="params">()</span> </span>&#123;</div><div class="line">    System.out.println(<span class="string">"Task Seat"</span>);</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">applause</span><span class="params">()</span> </span>&#123;</div><div class="line">    System.out.println(<span class="string">"CLAP CLAP CLAP"</span>);</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">demandRefund</span><span class="params">()</span> </span>&#123;</div><div class="line">    System.out.println(<span class="string">"Demand a Refund"</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>applicationContext.xml配置<br><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">&lt;!--声明bean--&gt;</div><div class="line">&lt;bean name=<span class="string">"audienceXML"</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">"com.wqh.concert.AudienceXML"</span>/&gt;</div><div class="line">&lt;aop:config&gt;</div><div class="line">    &lt;!--引入bean--&gt;</div><div class="line">    &lt;aop:aspect ref=<span class="string">"audienceXML"</span>&gt;</div><div class="line">        &lt;!--定义切点--&gt;</div><div class="line">        &lt;aop:pointcut id=<span class="string">"perform"</span></div><div class="line">                      expression=<span class="string">"execution(* com.wqh.concert.Performance.perform(..))"</span>/&gt;</div><div class="line">        &lt;!--定义通知</div><div class="line">            method：通知，也就是具体的方法</div><div class="line">            pointcut-ref：引用的切点</div><div class="line">            pointcut：切点--&gt;</div><div class="line">        &lt;aop:before method=<span class="string">"silenceCellPhones"</span></div><div class="line">                    pointcut-ref=<span class="string">"perform"</span>/&gt;</div><div class="line"></div><div class="line">        &lt;aop:before method=<span class="string">"takeSeats"</span> pointcut-ref=<span class="string">"perform"</span>/&gt;</div><div class="line">        &lt;aop:after-returning method=<span class="string">"applause"</span> pointcut-ref=<span class="string">"perform"</span>/&gt;</div><div class="line"></div><div class="line">        &lt;aop:after-throwing method=<span class="string">"demandRefund"</span></div><div class="line">                            pointcut=<span class="string">"execution(* com.wqh.concert.Performance.perform(..))"</span>/&gt;</div><div class="line">    &lt;/aop:aspect&gt;</div><div class="line">&lt;/aop:config&gt;</div></pre></td></tr></table></figure></p>
<p><img src="http://i.imgur.com/uGg9KUl.png" alt=""></p>
<h2 id="环绕通知"><a href="#环绕通知" class="headerlink" title="环绕通知"></a>环绕通知</h2><p>在springAOP中有五种通知，环绕通知是最为强大的通知。它能够让你编写的逻辑将被通知的目标方法完全包装起来。实际上就像在一个通知方法中同时编写前置通知和后置通知。<br>本片文章具体讲解环绕通知的使用。</p>
<h3 id="使用注解"><a href="#使用注解" class="headerlink" title="使用注解"></a>使用注解</h3><p>使用环绕通知定义切面：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Aspect</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AudienceAround</span> </span>&#123;</div><div class="line">    <span class="comment">//使用@Pointcut注解声明频繁使用的切入点表达式</span></div><div class="line">    <span class="meta">@Pointcut</span>(<span class="string">"execution(* com.wqh.concert.Performance.perform(..))"</span>)</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">performance</span><span class="params">()</span></span>&#123;&#125;</div><div class="line"></div><div class="line">    <span class="meta">@Around</span>(<span class="string">"performance()"</span>)</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">watchPerformance</span><span class="params">(ProceedingJoinPoint joinPoint)</span></span>&#123;</div><div class="line"></div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            System.out.println(<span class="string">"Silencing cell phones"</span>);</div><div class="line">            System.out.println(<span class="string">"Taking seats"</span>);</div><div class="line">            joinPoint.proceed();</div><div class="line">            System.out.println(<span class="string">"Demanding a refund"</span>);</div><div class="line"></div><div class="line">        &#125; <span class="keyword">catch</span> (Throwable throwable) &#123;</div><div class="line">            throwable.printStackTrace();</div><div class="line">        &#125;</div><div class="line"></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>可以看到在上面的代码中，定义通知的时候在通知方法中添加了入参：ProceedingJoinPoint。在创建环绕通知的时候，这个参数是必须写的。因为在需要在通知中使用ProceedingJoinPoint.proceed()方法调用被通知的方法。</p>
<p>另外，如果忘记调用proceed()方法，那么通知实际上会阻塞对被通知方法的调用。</p>
<h3 id="在XML中定义"><a href="#在XML中定义" class="headerlink" title="在XML中定义"></a>在XML中定义</h3><p>首先去掉上面类的所有注解：这里为了区别就重新创建一个类</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AudienceAroundXML</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">watchPerformance</span><span class="params">(ProceedingJoinPoint joinPoint)</span></span>&#123;</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            System.out.println(<span class="string">"Silencing cell phones"</span>);</div><div class="line">            System.out.println(<span class="string">"Taking seats"</span>);</div><div class="line">            joinPoint.proceed();</div><div class="line">            System.out.println(<span class="string">"Demanding a refund"</span>);</div><div class="line"></div><div class="line">        &#125; <span class="keyword">catch</span> (Throwable throwable) &#123;</div><div class="line">            throwable.printStackTrace();</div><div class="line">        &#125;</div><div class="line"></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>配置：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">&lt;!--声明bean--&gt;</div><div class="line">&lt;bean name=<span class="string">"audienceAroundXML"</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">"com.wqh.concert.AudienceAroundXML"</span>/&gt;</div><div class="line">	&lt;!--配置切面及通知--&gt;</div><div class="line">&lt;aop:config&gt;</div><div class="line">    &lt;aop:aspect ref=<span class="string">"audienceAroundXML"</span>&gt;</div><div class="line">        &lt;aop:pointcut id=<span class="string">"performance"</span></div><div class="line">                      expression=<span class="string">"execution(* com.wqh.concert.Performance.perform(..))"</span>/&gt;</div><div class="line">        &lt;aop:around method=<span class="string">"watchPerformance"</span> pointcut-ref=<span class="string">"performance"</span>/&gt;</div><div class="line">    &lt;/aop:aspect&gt;</div><div class="line">&lt;/aop:config&gt;</div></pre></td></tr></table></figure>
<h2 id="处理通知中的参数"><a href="#处理通知中的参数" class="headerlink" title="处理通知中的参数"></a>处理通知中的参数</h2><h3 id="Spring借助AspectJ的切点表达式语言来定义Spring切面"><a href="#Spring借助AspectJ的切点表达式语言来定义Spring切面" class="headerlink" title="Spring借助AspectJ的切点表达式语言来定义Spring切面"></a>Spring借助AspectJ的切点表达式语言来定义Spring切面</h3><p><img src="http://i.imgur.com/fXL2qhm.png" alt=""></p>
<p>在spring中尝试使用其他指示器时，会抛出IllegalArgument-Exception异常。</p>
<p>如上的这些指示器，只有exception指示器是实际执行匹配的，而其他都是用来限制匹配的。</p>
<h3 id="切面表达式分析"><a href="#切面表达式分析" class="headerlink" title="切面表达式分析"></a>切面表达式分析</h3><p>带参数的切点表达式分解</p>
<p><img src="http://i.imgur.com/1QRixjd.png" alt=""></p>
<p>在该切点表达式中使用了args(trackNumber)限定符。表示传递给playTrack()方法的int类型参数也会传递到通知中去。参数名trackNumber也与切点方法签名中的参数相匹配。</p>
<h3 id="创建切面"><a href="#创建切面" class="headerlink" title="创建切面"></a>创建切面</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Aspect</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TrackCounter</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="meta">@Pointcut</span>(<span class="string">"execution(* com.wqh.aop.CompactDisc.playTrack(int))&amp;&amp;args(trackNumber)"</span>)</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">trackPlayder</span><span class="params">(<span class="keyword">int</span> trackNumber)</span></span>&#123;&#125;</div><div class="line"></div><div class="line">    <span class="meta">@Before</span>(<span class="string">"trackPlayder(trackNumber)"</span>)</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">countTrack</span><span class="params">(<span class="keyword">int</span> trackNumber)</span> </span>&#123;</div><div class="line">        System.out.println(<span class="string">"前置通知:targetNumber="</span> + trackNumber);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="连接点类"><a href="#连接点类" class="headerlink" title="连接点类"></a>连接点类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Service</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CompactDisc</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">playTrack</span><span class="params">(<span class="keyword">int</span> trackNumber)</span></span>&#123;</div><div class="line">        System.out.println(<span class="string">"trackNumber ="</span> + trackNumber);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="XML配置"><a href="#XML配置" class="headerlink" title="XML配置"></a>XML配置</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">&lt;!--启用AspectJ的自动代理--&gt;</div><div class="line">&lt;aop:aspectj-autoproxy/&gt;</div><div class="line"></div><div class="line">&lt;!--声明bean--&gt;</div><div class="line">	&lt;bean <span class="class"><span class="keyword">class</span></span>=<span class="string">"com.wqh.aop.TrackCounter"</span>/&gt;</div><div class="line">	&lt;!--自动扫描包下的类--&gt;</div><div class="line">&lt;context:component-scan base-<span class="keyword">package</span>=<span class="string">"com.wqh.aop"</span>/&gt;</div></pre></td></tr></table></figure>
<h3 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Test</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testT</span><span class="params">()</span></span>&#123;</div><div class="line">    ApplicationContext applicationContext =</div><div class="line">            <span class="keyword">new</span> ClassPathXmlApplicationContext(</div><div class="line">                    <span class="keyword">new</span> String[]&#123;<span class="string">"classpath:/spring/applicationContext.xml"</span>&#125;);</div><div class="line">    CompactDisc compactDisc = (CompactDisc) applicationContext.getBean(<span class="string">"compactDisc"</span>);</div><div class="line">    compactDisc.playTrack(<span class="number">12</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>上面给指定方法传入的参数是12，在通知中获取到了该参数</p>
<p><img src="http://i.imgur.com/Zrr0oSB.png" alt=""></p>
<p>另外：在xml中配置切面来处理通知中的参数，其实也差不多，只是把切点表达式放到了XML配置文件中。</p>
<h2 id="给类添加新的功能"><a href="#给类添加新的功能" class="headerlink" title="给类添加新的功能"></a>给类添加新的功能</h2><h3 id="引入Spring实战中的知识"><a href="#引入Spring实战中的知识" class="headerlink" title="引入Spring实战中的知识"></a>引入Spring实战中的知识</h3><p>在SpringAOP中，我们可以为Bean引入新的方法。代理拦截器调用并委托给实现该方法的其他对象。<br><img src="http://i.imgur.com/0vLHPrw.png" alt=""></p>
<p>当引入接口的方法被调用时，代理会把此调用委托给实现了新接口的某给其他对象。</p>
<h3 id="使用注解方式引入"><a href="#使用注解方式引入" class="headerlink" title="使用注解方式引入"></a>使用注解方式引入</h3><h4 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h4><p>首先是连接点的接口及其实现类</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Person</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">say</span><span class="params">()</span></span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ChinesePerson</span> <span class="keyword">implements</span> <span class="title">Person</span> </span>&#123;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">say</span><span class="params">()</span> </span>&#123;</div><div class="line">        System.out.println(<span class="string">"说中文"</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>创建需要添加的功能，这里个人类扩展一个吃的功能</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Food</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">eat</span><span class="params">()</span></span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ChineseFood</span> <span class="keyword">implements</span> <span class="title">Food</span> </span>&#123;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">eat</span><span class="params">()</span> </span>&#123;</div><div class="line">        System.out.println(<span class="string">"吃中餐"</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="编写切面"><a href="#编写切面" class="headerlink" title="编写切面"></a>编写切面</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Aspect</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">addFuction</span> </span>&#123;</div><div class="line">    <span class="meta">@DeclareParents</span>(value = <span class="string">"com.wqh.addfunction.Person+"</span>,defaultImpl = ChineseFood.class)</div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Food food;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>注意这里的表达式使用的式@DeclareParents注解；该注解所标注的静态属性指明了要引入的接口。<br>注解中使用的value属性指定哪种类型的bean要引入该接口，这里Person后后面的“+”号表示所有子类型，而不是该类的本身。defaultImpl，指定了为引入功能提供实现的类。</p>
<p>使用XML配置bean：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">&lt;!--启用AspectJ的自动代理--&gt;</div><div class="line">&lt;aop:aspectj-autoproxy/&gt;</div><div class="line"></div><div class="line">&lt;!--声明bean--&gt;</div><div class="line">&lt;bean <span class="class"><span class="keyword">class</span></span>=<span class="string">"com.wqh.addfunction.addFuction"</span>/&gt;</div><div class="line">&lt;bean name=<span class="string">"chinesePerson"</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">"com.wqh.addfunction.ChinesePerson"</span>/&gt;</div></pre></td></tr></table></figure></p>
<h3 id="测试-1"><a href="#测试-1" class="headerlink" title="测试"></a>测试</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Test</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testAdd</span><span class="params">()</span></span>&#123;</div><div class="line">    ApplicationContext applicationContext = <span class="keyword">new</span> ClassPathXmlApplicationContext(</div><div class="line">            <span class="string">"classpath:spring/applicationContext.xml"</span>);</div><div class="line">    Person person = (Person) applicationContext.getBean(<span class="string">"chinesePerson"</span>);</div><div class="line">    person.say();</div><div class="line">    <span class="comment">//这里可以将chinesePerson bean转换为Food类，所以添加成功</span></div><div class="line">    Food food = (Food) applicationContext.getBean(<span class="string">"chinesePerson"</span>);</div><div class="line">    food.eat();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><img src="http://i.imgur.com/znG9krq.png" alt=""></p>
<h3 id="在XML中引入"><a href="#在XML中引入" class="headerlink" title="在XML中引入"></a>在XML中引入</h3><p>首先将上面的addFuction注解全部删除，其他不变；然后在xml中添加相应的配置：<br><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">&lt;!--启用AspectJ的自动代理--&gt;</div><div class="line">&lt;aop:aspectj-autoproxy/&gt;</div><div class="line">&lt;!--声明bean--&gt;</div><div class="line">&lt;bean name=<span class="string">"chinesePerson"</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">"com.wqh.addfunction.ChinesePerson"</span>/&gt;</div><div class="line"></div><div class="line"> &lt;aop:config&gt;</div><div class="line">     &lt;aop:aspect&gt;</div><div class="line">         &lt;aop:declare-parents types-matching=<span class="string">"com.wqh.addfunction.Person+"</span></div><div class="line">                              implement-<span class="class"><span class="keyword">interface</span></span>=<span class="string">"com.wqh.addfunction.Food"</span></div><div class="line">         <span class="keyword">default</span>-impl=<span class="string">"com.wqh.addfunction.ChineseFood"</span>/&gt;</div><div class="line">     &lt;/aop:aspect&gt;</div><div class="line"> &lt;/aop:config&gt;</div></pre></td></tr></table></figure></p>
<p>这里的types-matching与上面的vale作用一样;<br><br>default-impl与defaultImpl作用一样，这也可以使用delegate-ref；当然如果使用delegate-ref则是要引用SpringBean；<br><br>implement-interface则是要引入的接口</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;什么是AOP&quot;&gt;&lt;a href=&quot;#什么是AOP&quot; class=&quot;headerlink&quot; title=&quot;什么是AOP&quot;&gt;&lt;/a&gt;什么是AOP&lt;/h2&gt;&lt;p&gt;AOP（Aspect Oriented Programming 面向切面编程），通过预编译方式和运行期动态代理实现程序功能的统一维护的一种技术。AOP是OOP的延续，是软件开发中的一个热点，也是Spring框架中的一个重要内容，是函数式编程的一种衍生范型。利用AOP可以对业务逻辑的各个部分进行隔离，从而使得业务逻辑各部分之间的耦合度降低，提高程序的可重用性，同时提高了开发的效率。&lt;/p&gt;
&lt;p&gt;常用于日志记录，性能统计，安全控制，事务处理，异常处理等等。&lt;/p&gt;
&lt;h2 id=&quot;定义AOP术语&quot;&gt;&lt;a href=&quot;#定义AOP术语&quot; class=&quot;headerlink&quot; title=&quot;定义AOP术语&quot;&gt;&lt;/a&gt;定义AOP术语&lt;/h2&gt;
    
    </summary>
    
      <category term="spring" scheme="http://www.wanqhblog.top/categories/spring/"/>
    
    
      <category term="spring" scheme="http://www.wanqhblog.top/tags/spring/"/>
    
      <category term="AOP" scheme="http://www.wanqhblog.top/tags/AOP/"/>
    
  </entry>
  
  <entry>
    <title>分析ClassLoader工作机制</title>
    <link href="http://www.wanqhblog.top/2017/08/26/classload/"/>
    <id>http://www.wanqhblog.top/2017/08/26/classload/</id>
    <published>2017-08-26T03:54:25.000Z</published>
    <updated>2017-08-26T09:25:30.794Z</updated>
    
    <content type="html"><![CDATA[<p>ClassLoader：类加载器，作用：</p>
<ol>
<li>负责将Class加载到JVM中；</li>
<li>审查每个类应该又谁来加载，是一个父优先的等级加载机制；</li>
<li>将Class字节码重新解析成JVM统一要求的对象格式<h2 id="ClassLoader类结构分析"><a href="#ClassLoader类结构分析" class="headerlink" title="ClassLoader类结构分析"></a>ClassLoader类结构分析</h2><a id="more"></a>
<img src="http://i.imgur.com/R5tC01a.png" alt=""></li>
</ol>
<ul>
<li><p>defineClass：可以将byte字节流解析成JVM能够识别的Class对象，这样我们也可以通过这个字节码直接创建Class对象形式的实例化对象</p>
<p>  api中的介绍<br>  <img src="http://i.imgur.com/bFjiI1f.png" alt=""></p>
</li>
<li>findClass：使用指定的二进制名称查找类，此方法在ClassLoader的实现类中应该被重写，从而取得要加载类的字节码。该方法通常与defineClass一起使用，使用该方法加载字节码之后，然后调用defineClass方法生成类的Class对象。</li>
<li>loadClass：使用指定的二进制名称来加载类，如果只想在运行时能够加载自己指定的一个类，则可以使用this.getClass().getClassLoader().loadClass(“classname”)获取这个类的class对象。<br><img src="http://i.imgur.com/zX6j3RL.png" alt=""></li>
<li>resolveClass：链接指定的类。如果想在类被加载到JVM中时就被链接，则可以使用该方法</li>
</ul>
<p>查看源码可以发现ClassLoader是一个抽象类。如果要实现自己的ClassLoader，一般继承URLClassLoader。另外在ClassLoader中还有一些辅助方法：<br><img src="http://i.imgur.com/vKXgX4K.png" alt=""></p>
<h2 id="ClassLoader的等级加载机制"><a href="#ClassLoader的等级加载机制" class="headerlink" title="ClassLoader的等级加载机制"></a>ClassLoader的等级加载机制</h2><p>整个JVM提供了三层    ClassLoader，可以分为两种类型。</p>
<ol>
<li>BootStrap ClassLoader：启动类加载器。该类仅仅是一个类记载工具，既没有更高一级的父加载器，也没有子加载器。该类加载器并不属于JVM的类等级层次，因为BootStrap ClassLoader并没有遵守ClassLoader的加载规则，所以该加载器并没有子类。</li>
<li>ExtClassLoader：扩展类加载器。该类JVM自身的一部分，如果一个类既不是JVM内部的类，也不用户定义的类，将会由这个类来加载。加载System.getProperty(“java.ext.dirs”)所指定的路径或jar。打印主要加载目录</li>
</ol>
<p><img src="http://i.imgur.com/26dQrro.png" alt=""></p>
<ol>
<li>AppClassLoader：系统类加载器。它是ExtClassLoader的子类。加载System.getProperty(“java.class.path”)所指定的路径或jar，这个目录就是我们常用到的classpath。除了System.getProperty(“java.ext.dirs”)目录下的类由ExtClassLoader加载，其他类都由AppClassLoader加载。</li>
</ol>
<p>类加载器的等级结构图：</p>
<p><img src="http://i.imgur.com/k8Ri1H5.png" alt=""></p>
<p>ClassLoader的类层次结构，参考深入分析JavaWeb技术内幕</p>
<p><img src="http://i.imgur.com/N7lLSTQ.png" alt=""></p>
<h2 id="JVM加载Class文件"><a href="#JVM加载Class文件" class="headerlink" title="JVM加载Class文件"></a>JVM加载Class文件</h2><h3 id="加载方式"><a href="#加载方式" class="headerlink" title="加载方式"></a>加载方式</h3><p>JVM加载class文件到内存有两种方式：</p>
<ul>
<li>显示加载：在代码中通过ClassLoader来加载需要的类。<br>  显示加载类的方式通常有：<ul>
<li>Class.forName();</li>
<li>ClassLoader.loadClass();</li>
<li>ClassLoader.findSystemClass();</li>
</ul>
</li>
<li>隐式加载：JVM自动加载需要的类到内存。<h3 id="如何加载"><a href="#如何加载" class="headerlink" title="如何加载"></a>如何加载</h3>一般有三个阶段：</li>
</ul>
<ol>
<li>将.class文件包含的字节码加载到内存中。</li>
<li>字节码验证、Class类等数据结构的分析以及相应的内存分配和最后符号表的链接。</li>
<li>类中静态属性和初始化赋值，以及静态块的执行。</li>
</ol>
<p><img src="http://i.imgur.com/8Q2U44B.png" alt=""></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;ClassLoader：类加载器，作用：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;负责将Class加载到JVM中；&lt;/li&gt;
&lt;li&gt;审查每个类应该又谁来加载，是一个父优先的等级加载机制；&lt;/li&gt;
&lt;li&gt;将Class字节码重新解析成JVM统一要求的对象格式&lt;h2 id=&quot;ClassLoader类结构分析&quot;&gt;&lt;a href=&quot;#ClassLoader类结构分析&quot; class=&quot;headerlink&quot; title=&quot;ClassLoader类结构分析&quot;&gt;&lt;/a&gt;ClassLoader类结构分析&lt;/h2&gt;
    
    </summary>
    
      <category term="java" scheme="http://www.wanqhblog.top/categories/java/"/>
    
    
      <category term="classloader" scheme="http://www.wanqhblog.top/tags/classloader/"/>
    
      <category term="jvm" scheme="http://www.wanqhblog.top/tags/jvm/"/>
    
  </entry>
  
  <entry>
    <title>WebService之CXF</title>
    <link href="http://www.wanqhblog.top/2017/08/23/cxf/"/>
    <id>http://www.wanqhblog.top/2017/08/23/cxf/</id>
    <published>2017-08-23T03:52:00.000Z</published>
    <updated>2017-08-26T07:27:04.843Z</updated>
    
    <content type="html"><![CDATA[<h2 id="什么是CXF"><a href="#什么是CXF" class="headerlink" title="什么是CXF"></a>什么是CXF</h2><p>Apache CXF = Celtix + XFire，开始叫 Apache CeltiXfire，后来更名为 Apache CXF 了，以下简称为 CXF。CXF 继承了 Celtix 和 XFire 两大开源项目的精华，提供了对 JAX-WS 全面的支持，并且提供了多种 Binding 、DataBinding、Transport 以及各种 Format 的支持，并且可以根据实际项目的需要，采用代码优先（Code First）或者 WSDL 优先（WSDL First）来轻松地实现 Web Services 的发布和使用。Apache CXF已经是一个正式的Apache顶级项目。</p>
<a id="more"></a>
<h2 id="CXF与Spring整合"><a href="#CXF与Spring整合" class="headerlink" title="CXF与Spring整合"></a>CXF与Spring整合</h2><h3 id="需求"><a href="#需求" class="headerlink" title="需求"></a>需求</h3><p>CXF与spring整合，实现手机号码归属地查询。所以这里我们需要调用公网的号码归属地查询。</p>
<h3 id="导入公网的接口"><a href="#导入公网的接口" class="headerlink" title="导入公网的接口"></a>导入公网的接口</h3><p>公网地址：<a href="http://www.webxml.com.cn/zh_cn/index.aspx" target="_blank" rel="external">http://www.webxml.com.cn/zh_cn/index.aspx</a><br>手机号码归属地查询WSDL：<a href="http://ws.webxml.com.cn/WebServices/MobileCodeWS.asmx?wsdl" target="_blank" rel="external">http://ws.webxml.com.cn/WebServices/MobileCodeWS.asmx?wsdl</a></p>
<p>在CMD中输入命令：wsimport -s . <a href="http://ws.webxml.com.cn/WebServices/MobileCodeWS.asmx?wsdl生成公网的调用代码，将代码复制到工程中" target="_blank" rel="external">http://ws.webxml.com.cn/WebServices/MobileCodeWS.asmx?wsdl生成公网的调用代码，将代码复制到工程中</a></p>
<h3 id="添加依赖"><a href="#添加依赖" class="headerlink" title="添加依赖"></a>添加依赖</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.cxf<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>cxf-rt-frontend-jaxws<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;cxf.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.cxf<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>cxf-rt-frontend-jaxrs<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;cxf.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.cxf<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>cxf-rt-transports-http<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;cxf.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.cxf<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>cxf<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;cxf.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-context<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-webmvc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div></pre></td></tr></table></figure>
<h3 id="服务接口"><a href="#服务接口" class="headerlink" title="服务接口"></a>服务接口</h3><p>这里与jaxws不同的是只要在服务接口类上添加@WebService注解既可<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment"> * 基于jaxws开发的SEI</span></div><div class="line"><span class="comment"> * 天气查询接口</span></div><div class="line"><span class="comment"> */</span></div><div class="line"><span class="meta">@WebService</span>(targetNamespace = <span class="string">"http://service.wqh.com"</span>,</div><div class="line">name = <span class="string">"PhoneQueryInterface"</span>,</div><div class="line">portName = <span class="string">"PhoneQueryInterfacePort"</span>,</div><div class="line">serviceName = <span class="string">"PhoneQueryInterfaceService"</span>)</div><div class="line"><span class="meta">@BindingType</span>(javax.xml.ws.soap.SOAPBinding.SOAP12HTTP_BINDING)<span class="comment">//发布soap1.2</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">PhoneQueryInterface</span> </span>&#123;</div><div class="line">    <span class="function">String <span class="title">getMobileCodeInfo</span> <span class="params">(String mobileCode)</span></span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="接口实现类"><a href="#接口实现类" class="headerlink" title="接口实现类"></a>接口实现类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PhoneQueryInterfaceImpl</span> <span class="keyword">implements</span> <span class="title">PhoneQueryInterface</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="comment">/*公网的号码归属地查询对象*/</span></div><div class="line">    <span class="keyword">private</span> MobileCodeWSSoap mobileCodeWSSoap;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getMobileCodeInfo</span><span class="params">(String mobileCode)</span> </span>&#123;</div><div class="line">        String codeInfo = mobileCodeWSSoap.getMobileCodeInfo(mobileCode, <span class="keyword">null</span>);</div><div class="line">        <span class="keyword">return</span> codeInfo;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> MobileCodeWSSoap <span class="title">getMobileCodeWSSoap</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> mobileCodeWSSoap;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setMobileCodeWSSoap</span><span class="params">(MobileCodeWSSoap mobileCodeWSSoap)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.mobileCodeWSSoap = mobileCodeWSSoap;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="添加配置信息"><a href="#添加配置信息" class="headerlink" title="添加配置信息"></a>添加配置信息</h3><p>applicationContext.xml：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">&lt;!-- 配置发布webservice服务 --&gt;</div><div class="line">&lt;jaxws:server address=<span class="string">"/mobil"</span> serviceClass=<span class="string">"com.wqh.cxf.service.PhoneQueryInterface"</span>&gt;</div><div class="line">    &lt;jaxws:serviceBean&gt;</div><div class="line">        &lt;ref bean="phoneQuery"&gt;&lt;/ref&gt;</div><div class="line">    &lt;/jaxws:serviceBean&gt;</div><div class="line">&lt;/jaxws:server&gt;</div><div class="line">&lt;!--</div><div class="line">配置公网号码归属地查询的客户端</div><div class="line">address：公网归属地的地址</div><div class="line">--&gt;</div><div class="line">&lt;jaxws:client id=<span class="string">"mobileCodeWSSoap"</span> serviceClass=<span class="string">"cn.com.webxml.MobileCodeWSSoap"</span></div><div class="line">              address=<span class="string">"http://ws.webxml.com.cn/WebServices/MobileCodeWS.asmx"</span>/&gt;</div><div class="line">&lt;!--归属地查询的bean--&gt;</div><div class="line">&lt;bean id=<span class="string">"phoneQuery"</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">"com.wqh.cxf.service.PhoneQueryInterfaceImpl"</span>&gt;</div><div class="line">    &lt;property name=<span class="string">"mobileCodeWSSoap"</span> ref=<span class="string">"mobileCodeWSSoap"</span>&gt;</div><div class="line">    &lt;/property&gt;</div><div class="line">&lt;/bean&gt;</div></pre></td></tr></table></figure>
<p>web.xml</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">&lt;!-- 加载spring容器 --&gt;</div><div class="line">&lt;context-param&gt;</div><div class="line">    &lt;param-name&gt;contextConfigLocation&lt;/param-name&gt;</div><div class="line">    &lt;param-value&gt;classpath:applicationContext.xml&lt;/param-value&gt;</div><div class="line">&lt;/context-param&gt;</div><div class="line">&lt;listener&gt;</div><div class="line">    &lt;listener-<span class="class"><span class="keyword">class</span>&gt;<span class="title">org</span>.<span class="title">springframework</span>.<span class="title">web</span>.<span class="title">context</span>.<span class="title">ContextLoaderListener</span>&lt;/<span class="title">listener</span>-<span class="title">class</span>&gt;</span></div><div class="line"><span class="class">&lt;/<span class="title">listener</span>&gt;</span></div><div class="line"><span class="class">&lt;<span class="title">servlet</span>&gt;</span></div><div class="line"><span class="class">    &lt;<span class="title">description</span>&gt;<span class="title">Apache</span> <span class="title">CXF</span> <span class="title">Endpoint</span>&lt;/<span class="title">description</span>&gt;</span></div><div class="line"><span class="class">    &lt;<span class="title">display</span>-<span class="title">name</span>&gt;<span class="title">cxf</span>&lt;/<span class="title">display</span>-<span class="title">name</span>&gt;</span></div><div class="line"><span class="class">    &lt;<span class="title">servlet</span>-<span class="title">name</span>&gt;<span class="title">cxf</span>&lt;/<span class="title">servlet</span>-<span class="title">name</span>&gt;</span></div><div class="line"><span class="class">    &lt;<span class="title">servlet</span>-<span class="title">class</span>&gt;<span class="title">org</span>.<span class="title">apache</span>.<span class="title">cxf</span>.<span class="title">transport</span>.<span class="title">servlet</span>.<span class="title">CXFServlet</span>&lt;/<span class="title">servlet</span>-<span class="title">class</span>&gt;</span></div><div class="line"><span class="class">    &lt;<span class="title">load</span>-<span class="title">on</span>-<span class="title">startup</span>&gt;1&lt;/<span class="title">load</span>-<span class="title">on</span>-<span class="title">startup</span>&gt;</span></div><div class="line"><span class="class">&lt;/<span class="title">servlet</span>&gt;</span></div><div class="line"><span class="class">&lt;<span class="title">servlet</span>-<span class="title">mapping</span>&gt;</span></div><div class="line"><span class="class">    &lt;<span class="title">servlet</span>-<span class="title">name</span>&gt;<span class="title">cxf</span>&lt;/<span class="title">servlet</span>-<span class="title">name</span>&gt;</span></div><div class="line"><span class="class">    &lt;<span class="title">url</span>-<span class="title">pattern</span>&gt;/<span class="title">ws</span>/*&lt;/<span class="title">url</span>-<span class="title">pattern</span>&gt;</span></div><div class="line"><span class="class">&lt;/<span class="title">servlet</span>-<span class="title">mapping</span>&gt;</span></div></pre></td></tr></table></figure>
<p>启动服务器</p>
<h3 id="查看wsdl"><a href="#查看wsdl" class="headerlink" title="查看wsdl"></a>查看wsdl</h3><p>在浏览器地址栏输入：<br><a href="http://127.0.0.1:8080/｛项目名｝/ws/mobil?wsdl" target="_blank" rel="external">http://127.0.0.1:8080/｛项目名｝/ws/mobil?wsdl</a></p>
<h3 id="编写客户端"><a href="#编写客户端" class="headerlink" title="编写客户端"></a>编写客户端</h3><p>这里客户端可以使用前面介绍的wsimiport命令，也可以使用wsdl2java命令。如果使用wsdl2java命令需要在系统中添加cxf的环境变量。</p>
<p>下载CXF <a href="http://cxf.apache.org/download.html" target="_blank" rel="external">http://cxf.apache.org/download.html</a></p>
<p>解压下载的文件，将bin目录添加到环境变量中。<br>然后使用命令：wsdl2java –d . –frontend jaxws21 <a href="http://127.0.0.1:8080/｛项目名｝/ws/mobil?wsdl" target="_blank" rel="external">http://127.0.0.1:8080/｛项目名｝/ws/mobil?wsdl</a></p>
<p>注意：这里加上了–frontend jaxws21。原因是因为：cxf需要JAX-WS API 2.2而jdk6的jax-ws是2.1 版本，需要wsdl2java 使用“-frontend jaxws21”</p>
<p>代码与jaxws方式一样</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//创建服务视图</span></div><div class="line">PhoneQueryInterfaceService phoneQueryInterfaceService = <span class="keyword">new</span> PhoneQueryInterfaceService();</div><div class="line"><span class="comment">//通过服务视图得到服务端点</span></div><div class="line">PhoneQueryInterface phoneQueryInterfaceServicePort = phoneQueryInterfaceService.getPort(PhoneQueryInterface.class);</div><div class="line"><span class="comment">//调用webservice服务方法</span></div><div class="line">String result1 = phoneQueryInterfaceServicePort.getMobileCodeInfo(<span class="string">"号码"</span>);</div><div class="line">System.out.println(result1);</div></pre></td></tr></table></figure>
<h2 id="CXF实现rest服务"><a href="#CXF实现rest服务" class="headerlink" title="CXF实现rest服务"></a>CXF实现rest服务</h2><h3 id="什么是rest服务"><a href="#什么是rest服务" class="headerlink" title="什么是rest服务"></a>什么是rest服务</h3><p>REST 是一种软件架构模式，只是一种风格，rest服务采用HTTP 做传输协议，REST 对于HTTP 的利用分为以下两种：资源定位和资源操作。</p>
<ul>
<li><p>资源定位：</p>
<blockquote>
<p>Rest要求对资源定位更加准确，如下：<br>非rest方式：<a href="http://ip:port/queryUser.action?userType=student&amp;id=001" target="_blank" rel="external">http://ip:port/queryUser.action?userType=student&amp;id=001</a><br>Rest方式：<a href="http://ip:port/user/student/001" target="_blank" rel="external">http://ip:port/user/student/001</a><br>Rest方式表示互联网上的资源更加准确，但是也有缺点，可能目录的层级较多不容易理解。</p>
</blockquote>
</li>
<li><p>资源操作：</p>
<blockquote>
<p>利用HTTP 的GET、POST、PUT、DELETE 四种操作来表示数据库操作的SELECT、UPDATE、INSERT、DELETE 操作。<br>比如：<br>查询学生方法：<br>设置Http的请求方法为GET，url如下：<a href="http://ip:port/user/student/001" target="_blank" rel="external">http://ip:port/user/student/001</a><br>添加学生方法：<br>设置http的请求方法为PUT，url如下：<a href="http://ip:port/user/student/001/张三/" target="_blank" rel="external">http://ip:port/user/student/001/张三/</a>……</p>
</blockquote>
</li>
</ul>
<p>Rest常用于资源定位，资源操作方式较少使用。</p>
<p>REST 是一种软件架构理念，现在被移植到Web 服务上，那么在开发Web 服务上，偏于面向资源的服务适用于REST，REST 简单易用，效率高，SOAP 成熟度较高，安全性较好。<br>注意：REST 不等于WebService，JAX-RS 只是将REST 设计风格应用到Web 服务开发上。<br>参考：<a href="http://www.ruanyifeng.com/blog/2011/09/restful" title="理解RESTful架构" target="_blank" rel="external">理解RESTful架构</a></p>
<h3 id="rest服务发布"><a href="#rest服务发布" class="headerlink" title="rest服务发布"></a>rest服务发布</h3><h4 id="需求-1"><a href="#需求-1" class="headerlink" title="需求"></a>需求</h4><p>发布查询学生信息的服务，返回的数据格式为json和xml</p>
<h4 id="服务接口-1"><a href="#服务接口-1" class="headerlink" title="服务接口"></a>服务接口</h4><p>pojo：在pojo类上使用@XmlRootElement注解，是该类对象可以装换成xml<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@XmlRootElement</span>(name = <span class="string">"student"</span>)</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Student</span> </span>&#123;</div><div class="line"></div><div class="line">	<span class="keyword">private</span> <span class="keyword">long</span> id;</div><div class="line">	<span class="keyword">private</span> String name;</div><div class="line">	<span class="keyword">private</span> Date birthday;</div><div class="line">	<span class="comment">//getset</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>服务类接口：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@WebService</span></div><div class="line"><span class="meta">@Path</span>(<span class="string">"/student"</span>)</div><div class="line"><span class="meta">@BindingType</span>(javax.xml.ws.soap.SOAPBinding.SOAP12HTTP_BINDING)<span class="comment">//发布soap1.2</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">StudentService</span> </span>&#123;</div><div class="line">	</div><div class="line">	<span class="comment">//查询学生信息</span></div><div class="line">	<span class="meta">@GET</span> <span class="comment">//http的get方法</span></div><div class="line">	<span class="meta">@Path</span>(<span class="string">"/query/&#123;id&#125;"</span>)<span class="comment">//id参数通过url传递</span></div><div class="line">	<span class="meta">@Produces</span>(MediaType.APPLICATION_XML)<span class="comment">//设置媒体类型xml格式</span></div><div class="line">    <span class="function">Student <span class="title">queryStudent</span><span class="params">(@PathParam(<span class="string">"id"</span>)</span><span class="keyword">long</span> id)</span>;</div><div class="line">	</div><div class="line">	</div><div class="line">	<span class="comment">//查询学生列表</span></div><div class="line">	<span class="meta">@GET</span> <span class="comment">//http的get方法</span></div><div class="line">	<span class="meta">@Path</span>(<span class="string">"/querylist/&#123;type&#125;"</span>)</div><div class="line">	<span class="meta">@Produces</span>(&#123;<span class="string">"application/json;charset=utf-8"</span>,MediaType.APPLICATION_XML&#125;)<span class="comment">//设置媒体类型xml格式和json格式</span></div><div class="line">	<span class="comment">//如果想让rest返回xml需要在rest的url后边添加?_type=xml，默认为xml</span></div><div class="line">	<span class="comment">//如果想让rest返回json需要在rest的url后边添加?_type=json</span></div><div class="line">	<span class="function">List&lt;Student&gt; <span class="title">queryStudentList</span><span class="params">(@PathParam(<span class="string">"type"</span>)</span> String type)</span>;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>接口实现类：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StudentServiceImpl</span> <span class="keyword">implements</span> <span class="title">StudentService</span> </span>&#123;</div><div class="line"></div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">public</span> Student <span class="title">queryStudent</span><span class="params">(<span class="keyword">long</span> id)</span> </span>&#123;</div><div class="line">		<span class="comment">// 使用静态数据</span></div><div class="line">		Student student = <span class="keyword">new</span> Student();</div><div class="line">		student.setId(id);</div><div class="line">		student.setName(<span class="string">"张三"</span>);</div><div class="line">		student.setBirthday(<span class="keyword">new</span> Date());</div><div class="line">		<span class="keyword">return</span> student;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">public</span> List&lt;Student&gt; <span class="title">queryStudentList</span><span class="params">(String type)</span> </span>&#123;</div><div class="line">		List&lt;Student&gt; list = <span class="keyword">new</span> ArrayList&lt;Student&gt;();</div><div class="line">		Student student1 = <span class="keyword">new</span> Student();</div><div class="line">		student1.setId(<span class="number">1234</span>);</div><div class="line">		student1.setName(<span class="string">"张三"</span>);</div><div class="line">		student1.setBirthday(<span class="keyword">new</span> Date());</div><div class="line">        </div><div class="line">		Student student2 = <span class="keyword">new</span> Student();</div><div class="line">        student2.setId(<span class="number">2345</span>);</div><div class="line">        student2.setName(<span class="string">"李四"</span>);</div><div class="line">        student2.setBirthday(<span class="keyword">new</span> Date());</div><div class="line"></div><div class="line"></div><div class="line">        Student student3 = <span class="keyword">new</span> Student();</div><div class="line">        student3.setId(<span class="number">3456</span>);</div><div class="line">        student3.setName(<span class="string">"王五"</span>);</div><div class="line">        student3.setBirthday(<span class="keyword">new</span> Date());</div><div class="line"></div><div class="line">        list.add(student1);</div><div class="line">		list.add(student2);</div><div class="line">		list.add(student3);</div><div class="line">		<span class="keyword">return</span> list;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="发布服务"><a href="#发布服务" class="headerlink" title="发布服务"></a>发布服务</h4><p>1、使用java代码发布，如果直接使用程序发布，需要导入cxf.jaxrsde<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//使用jaxrsServerFactoryBean发布rest服务</span></div><div class="line">JAXRSServerFactoryBean jaxrsServerFactoryBean = <span class="keyword">new</span> JAXRSServerFactoryBean();</div><div class="line"><span class="comment">//设置rest的服务地址</span></div><div class="line">jaxrsServerFactoryBean.setAddress(<span class="string">"http://127.0.0.1:12345/rest"</span>);</div><div class="line"><span class="comment">//设置服务对象</span></div><div class="line">jaxrsServerFactoryBean.setServiceBean(<span class="keyword">new</span> StudentServiceImpl());</div><div class="line"><span class="comment">//设置资源 对象，如果有多个pojo资源 对象中间以半角逗号隔开</span></div><div class="line">jaxrsServerFactoryBean.setResourceClasses(StudentServiceImpl.class);</div><div class="line"><span class="comment">//发布rest服务</span></div><div class="line">jaxrsServerFactoryBean.create();</div></pre></td></tr></table></figure></p>
<p>2、整合spring发布，在applicationContext.xml中配置<br><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">&lt;!-- service --&gt;</div><div class="line">&lt;bean id=<span class="string">"studentService"</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">"com.wqh.ws.cxf.rest.service.StudentServiceImpl"</span>/&gt;</div><div class="line"></div><div class="line">&lt;!-- 发布rest服务</div><div class="line">使用jaxws:server和jaxws:endpoint可以发布服务</div><div class="line">webservice地址=tomcat地址+cxf servlet的路径+/rest</div><div class="line"></div><div class="line">这里与之前不同的是，不需要添加serviceClass</div><div class="line"> --&gt;</div><div class="line">&lt;jaxrs:server address=<span class="string">"/rest"</span>&gt;</div><div class="line">	&lt;jaxrs:serviceBeans&gt;</div><div class="line">	   &lt;ref bean=<span class="string">"studentService"</span>/&gt;</div><div class="line">	&lt;/jaxrs:serviceBeans&gt;</div><div class="line">&lt;/jaxrs:server&gt;</div></pre></td></tr></table></figure></p>
<p>这里rest服务是生成wadl说明文档，查看wadl在地址栏输入：<a href="http://localhost:8080/webcxf/ws/rest?_wadl" target="_blank" rel="external">http://localhost:8080/webcxf/ws/rest?_wadl</a><br><img src="http://i.imgur.com/JOt5ubZ.png" alt=""><br>这里能看到一些发布的信息，然后在地址栏中请求发布的服务：<br><a href="http://localhost:8080/webcxf/ws/rest/student/query/1323" target="_blank" rel="external">http://localhost:8080/webcxf/ws/rest/student/query/1323</a></p>
<p><img src="http://i.imgur.com/tLQzzPQ.png" alt=""></p>
<p>查看json格式数据：_type指定要返回的数据格式<br><a href="http://localhost:8080/webcxf/ws/rest/student/querylist/1323?_type=json" target="_blank" rel="external">http://localhost:8080/webcxf/ws/rest/student/querylist/1323?_type=json</a></p>
<p><img src="http://i.imgur.com/HGBkyCK.png" alt=""></p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>WebService是一个平台独立的，低耦合的，自包含的、基于可编程的web的应用程序。WebService的发也有很多种方式，比如常见的jax-ws和CXF。对于jax-ws开发，感觉比较简单与方便，不需要添加太多的jar依赖；但是有一定的局限性。而对于CXF，jar包依赖太过复杂，使用maven添加需要更加注意。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;什么是CXF&quot;&gt;&lt;a href=&quot;#什么是CXF&quot; class=&quot;headerlink&quot; title=&quot;什么是CXF&quot;&gt;&lt;/a&gt;什么是CXF&lt;/h2&gt;&lt;p&gt;Apache CXF = Celtix + XFire，开始叫 Apache CeltiXfire，后来更名为 Apache CXF 了，以下简称为 CXF。CXF 继承了 Celtix 和 XFire 两大开源项目的精华，提供了对 JAX-WS 全面的支持，并且提供了多种 Binding 、DataBinding、Transport 以及各种 Format 的支持，并且可以根据实际项目的需要，采用代码优先（Code First）或者 WSDL 优先（WSDL First）来轻松地实现 Web Services 的发布和使用。Apache CXF已经是一个正式的Apache顶级项目。&lt;/p&gt;
    
    </summary>
    
    
      <category term="webservice" scheme="http://www.wanqhblog.top/tags/webservice/"/>
    
  </entry>
  
  <entry>
    <title>WebService知识点</title>
    <link href="http://www.wanqhblog.top/2017/08/21/webservice2/"/>
    <id>http://www.wanqhblog.top/2017/08/21/webservice2/</id>
    <published>2017-08-21T06:47:38.000Z</published>
    <updated>2017-08-26T07:24:31.891Z</updated>
    
    <content type="html"><![CDATA[<h2 id="三要素"><a href="#三要素" class="headerlink" title="三要素"></a>三要素</h2><h3 id="SOAP"><a href="#SOAP" class="headerlink" title="SOAP"></a>SOAP</h3><p>SOAP:简单对象访问协议（Simple Object Access Protocal），是一种简单的基于 XML 的协议，它使应用程序通过 HTTP 来交换信息，简单理解为soap=http+xml。Soap协议版本主要使用soap1.1、soap1.2<a id="more"></a></p>
<h4 id="SOAP是什么"><a href="#SOAP是什么" class="headerlink" title="SOAP是什么"></a>SOAP是什么</h4><ul>
<li>SOAP 是一种网络通信协议</li>
<li>SOAP即Simple Object Access Protocol简易对象访问协议</li>
<li>SOAP 用于跨平台应用程序之间的通信</li>
<li>SOAP 被设计用来通过因特网(http)进行通信</li>
<li>SOAP ＝ HTTP+XML，其实就是通过HTTP发xml数据</li>
<li>SOAP 很简单并可扩展支持面向对象</li>
<li>SOAP 允许您跨越防火墙</li>
<li>SOAP 将被作为 W3C 标准来发展</li>
</ul>
<h4 id="SOAP语法格式"><a href="#SOAP语法格式" class="headerlink" title="SOAP语法格式"></a>SOAP语法格式</h4><h5 id="构建模块"><a href="#构建模块" class="headerlink" title="构建模块"></a>构建模块</h5><ul>
<li>必需的Envelope 元素，此元素将整个 XML 文档标识为一条 SOAP 消息</li>
<li>可选的Header 元素，包含头部信息</li>
<li>必需的Body 元素，包含所有的调用和响应信息 </li>
<li>可选的 Fault 元素，提供有关在处理此消息所发生错误的信息</li>
</ul>
<h5 id="语法规则"><a href="#语法规则" class="headerlink" title="语法规则"></a>语法规则</h5><ul>
<li>SOAP 消息必须用 XML 来编码</li>
<li>SOAP 消息必须使用 SOAP Envelope 命名空间</li>
<li>SOAP 消息必须使用 SOAP Encoding 命名空间</li>
<li>SOAP 消息不能包含 DTD 引用</li>
<li>SOAP 消息不能包含 XML 处理指令</li>
</ul>
<h5 id="基本结构"><a href="#基本结构" class="headerlink" title="基本结构"></a>基本结构</h5><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version=<span class="string">"1.0"</span>?&gt;</div><div class="line">&lt;soap:Envelope</div><div class="line">xmlns:soap=<span class="string">"http://www.w3.org/2001/12/soap-envelope"</span></div><div class="line">soap:encodingStyle=<span class="string">"http://www.w3.org/2001/12/soap-encoding"</span>&gt;</div><div class="line"></div><div class="line">&lt;soap:Header&gt;</div><div class="line">...</div><div class="line">&lt;/soap:Header&gt;</div><div class="line"></div><div class="line">&lt;soap:Body&gt;</div><div class="line">...</div><div class="line">  &lt;soap:Fault&gt;</div><div class="line">  ...</div><div class="line">  &lt;/soap:Fault&gt;</div><div class="line">&lt;/soap:Body&gt;</div><div class="line"></div><div class="line">&lt;/soap:Envelope&gt;</div></pre></td></tr></table></figure>
<h3 id="WSDL"><a href="#WSDL" class="headerlink" title="WSDL"></a>WSDL</h3><p>WSDL 是基于 XML 的用于描述Web Service及其函数、参数和返回值。通俗理解Wsdl是webservice的使用说明书。</p>
<h4 id="wsdl是什么"><a href="#wsdl是什么" class="headerlink" title="wsdl是什么"></a>wsdl是什么</h4><ul>
<li>WSDL 指网络服务描述语言(Web Services Description Language)。</li>
<li>WSDL是一种使用 XML 编写的文档。这种文档可描述某个 Web service。它可规定服务的位置，以及此服务提供的操作（或方法）。</li>
<li>WSDL 是一种 XML 文档</li>
<li>WSDL 用于描述网络服务</li>
<li>WSDL 也可用于定位网络服务</li>
</ul>
<h4 id="wsdl结构"><a href="#wsdl结构" class="headerlink" title="wsdl结构"></a>wsdl结构</h4><ol>
<li><code>&lt;service&gt;</code>    服务视图，webservice的服务结点，它包括了服务端点</li>
<li><code>&lt;binding&gt;</code>     为每个服务端点定义消息格式和协议细节</li>
<li><code>&lt;portType&gt;</code>   服务端点，描述 web service可被执行的操作方法，以及相关的消息，通过binding指向portType</li>
<li><code>&lt;message&gt;</code>  定义一个操作（方法）的数据参数(可有多个参数)</li>
<li><code>&lt;types&gt;</code>       定义 web service 使用的全部数据类型</li>
</ol>
<h4 id="wsdl说明书阅读"><a href="#wsdl说明书阅读" class="headerlink" title="wsdl说明书阅读"></a>wsdl说明书阅读</h4><p>从下往上读，先找到服务视图，通过binging找到protType，找到了protType就找到了我们要调用的webservice方法。<br><img src="http://i.imgur.com/Oy0c8Ll.png" alt=""></p>
<h3 id="UDDI"><a href="#UDDI" class="headerlink" title="UDDI"></a>UDDI</h3><p>UDDI 是一种目录服务，企业可以使用它对 Web services 进行注册和搜索。<br>UDDI，英文为 “Universal Description, Discovery and Integration”，可译为”通用描述、发现与集成服务”。</p>
<p>UDDI 是一个独立于平台的框架，用于通过使用 Internet 来描述服务，发现企业，并对企业服务进行集成。</p>
<ul>
<li>UDDI 指的是通用描述、发现与集成服务</li>
<li>UDDI 是一种用于存储有关 web services 的信息的目录。</li>
<li>UDDI 是一种由 WSDL 描述的 web services 界面的目录。</li>
<li>UDDI 经由 SOAP 进行通信</li>
<li>UDDI 被构建入了微软的 .NET 平台</li>
</ul>
<h2 id="常用注解"><a href="#常用注解" class="headerlink" title="常用注解"></a>常用注解</h2><h3 id="WebService"><a href="#WebService" class="headerlink" title="@WebService"></a>@WebService</h3><p>@WebService-定义服务，在public class上边，可选参数：</p>
<ul>
<li>targetNamespace：指定命名空间</li>
<li>name：portType的名称</li>
<li>portName：port的名称</li>
<li>serviceName：服务名称</li>
<li>endpointInterface：SEI接口地址，如果一个服务类实现了多个接口，只需要发布一个接口的方法，可通过此注解指定要发布服务的接口。</li>
</ul>
<h3 id="WebMethod"><a href="#WebMethod" class="headerlink" title="@WebMethod"></a>@WebMethod</h3><p>@WebMethod-定义方法，在公开方法上边，可选参数：</p>
<ul>
<li>operationName：方法名</li>
<li>exclude：设置为true表示此方法不是webservice方法，反之则表示webservice方法</li>
<li>action：此操作的动作。 对于 SOAP 绑定，此方法可确定 soap 动作的值。 </li>
</ul>
<h3 id="WebResult"><a href="#WebResult" class="headerlink" title="@WebResult"></a>@WebResult</h3><p>@WebResult-定义返回值，在方法返回值前边，可选参数:</p>
<ul>
<li>name：返回结果值的名称</li>
<li>partName：表示此返回值的 wsdl:part 的名称。此名称只在操作是 rpc 样式，或者操作是文档样式且参数样式为 BARE 时使用。 </li>
<li>targetNamespace：返回值的 XML 名称空间。只在操作是文档样式或者返回值映射到某一个头时使用。如果目标名称空间被设置为 “”，则此名称空间表示空名称空间。</li>
<li>header：如果为 true，则结果是从消息头而不是消息正文获取的。 </li>
</ul>
<h3 id="WebParam"><a href="#WebParam" class="headerlink" title="@WebParam"></a>@WebParam</h3><p>@WebParam-定义参数，在方法参数前边，可选参数：</p>
<ul>
<li>name：指定参数的名称</li>
<li>partName：表示此返回值的 wsdl:part 的名称。此名称只在操作是 rpc 样式，或者操作是文档样式且参数样式为 BARE 时使用。 </li>
<li>targetNamespace：返回值的 XML 名称空间。只在操作是文档样式或者返回值映射到某一个头时使用。如果目标名称空间被设置为 “”，则此名称空间表示空名称空间。</li>
<li>header：如果为 true，则结果是从消息头而不是消息正文获取的。 </li>
<li>mode：参数的流向（IN、OUT 或 INOUT 之一）。OUT 和 INOUT 模式只是为那些符合 Holder 类型定义（JAX-WS 2.0 [5] 的第 2.3.3 节）的参数类型所指定的。Holder 类型的参数必须为 OUT 或 INOUT。 </li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;三要素&quot;&gt;&lt;a href=&quot;#三要素&quot; class=&quot;headerlink&quot; title=&quot;三要素&quot;&gt;&lt;/a&gt;三要素&lt;/h2&gt;&lt;h3 id=&quot;SOAP&quot;&gt;&lt;a href=&quot;#SOAP&quot; class=&quot;headerlink&quot; title=&quot;SOAP&quot;&gt;&lt;/a&gt;SOAP&lt;/h3&gt;&lt;p&gt;SOAP:简单对象访问协议（Simple Object Access Protocal），是一种简单的基于 XML 的协议，它使应用程序通过 HTTP 来交换信息，简单理解为soap=http+xml。Soap协议版本主要使用soap1.1、soap1.2
    
    </summary>
    
    
      <category term="webservice" scheme="http://www.wanqhblog.top/tags/webservice/"/>
    
  </entry>
  
  <entry>
    <title>WebService入门介绍</title>
    <link href="http://www.wanqhblog.top/2017/08/21/webservice1/"/>
    <id>http://www.wanqhblog.top/2017/08/21/webservice1/</id>
    <published>2017-08-21T03:12:38.000Z</published>
    <updated>2017-08-26T07:24:16.880Z</updated>
    
    <content type="html"><![CDATA[<h2 id="什么是WebService"><a href="#什么是WebService" class="headerlink" title="什么是WebService"></a>什么是WebService</h2><ul>
<li>Web service 即web服务，它是一种跨编程语言和跨操作系统平台的远程调用技术即跨平台远程调用技术。</li>
<li>采用标准SOAP(Simple Object Access Protocol)  协议传输，soap属于w3c标准。Soap协议是基于http的应用层协议，soap协议传输是xml数据。<a id="more"></a></li>
<li>采用wsdl作为描述语言即webservice使用说明书，wsdl属w3c标准。</li>
<li>xml是webservice的跨平台的基础，XML主要的优点在于它既与平台无关，又与厂商无关。</li>
<li>XSD，W3C为webservice制定了一套传输数据类型，使用xml进行描述，即XSD(XML Schema Datatypes)，任何编程语言写的webservice接口在发送数据时都要转换成webservice标准的XSD发送。</li>
<li>当前非SOAP协议的webService以轻量为首要目标，比如rest webservice也是webservice的一种方式。</li>
</ul>
<h2 id="WebService规范简单介绍"><a href="#WebService规范简单介绍" class="headerlink" title="WebService规范简单介绍"></a>WebService规范简单介绍</h2><p>在java中，共有三种webservice规范：JAX-WS（JAX-RPC）、JAXM&amp;SAAJ、JAX-RS。</p>
<h3 id="JAX-WS（JAX-RPC）"><a href="#JAX-WS（JAX-RPC）" class="headerlink" title="JAX-WS（JAX-RPC）"></a>JAX-WS（JAX-RPC）</h3><blockquote>
<p>JAX-WS  的全称为 Java API for XML-Based Webservices ，JAX-WS允许开发者可以选择RPC-oriented或者message-oriented 来实现自己的web services。早期的基于SOAP 的JAVA 的Web 服务规范JAX-RPC（Java API For XML-Remote Procedure Call）目前已经被JAX-WS 规范取代。从java5开始支持JAX-WS2.0版本，Jdk1.6.0_13以后的版本支持2.1版本，jdk1.7支持2.2版本。</p>
</blockquote>
<h3 id="JAXM-amp-SAAJ"><a href="#JAXM-amp-SAAJ" class="headerlink" title="JAXM&amp;SAAJ"></a>JAXM&amp;SAAJ</h3><blockquote>
<p>JAXM（JAVA API For XML Message）主要定义了包含了发送和接收消息所需的API，SAAJ（SOAP With Attachment API For Java，JSR 67）是与JAXM 搭配使用的API，为构建SOAP 包和解析SOAP 包提供了重要的支持，支持附件传输等，JAXM&amp;SAAJ 与JAX-WS 都是基于SOAP 的Web 服务，相比之下JAXM&amp;SAAJ 暴漏了SOAP更多的底层细节，编码比较麻烦，而JAX-WS 更加抽象，隐藏了更多的细节，更加面向对象，实现起来你基本上不需要关心SOAP 的任何细节</p>
</blockquote>
<h3 id="JAX-RS"><a href="#JAX-RS" class="headerlink" title="JAX-RS"></a>JAX-RS</h3><blockquote>
<p>JAX-RS是JAVA EE6 引入的一个新技术。 JAX-RS即Java API for RESTful Web Services，是一个Java 编程语言的应用程序接口，支持按照表述性状态转移（REST）架构风格创建Web服务。JAX-RS使用了Java SE5引入的Java注解来简化Web服务的客户端和服务端的开发和部署。</p>
</blockquote>
<h2 id="使用JAX-WS开发WebService入门实例"><a href="#使用JAX-WS开发WebService入门实例" class="headerlink" title="使用JAX-WS开发WebService入门实例"></a>使用JAX-WS开发WebService入门实例</h2><h3 id="服务端发开发"><a href="#服务端发开发" class="headerlink" title="服务端发开发"></a>服务端发开发</h3><p>编写SEI(Service Endpoint Interface)，在WebService中称为portType,在java中为接口</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment"> * 基于jaxws开发的SEI</span></div><div class="line"><span class="comment"> * 天气查询接口</span></div><div class="line"><span class="comment"> */</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">WeatherInterface</span> </span>&#123;</div><div class="line">    <span class="comment">/*根据城市查询天气*/</span></div><div class="line">    <span class="function">String <span class="title">queryWeather</span><span class="params">(String cityName)</span></span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>接口实现类，也就是WebService的服务类</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="comment">/*使用注解标注为WebService的服务类*/</span></div><div class="line"><span class="meta">@WebService</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WeatherInterfaceImpl</span> <span class="keyword">implements</span> <span class="title">WeatherInterface</span></span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">queryWeather</span><span class="params">(String cityName)</span> </span>&#123;</div><div class="line">        System.out.println(<span class="string">"客户端要查询的城市==="</span>+cityName);</div><div class="line">        String result = <span class="string">"多云"</span>;</div><div class="line">        System.out.println(<span class="string">"像客户端返回查询结果"</span>+result);</div><div class="line">        <span class="keyword">return</span> result;</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] srgs)</span></span>&#123;</div><div class="line">        <span class="comment">/*</span></div><div class="line"><span class="comment">        发布天气查询服务</span></div><div class="line"><span class="comment">        第一个参数：WebService的地址</span></div><div class="line"><span class="comment">        第二个参数：使用了@WebService标注的类</span></div><div class="line"><span class="comment">        */</span></div><div class="line">        Endpoint.publish(<span class="string">"http://127.0.0.1:1234/webther"</span>,<span class="keyword">new</span> WeatherInterfaceImpl());</div><div class="line"></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>注：SEI的实现类中至少要有一个非静态的公开方法作为WebService的服务方法。在类上需要使用注解@WebService</p>
<h3 id="查看wsdl"><a href="#查看wsdl" class="headerlink" title="查看wsdl"></a>查看wsdl</h3><ol>
<li>在浏览器地址栏输入地址：<a href="http://127.0.0.1:1234/webther?wsdl" target="_blank" rel="external">http://127.0.0.1:1234/webther?wsdl</a></li>
<li>Wsdl不是webService,只是获取一个用于描述WebService的说明文件</li>
<li>wsdl- WebServiceDescriptionLanguage,是以XML文件形式来描述WebService的”说明书”,有了说明书,我们才可以知道如何使用或是调用这个服务.<h3 id="使用Wsimport生成客户端调用代码"><a href="#使用Wsimport生成客户端调用代码" class="headerlink" title="使用Wsimport生成客户端调用代码"></a>使用Wsimport生成客户端调用代码</h3><h4 id="Wsimport介绍"><a href="#Wsimport介绍" class="headerlink" title="Wsimport介绍"></a>Wsimport介绍</h4><blockquote>
<p>wsimport是jdk自带的webservice客户端工具,可以根据wsdl文档生成客户端调用代码(java代码).当然,无论服务器端的WebService是用什么语言写的,都可以生成调用webservice的客户端代码，服务端通过客户端代码调用webservice。<br>wsimport.exe位于JAVA_HOME\bin目录下.</p>
</blockquote>
</li>
</ol>
<p>常用参数为:</p>
<ul>
<li>-d&lt;目录&gt;  - 将生成.class文件。默认参数。</li>
<li>-s&lt;目录&gt; - 将生成.java文件。</li>
<li>-p&lt;生成的新包名&gt; -将生成的类，放于指定的包下。<br>(wsdlurl) - <a href="http://server:port/service?wsdl，必须的参数。" target="_blank" rel="external">http://server:port/service?wsdl，必须的参数。</a></li>
</ul>
<p>示例： C:/&gt; wsimport –s . <a href="http://127.0.0.1:1234/weather?wsdl" target="_blank" rel="external">http://127.0.0.1:1234/weather?wsdl</a> </p>
<p>注意：-s不能分开，-s后面有个小点，点表示将代码放到当前目录下。<br>http….是指获取wsdl说明书的地址.</p>
<h4 id="客户端编写"><a href="#客户端编写" class="headerlink" title="客户端编写"></a>客户端编写</h4><p>将上面使用wsimport生成的代码拷贝到项目中，然后编写客户端调用的代码<br>1、使用服务视图调用WebService<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//创建服务视图</span></div><div class="line">WeatherInterfaceImplService weatherInterfaceImplService = <span class="keyword">new</span> WeatherInterfaceImplService();</div><div class="line"><span class="comment">//通过服务视图得到服务断点</span></div><div class="line">WeatherInterfaceImpl port = weatherInterfaceImplService.getPort(WeatherInterfaceImpl.class);</div><div class="line">String result = port.queryWeather(<span class="string">"深圳"</span>);</div><div class="line">System.out.println(result);</div></pre></td></tr></table></figure></p>
<p>2、使用jdk的service类调用webservice<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//wsdl路径</span></div><div class="line">URL wsdlUrl = <span class="keyword">new</span> URL(<span class="string">"http://127.0.0.1:1234/webther?wsdl"</span>);</div><div class="line"><span class="comment">//从wsdl中找到服务视图</span></div><div class="line"><span class="comment">//第一个参数是wsdl的命名空间</span></div><div class="line"><span class="comment">//第二个参数是服务视图的名字</span></div><div class="line">QName qName = <span class="keyword">new</span> QName(<span class="string">"http://jaxws.wqh.com/"</span>, <span class="string">"WeatherInterfaceImplService"</span>);</div><div class="line"><span class="comment">//创建service对象获取服务视图</span></div><div class="line">Service service = Service.create(wsdlUrl,qName);</div><div class="line"><span class="comment">//从服务视图中获取portType</span></div><div class="line">WeatherInterfaceImpl weatherInterface = service.getPort(WeatherInterfaceImpl.class);</div><div class="line"><span class="comment">//调用portType的方法</span></div><div class="line">String result = weatherInterface.queryWeather(<span class="string">"南昌"</span>);</div><div class="line">System.out.println(result);</div></pre></td></tr></table></figure></p>
<h2 id="WebService与Socket比较"><a href="#WebService与Socket比较" class="headerlink" title="WebService与Socket比较"></a>WebService与Socket比较</h2><p><img src="http://i.imgur.com/6x7WBwq.png" alt=""></p>
<ul>
<li>Socket  是基于TCP/ip的传输层协议</li>
<li>Webservice是基于http协议传输数据，http是基于tcp的应用层协议</li>
<li>Webservice采用了基于http的soap协议传输数据。</li>
<li>Socket接口通过流传输，不支持面向对象。</li>
<li>Webservice 接口支持面向对象，最终webservice将对象进行序列化后通过流传输。</li>
</ul>
<p>结论：Webservice采用soap协议进行通信，底层基于socket通信，webservice不需专门针对数据流的发送和接收进行处理，是一种跨平台的面向对象远程调用技术。Socket传输速率更快。</p>
<h2 id="WebService的使用介绍"><a href="#WebService的使用介绍" class="headerlink" title="WebService的使用介绍"></a>WebService的使用介绍</h2><h3 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h3><ol>
<li>应用程序集成<br>分布式程序之间进行集成使用webservice直接调用服务层方法，不仅缩短了开发周期，还减少了代码复杂度，并能够增强应用程序的可维护性，因为webservice支持跨平台且遵循标准协议（soap）。</li>
<li>软件重用<br>将一个软件的功能以webservice方式暴露出来，达到软件重用。例如上边分析的天气预报，将天气查询功能以webservice接口方式暴露出来非常容易集成在其它系统中；再比如一个第三方物流系统将快递查询、快递登记暴露出来，从而集成在电子商务系统中。</li>
</ol>
<h3 id="建议不用webservice"><a href="#建议不用webservice" class="headerlink" title="建议不用webservice"></a>建议不用webservice</h3><ol>
<li>同构程序间通信<br>同构程序是指采用相同的编程语言的程序之间通信，比如java远程调用RMi技术就可以非常高效的实现远程调用，使用简单方便，必需保证两边应用都是java编写才可使用。</li>
</ol>
<p>总之，只要有其它方法比webservice更高效更可行就不要用webservice，因为web跨平台远程调用方法不止webservice一种，需要择优考虑。<br>RMI是java语言提供的远程调用技术。Rmi速度会比webservice快的多，比socket要慢。</p>
<h3 id="建议使用webservice"><a href="#建议使用webservice" class="headerlink" title="建议使用webservice"></a>建议使用webservice</h3><ol>
<li>公开接口<br>面向互联网公开的接口，例如：某公司产品促销介绍、股票信息查询等，因为webservice是互联网的一个标准协议，将接口发布为webservice，其它公司很容易使用。</li>
<li>调用webservice服务端<br>你作为客户端要调用别人的接口，对方接口用的是webservice，这时你也用webservice开发客户端，且协议版本要和服务端保持一致。</li>
</ol>
<h3 id="Webservice优缺点"><a href="#Webservice优缺点" class="headerlink" title="Webservice优缺点"></a>Webservice优缺点</h3><p>优点：</p>
<ol>
<li>采用xml支持跨平台远程调用。</li>
<li>基于http的soap协议，可跨越防火墙。</li>
<li>支持面向对象开发。</li>
<li>有利于软件和数据重用，实现松耦合。</li>
</ol>
<p>缺点：<br>由于soap是基于xml传输，本身使用xml传输会传输一些无关的东西从而效率不高，随着soap协议的完善，soap协议增加了许多内容，这样就导致了使用soap协议去完成简单的数据传输的效率不高。如果直接用http传输自定义数据内容比webservice开发更快捷，例如第三方支付公司的支持接口。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;什么是WebService&quot;&gt;&lt;a href=&quot;#什么是WebService&quot; class=&quot;headerlink&quot; title=&quot;什么是WebService&quot;&gt;&lt;/a&gt;什么是WebService&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;Web service 即web服务，它是一种跨编程语言和跨操作系统平台的远程调用技术即跨平台远程调用技术。&lt;/li&gt;
&lt;li&gt;采用标准SOAP(Simple Object Access Protocol)  协议传输，soap属于w3c标准。Soap协议是基于http的应用层协议，soap协议传输是xml数据。
    
    </summary>
    
    
      <category term="webservice" scheme="http://www.wanqhblog.top/tags/webservice/"/>
    
  </entry>
  
  <entry>
    <title>使用JavaMail发送邮件（带附件）</title>
    <link href="http://www.wanqhblog.top/2017/08/20/javamail/"/>
    <id>http://www.wanqhblog.top/2017/08/20/javamail/</id>
    <published>2017-08-20T09:36:06.000Z</published>
    <updated>2017-08-26T07:24:52.426Z</updated>
    
    <content type="html"><![CDATA[<p>在使用javaMail发邮件之前先简单说一下邮件的三个协议：</p>
<ol>
<li>POP3：POP的全称是 Post Office Protocol ，即邮局协议，用于电子邮件的接收，它使用TCP的110端口，现在常用的是第三版，所以简称为 POP3。 <a id="more"></a></li>
<li>SMTP：SMTP（Simple Mail Transfer Protocal）称为简单邮件传输协议，目标是向用户提供高效、可靠的邮件传输。</li>
<li>IMAP：<br>IMAP是Internet Message Access Protocol的缩写，顾名思义，主要提供的是通过Internet获取信息的一种协议。</li>
</ol>
<h2 id="前期准备"><a href="#前期准备" class="headerlink" title="前期准备"></a>前期准备</h2><p>如果是使用像QQ邮箱、163邮箱、126邮箱等这种普通的邮箱，需要先开启POP3/SMTP/IMAP服务，并且获取授权。如果是企业邮箱，可以直接使用。这里以163邮箱为例。</p>
<p><img src="http://i.imgur.com/5fMcgQh.png" alt=""><br>先查看是否开启服务<br><img src="http://i.imgur.com/YU0igMq.png" alt=""><br>开启并设置客户端授权码，这个很重要。如果是qq邮箱，需要发短信配置</p>
<h2 id="jar包"><a href="#jar包" class="headerlink" title="jar包"></a>jar包</h2><p>javaMail需要两个jar，直接使用maven导入依赖</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">&lt;dependency&gt;</div><div class="line">          &lt;groupId&gt;javax.activation&lt;/groupId&gt;</div><div class="line">          &lt;artifactId&gt;activation&lt;/artifactId&gt;</div><div class="line">          &lt;version&gt;1.1.1&lt;/version&gt;</div><div class="line">      &lt;/dependency&gt;</div><div class="line">      &lt;dependency&gt;</div><div class="line">          &lt;groupId&gt;com.sun.mail&lt;/groupId&gt;</div><div class="line">          &lt;artifactId&gt;javax.mail&lt;/artifactId&gt;</div><div class="line">          &lt;version&gt;1.5.2&lt;/version&gt;</div><div class="line">      &lt;/dependency&gt;</div></pre></td></tr></table></figure>
<h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//主机名,上面在开启POP3/SMTP/IMAP服务的时候有服务器地址</span></div><div class="line">   <span class="keyword">public</span> <span class="keyword">static</span> String HOST_NAME = <span class="string">"smtp.126.com"</span>;</div><div class="line">   <span class="comment">//用户名，邮箱的登陆名</span></div><div class="line">   <span class="keyword">public</span> <span class="keyword">static</span> String USER_NAME = <span class="string">"xxxxx"</span>;</div><div class="line">   <span class="comment">//密码，这里是开始设置的授权码</span></div><div class="line">   <span class="keyword">public</span> <span class="keyword">static</span> String USER_PASSWD = <span class="string">"xxxxx"</span>;</div><div class="line">   <span class="comment">//发件人</span></div><div class="line">   <span class="keyword">public</span> <span class="keyword">static</span> String FROM_NAME = <span class="string">"xxxxx"</span>;</div><div class="line">   <span class="comment">//抄送人</span></div><div class="line">   <span class="keyword">public</span> <span class="keyword">static</span> String CC_NAME = <span class="string">"xxxxx"</span>;</div><div class="line"></div><div class="line">   <span class="comment">/**</span></div><div class="line"><span class="comment">    * <span class="doctag">@param</span> toEmail 发送给谁</span></div><div class="line"><span class="comment">    * <span class="doctag">@param</span> code   发送的内容，验证码</span></div><div class="line"><span class="comment">    */</span></div><div class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">sendMail</span><span class="params">(String toEmail, String code)</span> </span>&#123;</div><div class="line">       <span class="comment">//1：创建Properties</span></div><div class="line">       Properties properties = <span class="keyword">new</span> Properties();</div><div class="line">       properties.put(<span class="string">"mail.host"</span>, HOST_NAME);</div><div class="line">       properties.put(<span class="string">"mail.smtp.auth"</span>, <span class="string">"true"</span>);</div><div class="line">       <span class="comment">//2：获取用户名和密码进行认证</span></div><div class="line">       Authenticator authenticator = <span class="keyword">new</span> Authenticator() &#123;</div><div class="line">           <span class="meta">@Override</span></div><div class="line">           <span class="function"><span class="keyword">protected</span> PasswordAuthentication <span class="title">getPasswordAuthentication</span><span class="params">()</span> </span>&#123;</div><div class="line">               <span class="keyword">return</span> <span class="keyword">new</span> PasswordAuthentication(USER_NAME, USER_PASSWD);</div><div class="line">           &#125;</div><div class="line">       &#125;;</div><div class="line">       <span class="comment">//3：获取session对象</span></div><div class="line">       Session session = Session.getInstance(properties, authenticator);</div><div class="line">       <span class="comment">//4：设置邮件发送信息</span></div><div class="line">       Message message = <span class="keyword">new</span> MimeMessage(session);</div><div class="line">       <span class="keyword">try</span> &#123;</div><div class="line">           <span class="comment">//4.1：设置发件人</span></div><div class="line">           message.setFrom(<span class="keyword">new</span> InternetAddress(FROM_NAME));</div><div class="line">           <span class="comment">//4.2：设置收件人</span></div><div class="line">		<span class="comment">//Message.RecipientType.TO 收件人</span></div><div class="line">		<span class="comment">//Message.RecipientType.CC 抄送</span></div><div class="line">		<span class="comment">//Message.RecipientType.BCC 暗送</span></div><div class="line">           message.setRecipient(Message.RecipientType.TO, <span class="keyword">new</span> InternetAddress(toEmail));</div><div class="line">           <span class="comment">//4.3：设置邮件主题</span></div><div class="line">           message.setSubject(<span class="string">"主题！！"</span>);</div><div class="line">           <span class="comment">//4.4：设置邮件正文</span></div><div class="line">           message.setContent(code,<span class="string">"text/html;charset=utf-8"</span>);</div><div class="line">           <span class="comment">//5：发送邮件</span></div><div class="line">           Transport.send(message);</div><div class="line">       &#125; <span class="keyword">catch</span> (MessagingException e) &#123;</div><div class="line">           e.printStackTrace();</div><div class="line">       &#125;</div><div class="line">   &#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在使用javaMail发邮件之前先简单说一下邮件的三个协议：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;POP3：POP的全称是 Post Office Protocol ，即邮局协议，用于电子邮件的接收，它使用TCP的110端口，现在常用的是第三版，所以简称为 POP3。
    
    </summary>
    
    
      <category term="javamail" scheme="http://www.wanqhblog.top/tags/javamail/"/>
    
  </entry>
  
  <entry>
    <title>Redis入门之环境的搭建</title>
    <link href="http://www.wanqhblog.top/2017/08/20/Redis%E5%85%A5%E9%97%A8%E4%B9%8B%E7%8E%AF%E5%A2%83%E7%9A%84%E6%90%AD%E5%BB%BA/"/>
    <id>http://www.wanqhblog.top/2017/08/20/Redis入门之环境的搭建/</id>
    <published>2017-08-20T05:09:50.000Z</published>
    <updated>2017-08-20T09:09:51.304Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一、-Ubuntu下redis的搭建"><a href="#一、-Ubuntu下redis的搭建" class="headerlink" title="一、 Ubuntu下redis的搭建"></a>一、 Ubuntu下redis的搭建</h2><p>这里直接使用命令下载以及安装，<br><a id="more"></a></p>
<h3 id="1、下载redis"><a href="#1、下载redis" class="headerlink" title="1、下载redis"></a>1、下载redis</h3><p>首先进入root下</p>
<pre><code>root@ubuntu:~# wget http://download.redis.io/releases/redis-4.0.1.tar.gz
</code></pre><h3 id="2、解压"><a href="#2、解压" class="headerlink" title="2、解压"></a>2、解压</h3><p>这里可以直接使用解压命令解压文件</p>
<pre><code>root@ubuntu:~# tar -xzvf redis-4.0.1.tar.gz 
</code></pre><h3 id="3、编译安装"><a href="#3、编译安装" class="headerlink" title="3、编译安装"></a>3、编译安装</h3><p>解压完成后进入到解压后的目录中使用make命令既可编译</p>
<figure>

<pre><code>root@ubuntu:~# cd redis-4.0.1
root@ubuntu:~/redis-4.0.1# make
</code></pre><p></p></figure><br><img src="http://i.imgur.com/OLbC1eB.png" alt=""><p></p>
<p>如上图所示如果没有错误为编译成功</p>
<p>输入make test命令测试是否安装成功</p>
<pre><code>root@ubuntu:~/redis-4.0.1# make test
</code></pre><p><img src="http://i.imgur.com/7uhWPED.png" alt=""></p>
<p>这里第一次可能会出现错误，如果出现错误可以再次执行该命令</p>
<h3 id="4、启动redis"><a href="#4、启动redis" class="headerlink" title="4、启动redis"></a>4、启动redis</h3><pre><code>root@ubuntu:~/redis-4.0.1# cd src/
root@ubuntu:~/redis-4.0.1/src# ls
</code></pre><p>在redis的根目录下查看是否含有redis.conf文件</p>
<p><img src="http://i.imgur.com/GDekIrp.png" alt=""></p>
<p>然后进入到src目录中使用ls命令查看是否包含以下文件</p>
<p><img src="http://i.imgur.com/n5F2V47.png" alt=""></p>
<p>将redis添加到Path环境变量中，方便下次直接启动redis</p>
<pre><code>root@ubuntu:~/redis-4.0.1/src# cp redis-server /usr/local/bin/
root@ubuntu:~/redis-4.0.1/src# cp redis-cli /usr/local/bin/
</code></pre><p>使用命令启动redis</p>
<pre><code>root@ubuntu:~/redis-4.0.1/src# redis-server 
</code></pre><p><img src="http://i.imgur.com/2WyODnB.png" alt=""></p>
<p>如图表示服务启动成功，不要关闭该终端，使用shift+ctrl+t开启一个新的终端，输入redis-cli命令进入redis</p>
<p><img src="http://i.imgur.com/emLpYDY.png" alt=""></p>
<p>配置成功</p>
<p>另外在Ubuntu中可以直接使用apt-get命令安装，这里直接盗用<a href="https://www.runoob.com/redis/redis-install.html" title="菜鸟教程" target="_blank" rel="external">菜鸟教程</a>了。<br><img src="http://i.imgur.com/sF1LCM8.png" alt=""></p>
<h2 id="二、在window中搭建"><a href="#二、在window中搭建" class="headerlink" title="二、在window中搭建"></a>二、在window中搭建</h2><p>这使用的是win7-64的系统</p>
<h3 id="1、首先当然是下载"><a href="#1、首先当然是下载" class="headerlink" title="1、首先当然是下载"></a>1、首先当然是下载</h3><p><a href="https://github.com/MicrosoftArchive/redis/releases" target="_blank" rel="external">redis下载地址</a></p>
<p><img src="http://i.imgur.com/pugaQ5M.png" alt=""></p>
<h3 id="2、安装"><a href="#2、安装" class="headerlink" title="2、安装"></a>2、安装</h3><p>安装版的直接点下一步就行了，安装完成之后直接进入在命令行中输入redis-cli既可<br><img src="http://i.imgur.com/E9EFy95.png" alt=""></p>
<p>如果是解压版的需要解压后，进入到解压后的目录中使用redis-server命令启动服务既可使用。</p>
<h2 id="三、连接远程redis"><a href="#三、连接远程redis" class="headerlink" title="三、连接远程redis"></a>三、连接远程redis</h2><p><img src="http://i.imgur.com/gjVNyMe.png" alt=""></p>
<p>-h后面为连接主机的ip地址，-p为端口号</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;一、-Ubuntu下redis的搭建&quot;&gt;&lt;a href=&quot;#一、-Ubuntu下redis的搭建&quot; class=&quot;headerlink&quot; title=&quot;一、 Ubuntu下redis的搭建&quot;&gt;&lt;/a&gt;一、 Ubuntu下redis的搭建&lt;/h2&gt;&lt;p&gt;这里直接使用命令下载以及安装，&lt;br&gt;
    
    </summary>
    
    
      <category term="redis" scheme="http://www.wanqhblog.top/tags/redis/"/>
    
  </entry>
  
</feed>
