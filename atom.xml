<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>wanqh的个人博客</title>
  <subtitle>记录生活、工作、学习点点滴滴</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://www.wanqhblog.top/"/>
  <updated>2018-01-26T07:11:23.422Z</updated>
  <id>http://www.wanqhblog.top/</id>
  
  <author>
    <name>Wan QingHua</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>CentOS7下RabbitMQ的安装介绍</title>
    <link href="http://www.wanqhblog.top/2018/01/26/CentOS7-RabbitMQ/"/>
    <id>http://www.wanqhblog.top/2018/01/26/CentOS7-RabbitMQ/</id>
    <published>2018-01-26T01:13:48.000Z</published>
    <updated>2018-01-26T07:11:23.422Z</updated>
    
    <content type="html"><![CDATA[<h1 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h1><p>RabbitMQ是一个在AMQP基础上完成的，可复用的企业消息系统。它是由Erlang语言开发。</p>
<p>AMQP：Advanced Message Queue，高级消息队列协议。他是应用层协议的一个开放标准，为面向消息的中间件设计，基于此协议的客户端与消息中间件可传递消息，并不受产品、开发语言等条件的限制。</p>
<blockquote>
<p>RabbitMQ 最初起源于金融系统，用于在分布式系统中存储转发消息，在易用性、扩展性、高可用性等方面表现不俗。具体特点包括：<a id="more"></a></p>
<ol>
<li>可靠性（Reliability）：RabbitMQ使用一些机制来保证可靠性，如持久化、传输确认、发布确认。</li>
<li>灵活的路由（Flexible Routing）：在消息进入队列之前，通过 Exchange 来路由消息的。</li>
<li>消息集群（Clustering）：多个 RabbitMQ 服务器可以组成一个集群，形成一个逻辑 Broker 。</li>
<li>高可用（Highly Available Queues）：队列可以在集群中的机器上进行镜像，使得在部分节点出问题的情况下队列仍然可用。</li>
<li>多种协议（Multi-protocol）：RabbitMQ支持多种消息队列协议，比如STOMP、MQTT等。</li>
<li>多语言客户端（Many Clients）：RabbitMQ 几乎支持所有常用语言，比如 Java、.NET、Ruby 等。</li>
<li>管理界面（Management UI）：RabbitMQ 提供了一个易用的用户界面，使得用户可以监控和管理消息 Broker 的许多方面。</li>
<li>跟踪机制（Tracing）：如果消息异常，RabbitMQ 提供了消息跟踪机制，使用者可以找出发生了什么。</li>
<li>插件机制（Plugin System）：RabbitMQ 提供了许多插件，来从多方面进行扩展，也可以编写自己的插件。</li>
</ol>
</blockquote>
<h1 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h1><p>项目结构图：（直接引用百度百科的）</p>
<p><img src="http://oy09glbzm.bkt.clouddn.com/18-1-26/27555791.jpg" alt=""></p>
<p>概念说明：</p>
<ul>
<li>Broker：消息队列服务器的实体，是一个中间件应用，负责接收消息生产者的消息，然后将消息发送至消息接收者或其他的Braker</li>
<li>Exchange：消息交换机，是消息第一个到达的地方，消息通过它指定的路由规则，分发到不同的消息队列中去。</li>
<li>Queue：消息队列，消息通过发送和路由之后最终达到的地方，到达Queue的消息即进入逻辑上等待消费的状态。每个消息都会被发送到一个或多个队列。</li>
<li>Binding：绑定，它的作用就是把Exchange和Queue按照路由规则绑定起来，也就是Exchange和Queue之间的虚拟链接。</li>
<li>Routing Key：路由关键字，Exchange根据这个关键字进行消息投递。</li>
<li>Virtual host：虚拟主机，是对Broker的虚拟划分，将消费者、生产者和它们依赖的AMQP相关结构进行隔离，一般都是为了安全考虑。比如：我们可以在一个Broker中设置多个虚拟主机，对不同用户进行权限的分离。</li>
<li>Connection：连接。代表生产者、消费者、Broker之间进行通信的物理网络。</li>
<li>Channel：消息通道，用于连接生产者和消费者的逻辑结构。在客户端每个连接里，可建立多个Channel，每个Channel代表一个会话任务，通过Channel可以隔离同一个连接中的不同交互内容。</li>
<li>Producer：消息生产者。</li>
<li>Consumer：消息消费者。</li>
</ul>
<p>消息队列的使用过程：</p>
<ol>
<li>客户端连接到消息队列服务器，打开一个channel。</li>
<li>客户端声明一个exchange，并设置相关属性。</li>
<li>客户端声明一个queue，并设置相关属性。</li>
<li>客户端使用routing key，在exchange和queue之间建立好绑定关系。</li>
<li>客户端投递消息到exchange。</li>
</ol>
<p>exchange接收到消息后，就根据消息的key和已经设置的binding，进行消息路由，将消息投递到一个或多个队列里。</p>
<p>exchange也有几个类型，完全根据key进行投递的叫做Direct交换机，例如，绑定时设置了routing key为”abc”，那么客户端提交的消息，只有设置了key为”abc”的才会投递到队列。对key进行模式匹配后进行投递的叫做Topic交换机，符号”#”匹配一个或多个词，符号”<em>”匹配正好一个词。例如”abc.#”匹配”abc.def.ghi”，”abc.</em>”只匹配”abc.def”。还有一种不需要key的，叫做Fanout交换机，它采取广播模式，一个消息进来时，投递到与该交换机绑定的所有队列。</p>
<p>RabbitMQ支持消息的持久化，也就是数据写在磁盘上，为了数据安全考虑，我想大多数用户都会选择持久化。消息队列持久化包括3个部分：</p>
<ol>
<li>exchange持久化，在声明时指定durable =&gt; 1</li>
<li>queue持久化，在声明时指定durable =&gt; 1</li>
<li>消息持久化，在投递时指定delivery_mode =&gt; 2（1是非持久化）</li>
</ol>
<p>如果exchange和queue都是持久化的，那么它们之间的binding也是持久化的。如果exchange和queue两者之间有一个持久化，一个非持久化，就不允许建立绑定。</p>
<h1 id="安装介绍"><a href="#安装介绍" class="headerlink" title="安装介绍"></a>安装介绍</h1><h2 id="Erlang安装配置"><a href="#Erlang安装配置" class="headerlink" title="Erlang安装配置"></a>Erlang安装配置</h2><p>前面说到RabbitMQ是由Erlang语言开发，所以需要先安装Erlang环境</p>
<ul>
<li>下载安装，地址：<a href="http://www.erlang.org/downloads" target="_blank" rel="external">http://www.erlang.org/downloads</a> ，选择版本下载。</li>
</ul>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">wget http://erlang.org/download/otp_src_20.1.tar.gz</div></pre></td></tr></table></figure>
<ul>
<li>解压编译安装</li>
</ul>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#解压</span></div><div class="line">tar -zvxf otp_src_20.1.tar.gz </div><div class="line"><span class="comment">#配置安装路径编译代码</span></div><div class="line"><span class="built_in">cd</span> otp_src_20.1/</div><div class="line">./configure --prefix=/opt/erlang --without-javac</div><div class="line">make &amp;&amp; make install</div></pre></td></tr></table></figure>
<p>如下安装完成</p>
<p><img src="http://oy09glbzm.bkt.clouddn.com/18-1-26/48515723.jpg-blog" alt=""></p>
<ul>
<li>查看安装结果</li>
</ul>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">cd</span> /opt/erlang</div><div class="line">bin/erl</div></pre></td></tr></table></figure>
<p>安装成功</p>
<p><img src="http://oy09glbzm.bkt.clouddn.com/18-1-26/62188249.jpg-blog" alt=""></p>
<ul>
<li>配置环境变量</li>
</ul>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">vim /etc/profile</div><div class="line"><span class="comment">#添加下面的配置</span></div><div class="line"><span class="comment">#set erlang environment</span></div><div class="line"><span class="built_in">export</span> PATH=<span class="variable">$PATH</span>:/opt/erlang/bin</div><div class="line"><span class="comment">#使配置文件生效</span></div><div class="line"><span class="built_in">source</span>  /etc/profile</div></pre></td></tr></table></figure>
<h2 id="RabbitMQ的安装配置"><a href="#RabbitMQ的安装配置" class="headerlink" title="RabbitMQ的安装配置"></a>RabbitMQ的安装配置</h2><ul>
<li>下载安装，从官网下载，<a href="http://www.rabbitmq.com/releases/rabbitmq-server/" target="_blank" rel="external">点击下载</a> ，进入选择版本。在linux环境下需要下带有unix的，如下：</li>
</ul>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">wget http://www.rabbitmq.com/releases/rabbitmq-server/v3.6.12/rabbitmq-server-generic-unix-3.6.12.tar.xz</div></pre></td></tr></table></figure>
<ul>
<li>解压，这里将其解压到opt目录中。解压之后进入opt目录，修改rabbitmq的文件夹</li>
</ul>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">xz -d rabbitmq-server-generic-unix-3.6.12.tar.xz </div><div class="line">tar -vxf  rabbitmq-server-generic-unix-3.6.12.tar -C /opt/</div><div class="line"><span class="built_in">cd</span> /opt/</div><div class="line">mv rabbitmq-server-3.6.12/ rabbitmq</div></pre></td></tr></table></figure>
<ul>
<li>配置环境变量</li>
</ul>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">vim /etc/profile</div><div class="line"><span class="comment">#添加以下配置</span></div><div class="line"><span class="comment">#set rabbitmq environment</span></div><div class="line"><span class="built_in">export</span> PATH=<span class="variable">$PATH</span>:/opt/rabbitmq/sbin</div><div class="line"><span class="comment">#使得文件生效</span></div><div class="line"><span class="built_in">source</span>  /etc/profile</div></pre></td></tr></table></figure>
<h2 id="RabbitMQ服务操作"><a href="#RabbitMQ服务操作" class="headerlink" title="RabbitMQ服务操作"></a>RabbitMQ服务操作</h2><ul>
<li>启动服务</li>
</ul>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">rabbitmq-server -detached</div></pre></td></tr></table></figure>
<ul>
<li>查看服务状态</li>
</ul>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div></pre></td><td class="code"><pre><div class="line">./sbin/rabbitmqctl status</div><div class="line"></div><div class="line"><span class="comment">#显示一下信息，说明已经启动</span></div><div class="line">Status of node rabbit@localhost</div><div class="line">[&#123;pid,1452&#125;,</div><div class="line"> &#123;running_applications,</div><div class="line">     [&#123;rabbit,<span class="string">"RabbitMQ"</span>,<span class="string">"3.6.12"</span>&#125;,</div><div class="line">      &#123;ranch,<span class="string">"Socket acceptor pool for TCP protocols."</span>,<span class="string">"1.3.0"</span>&#125;,</div><div class="line">      &#123;ssl,<span class="string">"Erlang/OTP SSL application"</span>,<span class="string">"8.2.1"</span>&#125;,</div><div class="line">      &#123;public_key,<span class="string">"Public key infrastructure"</span>,<span class="string">"1.5"</span>&#125;,</div><div class="line">      &#123;asn1,<span class="string">"The Erlang ASN1 compiler version 5.0.3"</span>,<span class="string">"5.0.3"</span>&#125;,</div><div class="line">      &#123;crypto,<span class="string">"CRYPTO"</span>,<span class="string">"4.1"</span>&#125;,</div><div class="line">      &#123;mnesia,<span class="string">"MNESIA  CXC 138 12"</span>,<span class="string">"4.15.1"</span>&#125;,</div><div class="line">      &#123;os_mon,<span class="string">"CPO  CXC 138 46"</span>,<span class="string">"2.4.3"</span>&#125;,</div><div class="line">      &#123;rabbit_common,</div><div class="line">          <span class="string">"Modules shared by rabbitmq-server and rabbitmq-erlang-client"</span>,</div><div class="line">          <span class="string">"3.6.12"</span>&#125;,</div><div class="line">      &#123;compiler,<span class="string">"ERTS  CXC 138 10"</span>,<span class="string">"7.1.2"</span>&#125;,</div><div class="line">      &#123;xmerl,<span class="string">"XML parser"</span>,<span class="string">"1.3.15"</span>&#125;,</div><div class="line">      &#123;syntax_tools,<span class="string">"Syntax tools"</span>,<span class="string">"2.1.3"</span>&#125;,</div><div class="line">      &#123;sasl,<span class="string">"SASL  CXC 138 11"</span>,<span class="string">"3.1"</span>&#125;,</div><div class="line">      &#123;stdlib,<span class="string">"ERTS  CXC 138 10"</span>,<span class="string">"3.4.2"</span>&#125;,</div><div class="line">      &#123;kernel,<span class="string">"ERTS  CXC 138 10"</span>,<span class="string">"5.4"</span>&#125;]&#125;,</div><div class="line"> &#123;os,&#123;unix,linux&#125;&#125;,</div><div class="line"> &#123;erlang_version,</div><div class="line">     <span class="string">"Erlang/OTP 20 [erts-9.1] [source] [64-bit] [smp:1:1] [ds:1:1:10] [async-threads:64] [kernel-poll:true]\n"</span>&#125;,</div><div class="line"> &#123;memory,</div><div class="line">     [&#123;connection_readers,0&#125;,</div><div class="line">      &#123;connection_writers,0&#125;,</div><div class="line">      &#123;connection_channels,0&#125;,</div><div class="line">      &#123;connection_other,0&#125;,</div><div class="line">      &#123;queue_procs,2744&#125;,</div><div class="line">      &#123;queue_slave_procs,0&#125;,</div><div class="line">      &#123;plugins,0&#125;,</div><div class="line">      &#123;other_proc,19513536&#125;,</div><div class="line">      &#123;metrics,184272&#125;,</div><div class="line">      &#123;mgmt_db,0&#125;,</div><div class="line">      &#123;mnesia,61136&#125;,</div><div class="line">      &#123;other_ets,1523640&#125;,</div><div class="line">      &#123;binary,211896&#125;,</div><div class="line">      &#123;msg_index,43568&#125;,</div><div class="line">      &#123;code,21408137&#125;,</div><div class="line">      &#123;atom,891849&#125;,</div><div class="line">      &#123;other_system,17779446&#125;,</div><div class="line">      &#123;total,61620224&#125;]&#125;,</div><div class="line"> &#123;alarms,[]&#125;,</div><div class="line"> &#123;listeners,[&#123;clustering,25672,<span class="string">"::"</span>&#125;,&#123;amqp,5672,<span class="string">"::"</span>&#125;]&#125;,</div><div class="line"> &#123;vm_memory_calculation_strategy,rss&#125;,</div><div class="line"> &#123;vm_memory_high_watermark,0.4&#125;,</div><div class="line"> &#123;vm_memory_limit,771637248&#125;,</div><div class="line"> &#123;disk_free_limit,50000000&#125;,</div><div class="line"> &#123;disk_free,36134227968&#125;,</div><div class="line"> &#123;file_descriptors,</div><div class="line">     [&#123;total_limit,924&#125;,&#123;total_used,2&#125;,&#123;sockets_limit,829&#125;,&#123;sockets_used,0&#125;]&#125;,</div><div class="line"> &#123;processes,[&#123;<span class="built_in">limit</span>,1048576&#125;,&#123;used,153&#125;]&#125;,</div><div class="line"> &#123;run_queue,0&#125;,</div><div class="line"> &#123;uptime,21&#125;,</div><div class="line"> &#123;kernel,&#123;net_ticktime,60&#125;&#125;]</div></pre></td></tr></table></figure>
<ul>
<li>停止RabbitMQ</li>
</ul>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">rabbitmqctl stop</div></pre></td></tr></table></figure>
<h2 id="配置网页插件"><a href="#配置网页插件" class="headerlink" title="配置网页插件"></a>配置网页插件</h2><p>RabbitMQ网页管理的端口是15672，但是现在还不能访问，需要添加网页插件才能访问</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">rabbitmq-plugins <span class="built_in">enable</span> rabbitmq_management</div></pre></td></tr></table></figure>
<p>在浏览器中输入ip:15672</p>
<p><img src="http://oy09glbzm.bkt.clouddn.com/18-1-26/57199153.jpg-blog" alt=""></p>
<p>在网上看到有人说默认的账号密码是guest，但是该账号只能通过localhost登录。所以需要配置一个用户并设置权限。</p>
<ol>
<li>添加用户</li>
</ol>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">rabbitmqctl add_user [username] [password]</div></pre></td></tr></table></figure>
<ol>
<li>添加权限</li>
</ol>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">rabbitmqctl set_permissions -p <span class="string">"/"</span> [username] <span class="string">".*"</span> <span class="string">".*"</span> <span class="string">".*"</span></div></pre></td></tr></table></figure>
<ol>
<li>修改用户角色</li>
</ol>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">rabbitmqctl set_user_tags [username] administrator</div></pre></td></tr></table></figure>
<p>下面就可以使用刚添加的用户登录了。可以在该页面进行RabbitMQ的管理，包括用户的设置。</p>
<p><img src="http://oy09glbzm.bkt.clouddn.com/18-1-26/36041742.jpg-blog" alt=""></p>
<h2 id="安装报错"><a href="#安装报错" class="headerlink" title="安装报错"></a>安装报错</h2><ul>
<li><p>error: No curses library functions found configure</p>
<p>需要先安装ncurses-devel</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">yum install ncurses-devel</div></pre></td></tr></table></figure>
</li>
<li><p>odbc : ODBC library - link check failed</p>
<p><img src="http://oy09glbzm.bkt.clouddn.com/18-1-26/99491906.jpg-blog" alt=""></p>
<p>类似这样的错误，我们只需要关注APPLICATIONS DISABLED部分的提示信息，如这里就是缺少odbc，使用命令安装即可</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">yum install unixODBC unixODBC-devel</div></pre></td></tr></table></figure>
</li>
</ul>
<h1 id="集群的配置"><a href="#集群的配置" class="headerlink" title="集群的配置"></a>集群的配置</h1><h2 id="单机多节点"><a href="#单机多节点" class="headerlink" title="单机多节点"></a>单机多节点</h2><p>RabbitMQ启动之后，默认的名称是Rabbit，监听的端口是5672，如果想在同一台机器上启动多个节点，那么其他的节点就会因为节点名称和端口与默认的冲突而导致启动失败，可以通过设置环境变量来实现，具体方法如下：</p>
<ol>
<li>先关闭上面的网页管理插件</li>
</ol>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">rabbitmq-plugins <span class="built_in">disable</span> rabbitmq_management</div></pre></td></tr></table></figure>
<ol>
<li>首先在机器上设置设置两个节点<strong>rabbit和rabbit_01</strong></li>
</ol>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">rabbitmqctl stop //先停止运行节点，再进行集群部署</div><div class="line"><span class="comment">#启动第一个节点</span></div><div class="line">RABBITMQ_NODE_PORT=5672 RABBITMQ_NODENAME=rabbit rabbitmq-server -detached</div><div class="line"><span class="comment">#启动第二个节点</span></div><div class="line">RABBITMQ_NODE_PORT=5673 RABBITMQ_NODENAME=rabbit_1 rabbitmq-server -detached</div></pre></td></tr></table></figure>
<ol>
<li>将第二个节点rabbit-01加入到第一个集群节点rabbit中</li>
</ol>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#停止rabbit_1节点的应用</span></div><div class="line">rabbitmqctl -n rabbit_1@localhost stop_app</div><div class="line"><span class="comment">#将rabbit_1添加到集群节点rabbit中去</span></div><div class="line">rabbitmqctl -n rabbit_1@localhost join_cluster rabbit@localhost</div><div class="line"><span class="comment">#查看集群节点状态</span></div><div class="line">rabbitmqctl cluster_status</div><div class="line"><span class="comment">#启动rabbit_1节点应用</span></div><div class="line">rabbitmqctl -n rabbit_1@localhost start_app</div><div class="line"><span class="comment">#查看rabbit_1节点的状态</span></div><div class="line">rabbitmqctl -n rabbit_1 status</div></pre></td></tr></table></figure>
<p>如下集群配置完毕</p>
<p><img src="http://oy09glbzm.bkt.clouddn.com/18-1-26/62559007.jpg-blog" alt=""></p>
<h2 id="多机多节点配置"><a href="#多机多节点配置" class="headerlink" title="多机多节点配置"></a>多机多节点配置</h2><p>不同于单机多节点的情况，在多机环境，如果要在cluster集群内部署多个节点，需要注意两个方面：</p>
<ul>
<li><strong>保证需要部署的这几个节点在同一个局域网内</strong></li>
<li><strong>需要有相同的Erlang Cookie，否则不能进行通信，为保证cookie的完全一致，采用从一个节点copy的方式</strong></li>
</ul>
<p>环境介绍</p>
<table>
<thead>
<tr>
<th>RabbitMQ节点</th>
<th>IP地址</th>
<th>工作模式</th>
<th>操作系统</th>
</tr>
</thead>
<tbody>
<tr>
<td>rabbitmqCluster</td>
<td>186.16.195.24</td>
<td>DISK</td>
<td>CentOS 7.0 - 64位</td>
</tr>
<tr>
<td>rabbitmqCluster01</td>
<td>186.16.195.25</td>
<td>DISK</td>
<td>CentOS 7.0 - 64位</td>
</tr>
<tr>
<td>rabbitmqCluster02</td>
<td>186.16.195.26</td>
<td>DISK</td>
<td>CentOS 7.0 - 64位</td>
</tr>
</tbody>
</table>
<p>cluster部署过程：</p>
<ul>
<li>局域网配置</li>
</ul>
<p>分别在三个节点的/etc/hosts下设置相同的配置信息</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">186.16.195.24 rabbitmqCluster</div><div class="line">186.16.195.25 rabbitmqCluster01</div><div class="line">186.16.195.26 rabbitmqCluster02</div></pre></td></tr></table></figure>
<ul>
<li><strong>设置不同节点间同一认证的Erlang Cookie</strong><br>采用从主节点copy的方式保持Cookie的一致性</li>
</ul>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">[root@rabbitmqCluster01]<span class="comment"># scp /var/lib/rabbitmq/.erlang.cookie 186.16.195.25:/var/lib/rabbitmq</span></div><div class="line">[root@rabbitmqCluster02]<span class="comment"># scp /var/lib/rabbitmq/.erlang.cookie 186.16.195.26:/var/lib/rabbitmq12</span></div></pre></td></tr></table></figure>
<ul>
<li><strong>使用 -detached运行各节点</strong></li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">rabbitmqctl stop</div><div class="line">rabbitmq-server -detached 12</div></pre></td></tr></table></figure>
<ul>
<li><strong>查看各节点的状态</strong></li>
</ul>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">[root@rabbitmqCluster]<span class="comment">#rabbitmqctl cluster_status</span></div><div class="line">[root@rabbitmqCluster01]<span class="comment">#rabbitmqctl cluster_status</span></div><div class="line">[root@rabbitmqCluster02]<span class="comment">#rabbitmqctl cluster_status</span></div></pre></td></tr></table></figure>
<ul>
<li><strong>创建并部署集群</strong>，以rabbitmqCluster01节点为例：</li>
</ul>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">[root@rabbitmqCluster01]<span class="comment">#rabbitmqctl stop_app</span></div><div class="line">[root@rabbitmqCluster01]<span class="comment">#rabbitmqctl join_cluster rabbit@rabbitmqCluster</span></div><div class="line">[root@rabbitmqCluster01]<span class="comment">#rabbitmqctl start_app123</span></div></pre></td></tr></table></figure>
<ul>
<li><strong>查看集群状态</strong></li>
</ul>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">[root@rabbitmqCluster]<span class="comment">#rabbitmqctl cluster_status</span></div></pre></td></tr></table></figure>
<h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ol>
<li><a href="http://www.linuxidc.com/Linux/2016-03/129557.htm" target="_blank" rel="external">CentOS7下RabbitMQ服务安装配置</a></li>
<li><a href="https://www.jianshu.com/p/79ca08116d57" target="_blank" rel="external">消息队列之 RabbitMQ</a></li>
<li><a href="http://blog.csdn.net/woogeyu/article/details/51119101" target="_blank" rel="external">RabbitMQ分布式集群架构和高可用性（HA）</a></li>
<li><a href="https://geewu.gitbooks.io/rabbitmq-quick/content/" target="_blank" rel="external">https://geewu.gitbooks.io/rabbitmq-quick/content/</a></li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;介绍&quot;&gt;&lt;a href=&quot;#介绍&quot; class=&quot;headerlink&quot; title=&quot;介绍&quot;&gt;&lt;/a&gt;介绍&lt;/h1&gt;&lt;p&gt;RabbitMQ是一个在AMQP基础上完成的，可复用的企业消息系统。它是由Erlang语言开发。&lt;/p&gt;
&lt;p&gt;AMQP：Advanced Message Queue，高级消息队列协议。他是应用层协议的一个开放标准，为面向消息的中间件设计，基于此协议的客户端与消息中间件可传递消息，并不受产品、开发语言等条件的限制。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;RabbitMQ 最初起源于金融系统，用于在分布式系统中存储转发消息，在易用性、扩展性、高可用性等方面表现不俗。具体特点包括：
    
    </summary>
    
    
      <category term="RabbitMQ" scheme="http://www.wanqhblog.top/tags/RabbitMQ/"/>
    
      <category term="CentOS" scheme="http://www.wanqhblog.top/tags/CentOS/"/>
    
  </entry>
  
  <entry>
    <title>CentOS7下Kafka的安装介绍</title>
    <link href="http://www.wanqhblog.top/2018/01/25/CentOS-Kafka/"/>
    <id>http://www.wanqhblog.top/2018/01/25/CentOS-Kafka/</id>
    <published>2018-01-25T06:29:14.000Z</published>
    <updated>2018-01-25T08:20:10.660Z</updated>
    
    <content type="html"><![CDATA[<h1 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h1><blockquote>
<p><strong>Kafka</strong>是分布式发布-订阅消息系统，最初由LinkedIn公司开发，之后成为之后成为Apache基金会的一部分，由<a href="https://baike.baidu.com/item/Scala" target="_blank" rel="external">Scala</a>和<a href="https://baike.baidu.com/item/Java/85979" target="_blank" rel="external">Java</a>编写。Kafka是一种快速、可扩展的、设计内在就是分布式的，分区的和可复制的提交日志服务。</p>
<p>它与传统系统相比，有以下不同：</p>
<ul>
<li>它被设计为一个分布式系统，易于向外扩展；</li>
<li>它同时为发布和订阅提供高吞吐量；</li>
<li>它支持多订阅者，当失败时能自动平衡消费者；</li>
<li>它将消息持久化到磁盘，因此可用于批量消费，例如<a href="http://en.wikipedia.org/wiki/Extract,_transform,_load" target="_blank" rel="external">ETL</a>，以及实时应用程序。 <a id="more"></a></li>
</ul>
</blockquote>
<h1 id="安装kakfka"><a href="#安装kakfka" class="headerlink" title="安装kakfka"></a>安装kakfka</h1><p>从<a href="https://kafka.apache.org/downloads" target="_blank" rel="external">官网下载</a>Kafka安装包，解压安装，或直接使用命令下载。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">wget http://mirror.bit.edu.cn/apache/kafka/1.0.0/kafka_2.11-1.0.0.tgz</div></pre></td></tr></table></figure>
<p>解压安装</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">tar -zvxf kafka_2.11-1.0.0.tgz -C /usr/<span class="built_in">local</span>/</div><div class="line">d /usr/<span class="built_in">local</span>/kafka_2.11-1.0.0/</div></pre></td></tr></table></figure>
<p>修改配置文件</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">vim config/server.properties</div></pre></td></tr></table></figure>
<p>修改其中</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">broker.id=1</div><div class="line">log.dirs=data/kafka-logs</div></pre></td></tr></table></figure>
<h1 id="功能验证"><a href="#功能验证" class="headerlink" title="功能验证"></a>功能验证</h1><h2 id="启动zookeeper"><a href="#启动zookeeper" class="headerlink" title="启动zookeeper"></a>启动zookeeper</h2><p>使用安装包中的脚本启动单节点Zookeeper实例：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">bin/zookeeper-server-start.sh -daemon config/zookeeper.properties</div></pre></td></tr></table></figure>
<h2 id="启动Kafka服务"><a href="#启动Kafka服务" class="headerlink" title="启动Kafka服务"></a>启动Kafka服务</h2><p>使用kafka-server-start.sh启动kafka服务：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">bin/kafka-server-start.sh config/server.properties</div></pre></td></tr></table></figure>
<h2 id="创建Topic"><a href="#创建Topic" class="headerlink" title="创建Topic"></a>创建Topic</h2><p>使用kafka-topics.sh 创建但分区单副本的topic test </p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">bin/kafka-topics.sh --create --zookeeper localhost:2181 --replication-factor 1 --partitions 1 --topic <span class="built_in">test</span></div></pre></td></tr></table></figure>
<h2 id="查看Topic"><a href="#查看Topic" class="headerlink" title="查看Topic"></a>查看Topic</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">bin/kafka-topics.sh --list --zookeeper localhost:2181</div></pre></td></tr></table></figure>
<p><img src="http://oy09glbzm.bkt.clouddn.com/18-1-25/43812418.jpg-blog" alt=""></p>
<h2 id="产生消息"><a href="#产生消息" class="headerlink" title="产生消息"></a>产生消息</h2><p>使用kafka-console-producer.sh 发送消息</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">bin/kafka-console-producer.sh --broker-list localhost:9092 --topic <span class="built_in">test</span></div></pre></td></tr></table></figure>
<p><img src="http://oy09glbzm.bkt.clouddn.com/18-1-25/84256783.jpg-blog" alt=""></p>
<h2 id="消费消息"><a href="#消费消息" class="headerlink" title="消费消息"></a>消费消息</h2><p>使用kafka-console-consumer.sh 接收消息并在终端打印</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">bin/kafka-console-consumer.sh --zookeeper localhost:2181 --topic <span class="built_in">test</span> --from-beginning</div></pre></td></tr></table></figure>
<h2 id="删除Topic"><a href="#删除Topic" class="headerlink" title="删除Topic"></a>删除Topic</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">bin/kafka-topics.sh --delete --zookeeper localhost:2181 --topic <span class="built_in">test</span></div></pre></td></tr></table></figure>
<h2 id="查看描述-Topic-信息"><a href="#查看描述-Topic-信息" class="headerlink" title="查看描述 Topic 信息"></a>查看描述 Topic 信息</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">bin/kafka-topics.sh --describe --zookeeper localhost:2181 --topic <span class="built_in">test</span></div></pre></td></tr></table></figure>
<p><img src="http://oy09glbzm.bkt.clouddn.com/18-1-25/44126022.jpg-blog" alt=""></p>
<p>第一行给出了所有分区的摘要，每个附加行给出了关于一个分区的信息。 由于我们只有一个分区，所以只有一行。</p>
<p>“Leader”: 是负责给定分区的所有读取和写入的节点。 每个节点将成为分区随机选择部分的领导者。</p>
<p>“Replicas”: 是复制此分区日志的节点列表，无论它们是否是领导者，或者即使他们当前处于活动状态。</p>
<p>“Isr”: 是一组“同步”副本。这是复制品列表的子集，当前活着并被引导到领导者。</p>
<h1 id="集群配置"><a href="#集群配置" class="headerlink" title="集群配置"></a>集群配置</h1><p>Kafka支持两种模式的集群搭建：</p>
<ol>
<li>单机多broker集群配置；</li>
<li>多机多broker集群配置。</li>
</ol>
<h2 id="单机多breoker"><a href="#单机多breoker" class="headerlink" title="单机多breoker"></a>单机多breoker</h2><p>利用单节点部署多个broker。不同的broker不同的id，监听端口以及日志目录，如：</p>
<ul>
<li>将配置文件复制两份</li>
</ul>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">cp config/server.properties config/server-1.properties</div><div class="line">cp config/server.properties config/server-2.properties</div></pre></td></tr></table></figure>
<ul>
<li>修改配置文件信息，这里为了对应，将上面的broker.id改为了0</li>
</ul>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">vim config/server-1.properties</div><div class="line"><span class="comment">#修改内容</span></div><div class="line">broker.id=1</div><div class="line">listeners=PLAINTEXT://your.host.name:9093</div><div class="line">log.dirs=/data/kafka-logs-1</div><div class="line"></div><div class="line"></div><div class="line">vim config/server-2.properties</div><div class="line"><span class="comment">#修改内容</span></div><div class="line">broker.id=2</div><div class="line">listeners=PLAINTEXT://your.host.name:9094</div><div class="line">log.dirs=/data/kafka-logs-2</div></pre></td></tr></table></figure>
<ul>
<li>启动多个kafka服务</li>
</ul>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">in</span>/kafka-server-start.sh config/server-1.properties </div><div class="line"></div><div class="line">bin/kafka-server-start.sh config/server-2.properties</div></pre></td></tr></table></figure>
<ul>
<li>最后按照上面方法产生和消费信息。</li>
</ul>
<h2 id="多机多broker"><a href="#多机多broker" class="headerlink" title="多机多broker"></a>多机多broker</h2><p>分别在多个节点按上述方式安装Kafka，配置启动多个Zookeeper 实例。如：192.168.18.130、192.168.18.131、192.168.18.132三台机器</p>
<p>分别配置多个机器上的Kafka服务 设置不同的broke id，zookeeper.connect设置如下:</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">zookeeper.connect=192.168.18.130:2181,192.168.18.131:2181,192.168.18.132:2181</div></pre></td></tr></table></figure>
<hr>
<h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><ol>
<li><a href="https://www.mtyun.com/library/how-to-install-kafka-on-centos7" target="_blank" rel="external">在CentOS 7上安装Kafka</a></li>
<li><a href="http://www.infoq.com/cn/articles/apache-kafka/" target="_blank" rel="external">Apache Kafka：下一代分布式消息系统</a></li>
<li><a href="http://www.54tianzhisheng.cn/2018/01/04/Kafka/#%E4%BD%BF%E7%94%A8-Kafka-Connect-%E6%9D%A5%E5%AF%BC%E5%85%A5-%E5%AF%BC%E5%87%BA%E6%95%B0%E6%8D%AE" target="_blank" rel="external">Kafka 安装及快速入门</a></li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;介绍&quot;&gt;&lt;a href=&quot;#介绍&quot; class=&quot;headerlink&quot; title=&quot;介绍&quot;&gt;&lt;/a&gt;介绍&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Kafka&lt;/strong&gt;是分布式发布-订阅消息系统，最初由LinkedIn公司开发，之后成为之后成为Apache基金会的一部分，由&lt;a href=&quot;https://baike.baidu.com/item/Scala&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Scala&lt;/a&gt;和&lt;a href=&quot;https://baike.baidu.com/item/Java/85979&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Java&lt;/a&gt;编写。Kafka是一种快速、可扩展的、设计内在就是分布式的，分区的和可复制的提交日志服务。&lt;/p&gt;
&lt;p&gt;它与传统系统相比，有以下不同：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;它被设计为一个分布式系统，易于向外扩展；&lt;/li&gt;
&lt;li&gt;它同时为发布和订阅提供高吞吐量；&lt;/li&gt;
&lt;li&gt;它支持多订阅者，当失败时能自动平衡消费者；&lt;/li&gt;
&lt;li&gt;它将消息持久化到磁盘，因此可用于批量消费，例如&lt;a href=&quot;http://en.wikipedia.org/wiki/Extract,_transform,_load&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;ETL&lt;/a&gt;，以及实时应用程序。
    
    </summary>
    
    
      <category term="Kafka" scheme="http://www.wanqhblog.top/tags/Kafka/"/>
    
  </entry>
  
  <entry>
    <title>SpingCloudBus整合RabbitMQ</title>
    <link href="http://www.wanqhblog.top/2018/01/25/SpingCLoudBusRabbitMQ/"/>
    <id>http://www.wanqhblog.top/2018/01/25/SpingCLoudBusRabbitMQ/</id>
    <published>2018-01-25T06:22:55.000Z</published>
    <updated>2018-01-25T01:30:32.798Z</updated>
    
    <content type="html"><![CDATA[<h1 id="SpringCloudBus介绍"><a href="#SpringCloudBus介绍" class="headerlink" title="SpringCloudBus介绍"></a>SpringCloudBus介绍</h1><blockquote>
<p>SpringCloudBus：消息总线，可以将分布式系统的节点与轻量级消息代理连接，然后实现广播状态更改（如配置更改）或广播其他管理指令。总线就像一个分布式执行器，用于扩展SpringBoot应用程序，但可以用作应用程序之间的通信通道。</p>
<p>消息代理是一种消息验证、传输、路由的架构模式。它是一个中间产品，核心是一个消息的路由程序，用来实现接收和分发消息，并根据设定好的消息处理流来转发给正确的应用。通常一下场景需要使用消息代理<a id="more"></a></p>
<ul>
<li>将消息路由到一个或多个目的地</li>
<li>消息转化为其他的表达方式</li>
<li>执行消息的聚集、消息的分解，并将结果发送到它们的目的地，然后重新组合响应返回给信息用户</li>
<li>调用Web服务来检索数据</li>
<li>响应事件或错误</li>
<li>使用发布-订阅模式提供内容或基于主题的消息内容。</li>
</ul>
</blockquote>
<h1 id="RabbitMQ实现消息总线"><a href="#RabbitMQ实现消息总线" class="headerlink" title="RabbitMQ实现消息总线"></a>RabbitMQ实现消息总线</h1><p>RibbitMQ是实现了高级消息队列协议（AMQP）的开源消息代理软件，也称为面向消息的中间件。这里假设你已经了解RabbitMQ，具体的安装就不介绍了，可自行Google。</p>
<h2 id="SpringBoot整合RabbitMQ"><a href="#SpringBoot整合RabbitMQ" class="headerlink" title="SpringBoot整合RabbitMQ"></a>SpringBoot整合RabbitMQ</h2><p>新建一个SpringBoot项目，这里命名hello-rabbitmq，然后添加<code>amqp</code>依赖。</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-amqp<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">		<span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-actuator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">		<span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></div><div class="line">		<span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div></pre></td></tr></table></figure>
<p>在配置文件<code>application.properties</code>中添加<code>RabbitMQ</code>的相关配置</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">spring.application.name=rabbitmq-hello</div><div class="line"></div><div class="line">#配置rabbitmq的主机</div><div class="line">spring.rabbitmq.host=<span class="number">192.168</span>.18.133</div><div class="line">#访问端口</div><div class="line">spring.rabbitmq.port=<span class="number">5672</span></div><div class="line">#安装RabbitMQ时配置的用户名</div><div class="line">spring.rabbitmq.username=wqh</div><div class="line">#安装RabbitMQ时配置的密码</div><div class="line">spring.rabbitmq.password=wqh</div></pre></td></tr></table></figure>
<p>然后创建消息生产者Sender，这里发送一串字符串到hello的消息对列中</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/*</span></div><div class="line"><span class="comment"> *消息生产者Sender使用AmqpTemplate接口的实例来实现消息的发送</span></div><div class="line"><span class="comment"> */</span></div><div class="line"><span class="meta">@Component</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Sender</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Logger logger = LoggerFactory.getLogger(Sender.class);</div><div class="line">    <span class="meta">@Autowired</span></div><div class="line">    <span class="keyword">private</span> AmqpTemplate amqpTemplate;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sender</span><span class="params">()</span></span>&#123;</div><div class="line">        String context = <span class="string">"wqh say hello "</span> + <span class="keyword">new</span> Date();</div><div class="line">        logger.info(<span class="string">"发送消息=========》》》》&#123;&#125;"</span>,context);</div><div class="line">        <span class="keyword">this</span>.amqpTemplate.convertAndSend(<span class="string">"hello"</span>,context);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>消息接收者Receiver，实现了对hello消息队列的消费</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment"> * 消息消费者Receiver 使用<span class="doctag">@RabbitListener</span>注解定义该类对hello队列的监听, 并用<span class="doctag">@RabbitHandler</span> 注解来指定对消息的处理方法</span></div><div class="line"><span class="comment"> *</span></div><div class="line"><span class="comment"> */</span></div><div class="line"><span class="meta">@Component</span></div><div class="line"><span class="meta">@RabbitListener</span>(queues = <span class="string">"hello"</span>)</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Receiver</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Logger logger = LoggerFactory.getLogger(Receiver.class);</div><div class="line"></div><div class="line">    <span class="meta">@RabbitHandler</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">receiver</span><span class="params">(String hello)</span></span>&#123;</div><div class="line">        logger.info(<span class="string">"接收消息=====》》》》》&#123;&#125;"</span>,hello);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>创建RabbitMQ的配置类</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment"> *  RabbitMQ的配置类，用来配队列、交换器、路由等高级信息</span></div><div class="line"><span class="comment"> */</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RabbitConfig</span> </span>&#123;</div><div class="line">    <span class="meta">@Bean</span></div><div class="line">    <span class="function"><span class="keyword">public</span> Queue <span class="title">helloConfig</span><span class="params">()</span></span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Queue(<span class="string">"hello"</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>创建测试类</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@RunWith</span>(SpringRunner.class)</div><div class="line"><span class="meta">@SpringBootTest</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RabbitmqApplicationTests</span> </span>&#123;</div><div class="line">	<span class="meta">@Autowired</span></div><div class="line">	<span class="keyword">private</span> Sender sender;</div><div class="line">	<span class="meta">@Test</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">hello</span><span class="params">()</span></span>&#123;</div><div class="line">		sender.sender();</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>上面说到一个hello队列，所以这里需要在RabbitMQ中添加一个hello队列，进入RabbitMQ的管理页面。</p>
<p><img src="http://oy09glbzm.bkt.clouddn.com/18-1-24/84351839.jpg?imageView2/0/q/75|watermark/2/text/d2FucWhibG9nLnRvcA==/font/5a6L5L2T/fontsize/300/fill/IzJDMUJFRQ==/dissolve/100/gravity/SouthEast/dx/10/dy/10" alt=""></p>
<p>启动项目，运行测试方法：</p>
<p><img src="http://oy09glbzm.bkt.clouddn.com/18-1-24/73497814.jpg?imageView2/0/q/75|watermark/2/text/d2FucWhibG9nLnRvcA==/font/5a6L5L2T/fontsize/300/fill/IzJDMUJFRQ==/dissolve/100/gravity/SouthEast/dx/10/dy/10" alt=""></p>
<h2 id="SpringCloudBus整合RabbitMQ"><a href="#SpringCloudBus整合RabbitMQ" class="headerlink" title="SpringCloudBus整合RabbitMQ"></a>SpringCloudBus整合RabbitMQ</h2><p>前面使用SpringCloudConfig构建了一个配置中心，<a href="http://www.wanqhblog.top/2018/01/19/SpringCloudConfig/">传送门</a>  。前面的结构中如果远程仓库配置发生改变，我们需要调用每个服务的<code>/refresh</code>接口或者重启服务才能获取到最新的配置信息，这种方法在微服务架构中几乎是完全不可行的。使用SpringCloudBus和RabbitMQ整合可以优雅的实现应用配置的动态刷新。直接改造之前的config-client项目</p>
<ul>
<li>添加<code>spring-cloud-starter-bus-amqp</code>依赖</li>
</ul>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-bus-amqp<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div></pre></td></tr></table></figure>
<ul>
<li>在配置文件中添加RabbitMQ的相关配置，这里需要注意的要忽略权限，不然访问<code>/bus/refresh</code>接口的时候回返回<code>Full authentication is required to access this resource</code> 。</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">#忽略权限拦截</div><div class="line">management.security.enabled=<span class="keyword">false</span></div><div class="line"></div><div class="line">spring.rabbitmq.host=<span class="number">192.168</span>.18.133</div><div class="line">spring.rabbitmq.port=<span class="number">5672</span></div><div class="line">spring.rabbitmq.username=wqh</div><div class="line">spring.rabbitmq.password=wqh</div></pre></td></tr></table></figure>
<ul>
<li>将配置文件复制一份，修改端口，然后打包。分别启动eureka-server服务发现、config-server配置中心、两个config-client实例。项目结构</li>
</ul>
<p><img src="http://oy09glbzm.bkt.clouddn.com/18-1-24/99612148.jpg?imageView2/0/q/75|watermark/2/text/d2FucWhibG9nLnRvcA==/font/5a6L5L2T/fontsize/300/fill/IzJDMUJFRQ==/dissolve/100/gravity/SouthEast/dx/10/dy/10" alt=""></p>
<ul>
<li>启动项目之后访问<code>http://localhost:60000/get_name</code>和<code>http://localhost:60001/get_name</code>获取到form属性。然后修改仓库中的中属性的值，会发现获取的到值并没有改变</li>
<li>然后发出一个post请求到一个config-client，访问接口<code>/bus/refresh</code> ，发现这时候两个服务中都可以获取打最新的值</li>
</ul>
<p>在<code>/bus/refresh</code> 接口中有一个参数destination，该参数可以指定具体的实例刷新配置，还可指定具体的服务刷新配置。</p>
<ul>
<li><p>指定实例，只会触发端口号为60000的</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">/bus/refresh?destination=config-client:60000</div></pre></td></tr></table></figure>
</li>
<li><p>指定服务，这里会触发config-client服务的所有实例进行刷新</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">/bus/refresh?destination=config-client:**</div></pre></td></tr></table></figure>
</li>
</ul>
<p>在《SpringCloud微服务实战》中提到了一个系统架构的优化，就是将消息总线加入到配置中心，然后通过destination参数来指定更新配置的服务或实例。</p>
<p><img src="http://oy09glbzm.bkt.clouddn.com/18-1-24/87259611.jpg-blog" alt=""></p>
<hr>
<p>参考：《SpringCloud微服务实战》</p>
<p>示例地址：<a href="https://gitee.com/wqh3520/spring-cloud-1-9" target="_blank" rel="external">https://gitee.com/wqh3520/</a></p>
<p>原文地址： <a href="http://www.wanqhblog.top/2018/01/24/SpingCLoudBusRabbitMQ/">SpingCloudBus整合RabbitMQ</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;SpringCloudBus介绍&quot;&gt;&lt;a href=&quot;#SpringCloudBus介绍&quot; class=&quot;headerlink&quot; title=&quot;SpringCloudBus介绍&quot;&gt;&lt;/a&gt;SpringCloudBus介绍&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;SpringCloudBus：消息总线，可以将分布式系统的节点与轻量级消息代理连接，然后实现广播状态更改（如配置更改）或广播其他管理指令。总线就像一个分布式执行器，用于扩展SpringBoot应用程序，但可以用作应用程序之间的通信通道。&lt;/p&gt;
&lt;p&gt;消息代理是一种消息验证、传输、路由的架构模式。它是一个中间产品，核心是一个消息的路由程序，用来实现接收和分发消息，并根据设定好的消息处理流来转发给正确的应用。通常一下场景需要使用消息代理
    
    </summary>
    
      <category term="SpringCloud" scheme="http://www.wanqhblog.top/categories/SpringCloud/"/>
    
    
      <category term="RabbitMQ" scheme="http://www.wanqhblog.top/tags/RabbitMQ/"/>
    
      <category term="SpringCloud" scheme="http://www.wanqhblog.top/tags/SpringCloud/"/>
    
  </entry>
  
  <entry>
    <title>SpringCloud分布式配置中心Config</title>
    <link href="http://www.wanqhblog.top/2018/01/19/SpringCloudConfig/"/>
    <id>http://www.wanqhblog.top/2018/01/19/SpringCloudConfig/</id>
    <published>2018-01-19T10:10:44.000Z</published>
    <updated>2018-01-19T09:04:34.303Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>SpringCloudConfig是SpringCloud创建的用来为分布式系统中的基础设施和微服务应用提供集中化的外部配置支持，它分为客户端和服务端两部分。服务端也称为分布式配置中心，是一个独立的微服务应用，用来连接配置仓库并为客户端提供获取配置信息，加密/解密信息等访问接口。而客户端则是微服务架构中各微服务应用或基础设施，通过指定的配置中心来管理应用资源与业务相关的配置内容，并在启动的时候从配置中心获取和加载配置信息。<a id="more"></a></p>
</blockquote>
<h1 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h1><h2 id="构建配置中心"><a href="#构建配置中心" class="headerlink" title="构建配置中心"></a>构建配置中心</h2><p>新建一个SpringBoot项目，命名config-server；添加一下依赖：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-config-server<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>在主类上使用<code>@EnableConfigServer</code>注解来开启配置中心服务端功能。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@SpringBootApplication</span></div><div class="line"><span class="meta">@EnableConfigServer</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConfigserverApplication</span> </span>&#123;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">		SpringApplication.run(ConfigserverApplication.class, args);</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>在application.properties文件中添加git仓库配置：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">spring.application.name=config-server</div><div class="line">server.port=<span class="number">9000</span></div><div class="line">#表示配置中心所在仓库的位置</div><div class="line">spring.cloud.config.server.git.uri=https:<span class="comment">//github.com/wqh8522/spring-cloud-config.git</span></div><div class="line">#仓库路径下的的相对搜索位置，可以配置多个</div><div class="line">spring.cloud.config.server.git.search-paths=config-client</div><div class="line">#git的用户名</div><div class="line">spring.cloud.config.server.git.username=username</div><div class="line">#git的密码</div><div class="line">spring.cloud.config.server.git.password=password</div></pre></td></tr></table></figure></p>
<p>然后启动项目，如果成功启动，继续下面步骤。</p>
<h2 id="仓库配置"><a href="#仓库配置" class="headerlink" title="仓库配置"></a>仓库配置</h2><p>根据上面git配置信息指定的仓库位置创建一个config-client目录作为配置仓库，并新建一下4个文件：</p>
<ul>
<li>wqh.properties： form=wqh_default_1.0</li>
<li>wqh-dev.properties：form=wqh_dev_1.0</li>
<li>wqh-prod.properties：form=wqh_prod_1.0</li>
<li>wqh-test.properties：form=wqh_test_1.0</li>
</ul>
<p>因为使用的是git做配置仓库，所以SpringCloudConfig天然就支持对微服务应用配置信息的版本管理，所以在git仓库中添加一个分支，将上面的1.0改为2.0，以测试版本控制。这里对于git的操作省略。<br>接下来可以通过浏览器、postman、curl等工具直接访问配置内容。配置信息的url和配置文件的映射关系如下：</p>
<ul>
<li><code>/{application}/{profile}[/{label}]</code></li>
<li><code>/{application}-{profile}.yml</code>或<code>/{application}-{profile}.properties</code></li>
<li><code>/{label}/{application}-{profile}.yml</code>或<code>/{label}/{application}-{profile}.properties</code><br>这里的url会映射<code>{application}-{profile}.yml</code>对应的配置文件。{label}对应git上不同的分支，默认是master。<br>访问url：<code>http://localhost:9000/wqh/test/config-label</code>，该url的是要访问config-label分支，wqh应用的test环境。<br><img src="http://oy09glbzm.bkt.clouddn.com/18-1-19/90513660.jpg?imageView2/0/q/75|watermark/2/text/d2FucWhibG9nLnRvcA==/font/5a6L5L2T/fontsize/300/fill/IzJDMUJFRQ==/dissolve/100/gravity/SouthEast/dx/10/dy/10" alt=""><br>可以看到该json返回了应用名wqh，环境名test，分支名config-label，以及test环境和默认环境配置的内容。配置服务器在从git中获取到配置信息后，实际上会存储一份在config-server的文件系统，也就是复制一份在本地存储。<h2 id="客户端配置"><a href="#客户端配置" class="headerlink" title="客户端配置"></a>客户端配置</h2>同样新建一个SpringBoot项目，命名config-client，映入依赖：<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-config<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div></pre></td></tr></table></figure>
</li>
</ul>
<p>创建bootstrap.properties文件来获取配置文件的config-server位置。属性配置必须在bootstrap.properties文件中才正确加载config-server中的配置信息。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">#配置服务名</div><div class="line">spring.application.name=wqh</div><div class="line">#服务id</div><div class="line">server.port=<span class="number">60000</span></div><div class="line">#配置对应文件规则中的&#123;profile&#125;部分</div><div class="line">spring.cloud.config.profile=test</div><div class="line">#配置对应文件规则中的&#123;label&#125;</div><div class="line">spring.cloud.config.label=config-label</div><div class="line">#配置中心的地址</div><div class="line">spring.cloud.config.uri=http:<span class="comment">//localhost:9000/</span></div></pre></td></tr></table></figure></p>
<p>创建一个接口来获取配置中心的name属性：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@RestController</span></div><div class="line"><span class="meta">@RefreshScope</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloController</span> </span>&#123;</div><div class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;form&#125;"</span>)</div><div class="line">    <span class="keyword">private</span> String form;</div><div class="line"></div><div class="line">    <span class="meta">@Autowired</span></div><div class="line">    <span class="keyword">private</span> Environment environment;</div><div class="line">    <span class="meta">@GetMapping</span>(<span class="string">"/get_name"</span>)</div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">name</span><span class="params">()</span></span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="string">"form:"</span>+form;</div><div class="line">    &#125;</div><div class="line">    <span class="meta">@GetMapping</span>(<span class="string">"/get_name_env"</span>)</div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">name_env</span><span class="params">()</span></span>&#123;</div><div class="line">        <span class="keyword">return</span> environment.getProperty(<span class="string">"form"</span>,<span class="string">"undefine"</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>访问接口即可获取指定的信息。</p>
<h1 id="配置介绍"><a href="#配置介绍" class="headerlink" title="配置介绍"></a>配置介绍</h1><p>架构<br><img src="http://oy09glbzm.bkt.clouddn.com/18-1-19/84498860.jpg?imageView2/0/q/75|watermark/2/text/d2FucWhibG9nLnRvcA==/font/5a6L5L2T/fontsize/300/fill/IzJDMUJFRQ==/dissolve/100/gravity/SouthEast/dx/10/dy/10" alt=""><br>客户端从配置管理中获取配置流程：</p>
<blockquote>
<ol>
<li>应用启动，根据bootstrap.properties中配置的应用名{application}、环境名{profile}、分支名{label}，行配置中心获取配置信息。</li>
<li>ConfigServer根据自己维护的Git仓库信息和客户端传递过来的配置定位信息去查找配置信息。</li>
<li>通过git clone命令将找到的配置信息下载到ConfigServer的文件系统中。</li>
<li>ConfigServer创建Spring的ApplicationContext实例，并从git本地仓库中加载配置文件，最后将这些配置文件内容读取出来返回给客户端</li>
<li>客户端应用在获得外部配置文件后加载到客户端ApplicationContext实例，该配置内容的优先级高于客户端Jar包内部的配置内容，所以在Jar包中重复的内容将不再被加载。</li>
</ol>
</blockquote>
<h2 id="服务端配置"><a href="#服务端配置" class="headerlink" title="服务端配置"></a>服务端配置</h2><ul>
<li><strong>URL占位符配置</strong><br>前面用到了三种占位符：<blockquote>
<ol>
<li>{application}：映射到客户端的spring.application.name</li>
<li>{profile}：映射到客户端的spring.profiles.active或者是application-{profile}.yml</li>
<li>{label}：映射到版本库的分支</li>
</ol>
</blockquote>
</li>
</ul>
<p>这些占位符除了用于表示配置文件的规则外，还可以用于ConfigServer中对git仓库的URI配置。如：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">spring.cloud.config.server.git.uri=https:<span class="comment">//github.com/wqh8522/spring-cloud-config/&#123;application&#125;</span></div></pre></td></tr></table></figure></p>
<p>使用{label}占位符需要注意，如果git仓库分支和标签包含“/”，那么{label}参数在HTTP的URL中应该使用“(_)”来替代。</p>
<h2 id="客户端配置-1"><a href="#客户端配置-1" class="headerlink" title="客户端配置"></a>客户端配置</h2><ul>
<li><p><strong>失败快速响应</strong><br>在客户端的bootstrap.properties文件中添加配置即可：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">spring.cloud.config.fail-fast=true</div></pre></td></tr></table></figure>
</li>
<li><p><strong>重试机制</strong><br>客户端需要使用spring-retry和spring-boot-starter-aop依赖：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">&lt;dependency&gt;</div><div class="line">    &lt;groupId&gt;org.springframework.retry&lt;/groupId&gt;</div><div class="line">    &lt;artifactId&gt;spring-retry&lt;/artifactId&gt;</div><div class="line">&lt;/dependency&gt;</div><div class="line">&lt;dependency&gt;</div><div class="line">    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</div><div class="line">    &lt;artifactId&gt;spring-boot-starter-aop&lt;/artifactId&gt;</div><div class="line">&lt;/dependency&gt;</div></pre></td></tr></table></figure>
</li>
</ul>
<p>重试机制的配置：</p>
<blockquote>
<p># 配置重试次数，默认为6<br>spring.cloud.config.retry.max-attempts=6<br># 间隔乘数，默认1.1<br>spring.cloud.config.retry.multiplier=1.1<br># 初始重试间隔时间，默认1000ms<br>spring.cloud.config.retry.initial-interval=1000<br># 最大间隔时间，默认2000ms<br>spring.cloud.config.retry.max-interval=2000</p>
</blockquote>
<ul>
<li><strong>动态刷新</strong><br>添加<code>spring-boot-starter-actuator</code>依赖<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&lt;dependency&gt;</div><div class="line">	&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</div><div class="line">	&lt;artifactId&gt;spring-boot-starter-actuator&lt;/artifactId&gt;</div><div class="line">&lt;/dependency&gt;</div></pre></td></tr></table></figure>
</li>
</ul>
<p>重启客户端，查看控制台可以看有/refresh接口，通过post请求发送到该接口就能刷新配置。<br><img src="http://oy09glbzm.bkt.clouddn.com/18-1-19/73847071.jpg?imageView2/0/q/75|watermark/2/text/d2FucWhibG9nLnRvcA==/font/5a6L5L2T/fontsize/300/fill/IzJDMUJFRQ==/dissolve/100/gravity/SouthEast/dx/10/dy/10" alt=""></p>
<h2 id="加密解密"><a href="#加密解密" class="headerlink" title="加密解密"></a>加密解密</h2><p>在jdk自带了限制长度的JCE，所以从Oracle官网下载不限制长度版本：<a href="http://download.oracle.com/otn-pub/java/jce/8/jce_policy-8.zip" target="_blank" rel="external">点击下载jce8</a>，解压之后得到三个文件<br><img src="http://oy09glbzm.bkt.clouddn.com/18-1-19/47236425.jpg?imageView2/0/q/75|watermark/2/text/d2FucWhibG9nLnRvcA==/font/5a6L5L2T/fontsize/300/fill/IzJDMUJFRQ==/dissolve/100/gravity/SouthEast/dx/10/dy/10" alt=""><br>将上面两个jar包复制到$JAVA_HOME$\jre\lib\security中将原来的覆盖</p>
<ul>
<li><strong>对称加密</strong><br>对称加密简单，只需要设置密钥即可，但是这个密钥必须配置在<strong>bootstrap.properties</strong>中，否则无法获取到密钥信息。如下：<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">encrypt.key=wqh3520</div></pre></td></tr></table></figure>
</li>
</ul>
<p>访问<code>/encrypt/status</code>接口：<br><img src="http://oy09glbzm.bkt.clouddn.com/18-1-19/65955540.jpg?imageView2/0/q/75|watermark/2/text/d2FucWhibG9nLnRvcA==/font/5a6L5L2T/fontsize/300/fill/IzJDMUJFRQ==/dissolve/100/gravity/SouthEast/dx/10/dy/10" alt=""><br>加密相关接口：</p>
<ol>
<li>/encrypt/status：查看加密状态；</li>
<li>/key：查看密钥端点；</li>
<li>/encrpt：对请求的body内容进行加密的端点；</li>
<li>/decrypt：对请求的body内容解密的端点。<br>接着使用postman等工具来加密解密数据：<br><img src="http://oy09glbzm.bkt.clouddn.com/18-1-19/97007333.jpg?imageView2/0/q/75|watermark/2/text/d2FucWhibG9nLnRvcA==/font/5a6L5L2T/fontsize/300/fill/IzJDMUJFRQ==/dissolve/100/gravity/SouthEast/dx/10/dy/10" alt=""><br>这里加密数据之后，拿到加密后的字符在配置文件中使用需要以{cipher}开头，如：<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">form=&#123;cipher&#125;<span class="number">0f</span>a7c3c11e5625fe3d90f03ac8820aaaa90336a4245b5d90cea61547ef94b8f7</div></pre></td></tr></table></figure>
</li>
</ol>
<ul>
<li><strong>非对称加密</strong><br>对称只要配置一个密钥即可，而非对称加密是密钥对，所以安全性比对称加密要搞。生成密钥对可以使用jdk自带的keytool工具，使用命令：<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">keytool -genkeypair -alias config-server -keyalg RSA -keystore config-server.keystore</div></pre></td></tr></table></figure>
</li>
</ul>
<p><img src="http://oy09glbzm.bkt.clouddn.com/18-1-19/64690270.jpg?imageView2/0/q/75|watermark/2/text/d2FucWhibG9nLnRvcA==/font/5a6L5L2T/fontsize/300/fill/IzJDMUJFRQ==/dissolve/100/gravity/SouthEast/dx/10/dy/10" alt=""><br>然后再命令执行的文件夹下会生成一个名为：<code>config-server.keystore</code>的文件，将其拷贝到配置中心的<code>src\main\resources</code>目录下。然后在配置文件中添加加密配置：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">encrypt.key-store.location=config-server.keystore</div><div class="line">encrypt.key-store.alias=config-server</div><div class="line">#在命令行第一次输入的密钥库口令</div><div class="line">encrypt.key-store.password=<span class="number">123456</span></div><div class="line">#最后输入的口令</div><div class="line">encrypt.key-store.secret=<span class="number">654321</span></div></pre></td></tr></table></figure></p>
<p>后面的操作与对称加密一样。</p>
<h1 id="配置高可用配置中心"><a href="#配置高可用配置中心" class="headerlink" title="配置高可用配置中心"></a>配置高可用配置中心</h1><h2 id="改造config-server"><a href="#改造config-server" class="headerlink" title="改造config-server"></a>改造config-server</h2><p>在微服务架构中，基本每一个服务都会配置成高可用的，配置中心也一样。对上面的config-server进行改造，添加eureka的依赖，是其作为服务在服务注册中心注册。<br><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&lt;dependency&gt;</div><div class="line">    &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;</div><div class="line">    &lt;artifactId&gt;spring-cloud-starter-eureka&lt;/artifactId&gt;</div><div class="line">&lt;/dependency&gt;</div></pre></td></tr></table></figure></p>
<p>在主类上使用<code>@EnableEurekaClient</code>或<code>@EnableDiscoveryClient</code>开启服务发现功能，使其成为eureka的一个客户端。然后添加eureka的相关配置：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">eureka.client.service-url.defaultZone=http:<span class="comment">//localhost:8888/eureka</span></div></pre></td></tr></table></figure></p>
<h2 id="改造config-client"><a href="#改造config-client" class="headerlink" title="改造config-client"></a>改造config-client</h2><p>与前面一样需要添加依赖，使用注解开启功能和配注册中心。另外还需要修改<code>spring.cloud.config.*</code>的配置，最终配置如下：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">#配置服务名</div><div class="line">spring.application.name=wqh</div><div class="line">#服务id</div><div class="line">server.port=<span class="number">60000</span></div><div class="line">eureka.client.service-url.defaultZone=http:<span class="comment">//localhost:8888/eureka</span></div><div class="line">#开启通过服务来访问config-server</div><div class="line">spring.cloud.config.discovery.enabled=<span class="keyword">true</span></div><div class="line">#指定配置中心注册的服务名</div><div class="line">spring.cloud.config.discovery.service-id=config-server</div><div class="line">spring.cloud.config.profile=dev</div></pre></td></tr></table></figure></p>
<hr>
<p>参考：《SpringCloud微服务实战》</p>
<p>源码地址：<a href="https://gitee.com/wqh3520/spring-cloud-1-9" target="_blank" rel="external">https://gitee.com/wqh3520/</a></p>
<p>原文地址：<a href="http://www.wanqhblog.top/2018/01/19/SpringCloudConfig/">SpringCloud分布式配置中心Config</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;SpringCloudConfig是SpringCloud创建的用来为分布式系统中的基础设施和微服务应用提供集中化的外部配置支持，它分为客户端和服务端两部分。服务端也称为分布式配置中心，是一个独立的微服务应用，用来连接配置仓库并为客户端提供获取配置信息，加密/解密信息等访问接口。而客户端则是微服务架构中各微服务应用或基础设施，通过指定的配置中心来管理应用资源与业务相关的配置内容，并在启动的时候从配置中心获取和加载配置信息。
    
    </summary>
    
      <category term="SpringCloud" scheme="http://www.wanqhblog.top/categories/SpringCloud/"/>
    
    
      <category term="SpringCloud" scheme="http://www.wanqhblog.top/tags/SpringCloud/"/>
    
      <category term="Config" scheme="http://www.wanqhblog.top/tags/Config/"/>
    
  </entry>
  
  <entry>
    <title>SpringCloudAPI网关服务Zuul</title>
    <link href="http://www.wanqhblog.top/2018/01/18/SpringCloudAPI%E7%BD%91%E5%85%B3%E6%9C%8D%E5%8A%A1Zuul/"/>
    <id>http://www.wanqhblog.top/2018/01/18/SpringCloudAPI网关服务Zuul/</id>
    <published>2018-01-18T08:55:47.000Z</published>
    <updated>2018-01-25T01:26:02.968Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>SpringCloud微服务就是把一个大的项目拆分成多个小的模块，然后模块之间通过远程调用、服务治理的技术互相配合工作，随着业务的增加，项目也将会越来越庞大，接口数量也随之增加，对外提供服务的接口也会增加，运维人员对于这些接口的管理也会变得越来越难。另一方面对于一个系统来说，权限管理也是一个不可少的模块，在微服务架构中，系统被拆分，不可能每个模块都去添加一个个权限管理，这样系统代码重复、工作量大、后期维护也难。为了解决这些常见的架构问题，API网关应运而生。SpringCloudZuul是基于Netflix Zuul实现的API网关组件，它实现了请求路由、负载均衡、校验过滤、与服务治理框架的结合、请求转发是的熔断机制和服务的聚合等功能。<a id="more"></a></p>
</blockquote>
<h1 id="快速使用"><a href="#快速使用" class="headerlink" title="快速使用"></a>快速使用</h1><ul>
<li><p>新建一个SpringBoot项目，这里命名api-gateway，然后导入相关依赖：</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"> <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-zuul<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-eureka<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div></pre></td></tr></table></figure>
</li>
<li><p>在主类上使用<code>@EnableZuulProxy</code>注解开启API网关服务功能</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@SpringBootApplication</span></div><div class="line"><span class="meta">@EnableZuulProxy</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ApigatewayApplication</span> </span>&#123;</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">		SpringApplication.run(ApigatewayApplication.class, args);</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>在配置文件中添加路由的规则配置</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">spring:</div><div class="line">  application:</div><div class="line">    name: api-gateway</div><div class="line">server:</div><div class="line">  port: <span class="number">8500</span></div><div class="line">zuul:</div><div class="line">  routes:</div><div class="line">    # 面向服务的路由</div><div class="line">    api-a:</div><div class="line">      path: /api-a<span class="comment">/**</span></div><div class="line"><span class="comment">      serviceId: FEIGN-CONSUMER</span></div><div class="line"><span class="comment">    # 传统的路由</span></div><div class="line"><span class="comment">    api-b-url:</span></div><div class="line"><span class="comment">      path: /api-b-url/**</span></div><div class="line"><span class="comment">      url: http://localhost:30000/</span></div><div class="line"><span class="comment">eureka:</span></div><div class="line"><span class="comment">  client:</span></div><div class="line"><span class="comment">    service-url:</span></div><div class="line"><span class="comment">      defaultZone: http://localhost:8888/eureka/</span></div></pre></td></tr></table></figure>
</li>
</ul>
<p>这里的代码是接着前面的，启动eureka-server、user-server、feign-consumer、article-server和api-gateway。我没添加了eureka的依赖，所以api-gateway也是服务提供方在注册中心注册：<br><img src="http://oy09glbzm.bkt.clouddn.com/18-1-17/64768121.jpg?imageView2/0/q/75|watermark/2/text/d2FucWhibG9nLnRvcA==/font/5a6L5L2T/fontsize/300/fill/IzJDMUJFRQ==/dissolve/100/gravity/SouthEast/dx/10/dy/10" alt=""><br>然后访问<code>http://localhost:8500/api-a/feign_consumer/find</code>和<code>http://localhost:8500/api-b-url/a/u/1</code></p>
<p><img src="http://oy09glbzm.bkt.clouddn.com/18-1-17/70142053.jpg?imageView2/0/q/75|watermark/2/text/d2FucWhibG9nLnRvcA==/font/5a6L5L2T/fontsize/300/fill/IzJDMUJFRQ==/dissolve/100/gravity/SouthEast/dx/10/dy/10" alt=""><br>在上面的配置文件文件中，使用两种路由规则的配置方法，一种是面向服务的，一种是使用传统的url。所有符合<code>/api-a/**</code>的请求都将转发到feign-consumer，同样所有符合<code>/api-b-url/**</code>的请求都将转发到<code>http://localhost:30000/</code>，也就是前面使用的article-service。两种规则的配置很明显：面向服务的使用serviceId配置服务实例，而传统的直接使用服务的地址。</p>
<h1 id="请求过滤"><a href="#请求过滤" class="headerlink" title="请求过滤"></a>请求过滤</h1><p>前面也提到网关可以处理微服务的权限问题，在单体架构的时候我们通常会使用拦截器或过滤器对请求进行权限的校验，同样在SpringCloudZuul中也提供了过滤器来进行请求的过滤与拦截，实现方法只要我们继承抽象类<code>ZuulFilter</code>并实现它定义的4个抽象方法。下面定义个拦截器来检查HttpServletRequest中是否带有accessToken参数</p>
<ul>
<li><p>创建<code>AccessFilter</code></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Component</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AccessFilter</span> <span class="keyword">extends</span> <span class="title">ZuulFilter</span></span>&#123;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Logger logger = LoggerFactory.getLogger(AccessFilter.class);</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">filterType</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="string">"pre"</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">filterOrder</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">shouldFilter</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">        RequestContext currentContext = RequestContext.getCurrentContext();</div><div class="line">        HttpServletRequest request = currentContext.getRequest();</div><div class="line">        logger.info(<span class="string">"send&#123;&#125; request to &#123;&#125;"</span>,request.getMethod(),request.getRequestURI().toCharArray());</div><div class="line">        String accessToken = request.getParameter(<span class="string">"accessToken"</span>);</div><div class="line">        <span class="keyword">if</span>(StringUtils.isBlank(accessToken))&#123;</div><div class="line">            logger.warn(<span class="string">"accessToken is empty"</span>);</div><div class="line">            currentContext.setSendZuulResponse(<span class="keyword">false</span>);</div><div class="line">            currentContext.setResponseStatusCode(<span class="number">401</span>);</div><div class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">        &#125;</div><div class="line">        logger.info(<span class="string">"accessToken &#123;&#125;"</span> ,accessToken);</div><div class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>然后启动相应的服务，访问相应的链接，当不添加accessToken是会抛出401错误。</p>
<blockquote>
<p>上面说到我们需要实现抽象类的ZuulFilter的四个抽象方法；</p>
<ol>
<li>filterType：过滤器类型，他决定过滤器在请求的哪个生命周期执行。在Zuul中有四种不同的生命周期过滤器：<ul>
<li>pre：可以在请求被路由之前调用；</li>
<li>routing：在路由请求是调用；</li>
<li>post：在routing和error过滤器之后被调用；</li>
<li>error：处理请求是发生错误是被调用</li>
</ul>
</li>
<li>filterOrder：过滤器的执行顺序，数值越小优先级越高</li>
<li>shouldFilter：判断过滤器是否需要执行</li>
<li>run： 过滤器的具体逻辑。上面的run方法中判断请求是否带有accessToken参数，如果没有则是非法请求，使用 <code>currentContext.setSendZuulResponse(false);</code>表示该请求不进行路由。然后设置响应码。</li>
</ol>
</blockquote>
</li>
</ul>
<p>请求的生命周期具体详解可以参考《SpringCloud微服务实战》</p>
<h1 id="路由的配置"><a href="#路由的配置" class="headerlink" title="路由的配置"></a>路由的配置</h1><h2 id="传统路由"><a href="#传统路由" class="headerlink" title="传统路由"></a>传统路由</h2><p>在上面的配置中使用了<code>zuul.toutes.&lt;route&gt;.path</code>和<code>zuul.toutes.&lt;route&gt;.url</code>参数的方式配置单实例的路由，而在微服务架构中，为了服务的高可用，一般会将一个服务部署多个。传统的多实例的路由配置，Zuul提供了以下方法：</p>
<blockquote>
<p>通过<code>zuul.toutes.&lt;route&gt;.path</code>与<code>zuul.toutes.&lt;route&gt;.serviceId</code>配置，如下：<br><code>zuul.routes.feign-consumer.path=/feign/**</code><br><code>zuul.routes.feign-consumer.serviceId=feign-consumer</code><br><code>robbin.eureka.enable=false</code><br><code>feign-consumer.ribbon.listOfServers=http://localhost:50000/,http://localhost:50001/</code></p>
</blockquote>
<p>该配置实现了对符合<code>/feign/**</code>规则的请求转发到<code>http://localhost:50000/,http://localhost:50001/</code>两个实例地址的路由规则。这里的serviceId是有程序员手动命名的服务名称。<code>robbin.eureka.enable=false</code>设置Ribbon不根据服务发现机制来获取配置服务对应的实例清单。</p>
<h2 id="服务路由"><a href="#服务路由" class="headerlink" title="服务路由"></a>服务路由</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">zuul:</div><div class="line">  routes:</div><div class="line">    api-a:</div><div class="line">      path: /api-a/**</div><div class="line">      serviceId: feign-consumer</div></pre></td></tr></table></figure>
<p>该配置实现了对符合<code>/api-a/**</code>规则的请求路径转发到名为<code>feign-consumer</code>的服务实例上去的路由规则。<code>api-a</code>是任意的路由名称。还可以使用一种更加简洁的方法<code>zuul.routes.&lt;serviceId&gt;=&lt;path&gt;</code>,这里serviceId指定具体的服务名，path配置匹配的请求表达式。</p>
<h2 id="路径匹配规则"><a href="#路径匹配规则" class="headerlink" title="路径匹配规则"></a>路径匹配规则</h2><table>
<thead>
<tr>
<th style="text-align:center">通配符</th>
<th>含义</th>
<th>url</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">？</td>
<td>匹配任意单个字符</td>
<td>/feign/?</td>
<td>匹配/feign/之后拼接一个任意字符的路径，如/feign/a</td>
</tr>
<tr>
<td style="text-align:center">*</td>
<td>匹配任意数量的字符</td>
<td>/feign/*</td>
<td>匹配/feign/之后拼接任意字符的路径，如/feign/aaa</td>
</tr>
<tr>
<td style="text-align:center">**</td>
<td>匹配任意数量的字符，支持多级目录</td>
<td>/feign/**</td>
<td>可以匹配/feign/*包含的内容之外，还可匹配形如/feign/a/b的多级目录</td>
</tr>
</tbody>
</table>
<h2 id="其他配置"><a href="#其他配置" class="headerlink" title="其他配置"></a>其他配置</h2><ul>
<li><code>zuul.ignored-services=hello-service：</code>忽略掉一个服务；</li>
<li><code>zuul.ignored-patterns=/**/feign/**:</code> 忽略/feign接口路由；</li>
<li><code>zuul.prefix：</code>为路由添加统一前缀；</li>
<li><code>zuul.add-host-header: true：</code>在请求路由转发前为请求设置Host头信息；</li>
<li><code>zuul.sensitiveHeaders=</code>：设置全局参数为空来覆盖默认敏感头信息</li>
<li><code>zuul.routes.&lt;route&gt;.customSensitiveHeaders=true</code>：对指定路由开启自定义敏感头</li>
<li><code>zuul.routes.&lt;route&gt;.sentiviteHeaders=</code>：将指定路由的敏感头设置为空。</li>
<li><code>zuul.retryable=false</code>：关闭重试机制</li>
<li><code>zuul.routes.&lt;route&gt;.retryable=false</code>：指定路由关闭重试机制</li>
<li><code>zuul.&lt;SimpleClassName&gt;.&lt;fileterType&gt;.disable=true</code>：禁用指定的过滤器，<code>&lt;SimpleClassName&gt;</code>代表过滤器的类名，<code>&lt;fileterType&gt;</code>代表过滤器的类型。</li>
</ul>
<p>在Zuul中Hystrix和Ribbon的配置与传统的Hystrix和Ribbon服务的配置一样。</p>
<hr>
<p>参考：《SpringCloud微服务实战》</p>
<p>源码地址：<a href="https://gitee.com/wqh3520/spring-cloud-1-9" target="_blank" rel="external">https://gitee.com/wqh3520/</a></p>
<p>原文：<a href="http://www.wanqhblog.top/2018/01/18/SpringCloudAPI%E7%BD%91%E5%85%B3%E6%9C%8D%E5%8A%A1Zuul/">SpringCloudAPI网关服务Zuul</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;SpringCloud微服务就是把一个大的项目拆分成多个小的模块，然后模块之间通过远程调用、服务治理的技术互相配合工作，随着业务的增加，项目也将会越来越庞大，接口数量也随之增加，对外提供服务的接口也会增加，运维人员对于这些接口的管理也会变得越来越难。另一方面对于一个系统来说，权限管理也是一个不可少的模块，在微服务架构中，系统被拆分，不可能每个模块都去添加一个个权限管理，这样系统代码重复、工作量大、后期维护也难。为了解决这些常见的架构问题，API网关应运而生。SpringCloudZuul是基于Netflix Zuul实现的API网关组件，它实现了请求路由、负载均衡、校验过滤、与服务治理框架的结合、请求转发是的熔断机制和服务的聚合等功能。
    
    </summary>
    
      <category term="SpringCloud" scheme="http://www.wanqhblog.top/categories/SpringCloud/"/>
    
    
      <category term="SpringCloud" scheme="http://www.wanqhblog.top/tags/SpringCloud/"/>
    
      <category term="Zuul" scheme="http://www.wanqhblog.top/tags/Zuul/"/>
    
  </entry>
  
  <entry>
    <title>SpringCloud声明式服务调用Feign</title>
    <link href="http://www.wanqhblog.top/2018/01/16/SpringCloud%E5%A3%B0%E6%98%8E%E5%BC%8F%E6%9C%8D%E5%8A%A1%E8%B0%83%E7%94%A8Feign/"/>
    <id>http://www.wanqhblog.top/2018/01/16/SpringCloud声明式服务调用Feign/</id>
    <published>2018-01-16T01:18:28.000Z</published>
    <updated>2018-01-16T08:05:28.026Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>前面使用了Ribbon做客户端负载均衡，使用Hystrix做容错保护，这两者被作为基础工具类框架被广泛地应用在各个微服务的实现中。SpringCloudFeign是将两者做了更高层次的封装以简化开发。它基于Netfix Feign实现，整合了SpringCloudRibbon和SpringCloudHystrix，除了提供这两者的强大功能外，还提供了一种声明是的Web服务客户端定义的方式。SpringCloudFeign在NetFixFeign的基础上扩展了对SpringMVC注解的支持，在其实现下，我们只需创建一个接口并用注解的方式来配置它，即可完成对服务提供方的接口绑定。简化了SpringCloudRibbon自行封装服务调用客户端的开发量。</p>
</blockquote>
<h1 id="快速使用"><a href="#快速使用" class="headerlink" title="快速使用"></a>快速使用</h1><a id="more"></a>
<p>接着之前的代码：<a href="http://www.wanqhblog.top/2018/01/15/SpringCloud%E5%AD%A6%E4%B9%A0%E4%B9%8BHystrix%EF%BC%88%E4%BA%8C%EF%BC%89/">SpringCloud容错保护Hystrix（二）</a><br>代码地址：<a href="https://gitee.com/wqh3520/spring-cloud-1-9" target="_blank" rel="external">https://gitee.com/wqh3520</a><br>1.创建一个SpringBoot工程，这里命名为feign-consumer，然后在pom文件中添加依赖：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></div><div class="line">	.....</div><div class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-eureka<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-feign<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>2.在主类上使用<code>@EnableFeignClients</code>注解开启SpringCloudFeign的支持功能<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@SpringBootApplication</span></div><div class="line"><span class="meta">@EnableDiscoveryClient</span></div><div class="line"><span class="meta">@EnableFeignClients</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FeignApplication</span> </span>&#123;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">		SpringApplication.run(FeignApplication.class, args);</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>3.接口定义：我们这里调用USER-SERVICE服务，在该服务中创建一个查询所有用户的接口，然后在feign-consumer中定义。<br>USER-SERVICE<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@RestController</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserFeignController</span> </span>&#123;</div><div class="line">    </div><div class="line">    <span class="meta">@Autowired</span></div><div class="line">    <span class="keyword">private</span> UserRepository userRepository;</div><div class="line">    </div><div class="line">    <span class="meta">@GetMapping</span>(<span class="string">"/feign/user/list"</span>)</div><div class="line">    <span class="function"><span class="keyword">public</span> List&lt;User&gt; <span class="title">findAllUser</span><span class="params">()</span></span>&#123;</div><div class="line">        <span class="keyword">return</span>  userRepository.findAll();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>feign-consumer<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@FeignClient</span>(value = <span class="string">"USER-SERVICE"</span>)</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserService</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="meta">@GetMapping</span>(<span class="string">"/feign/user/list"</span>)</div><div class="line">    <span class="function">List&lt;User&gt; <span class="title">findAll</span><span class="params">()</span></span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>使用<code>@FeignClient</code>注解指定服务名来绑定服务，如果不指定服务名，启动项目将会报错。然后创建一个接口与调用普通的service一样调用UserService。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@RestController</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FeignConsumerController</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="meta">@Autowired</span></div><div class="line">    <span class="keyword">private</span> UserService userService;</div><div class="line"></div><div class="line">    <span class="meta">@GetMapping</span>(value = <span class="string">"/feign/find"</span>)</div><div class="line">    <span class="function"><span class="keyword">public</span> List&lt;User&gt; <span class="title">findAllUser</span><span class="params">()</span></span>&#123;</div><div class="line">        <span class="keyword">return</span> userService.findAll();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<ol>
<li>最后修改配置文件<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">spring:</div><div class="line">  application:</div><div class="line">    name: feign-consumer</div><div class="line">server:</div><div class="line">  port: <span class="number">50000</span></div><div class="line">eureka:</div><div class="line">  client:</div><div class="line">    service-url:</div><div class="line">      defaultZone: http:<span class="comment">//localhost:8888/eureka/</span></div></pre></td></tr></table></figure>
</li>
</ol>
<p>这里使用的User对象与前面ARTICLE-SERVICE的User对象一样。依次启动服务注册中心、服务提供方、服务消费方。然后调用<code>/feign/find</code>接口，可以正常返回数据。</p>
<h1 id="参数绑定"><a href="#参数绑定" class="headerlink" title="参数绑定"></a>参数绑定</h1><p>在实际开发中，像上面那种不带参数的接口可能少之又少。Feign提供了多种参数绑定的方式。<br>在服务提供的<code>UserFeignController</code>中添加以下三个接口：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment">  * 根据id查询用户，将参数包含在Request参数</span></div><div class="line"><span class="comment">  */</span></div><div class="line"> <span class="meta">@GetMapping</span>(<span class="string">"/feign/userById"</span>)</div><div class="line"> <span class="function"><span class="keyword">public</span> User <span class="title">finUserById</span><span class="params">(@RequestParam Long id)</span></span>&#123;</div><div class="line">     logger.info(<span class="string">"&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;id:&#123;&#125;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;"</span>,id);</div><div class="line">     <span class="keyword">return</span> userRepository.findOne(id);</div><div class="line"> &#125;</div><div class="line"></div><div class="line">	<span class="comment">/**</span></div><div class="line"><span class="comment">  * 带有Header信息的请求,需要注意的是，使用请求头传递参数，如果参数是中文会出现乱码</span></div><div class="line"><span class="comment">  * 所以需要使用 URLEncoder.encode(name,"UTF-8") 先编码</span></div><div class="line"><span class="comment">  *       后解码  URLDecoder.decode(name,"UTF-8"); </span></div><div class="line"><span class="comment">  */</span></div><div class="line"> <span class="meta">@GetMapping</span>(<span class="string">"/feign/header/user"</span>)</div><div class="line"> <span class="function"><span class="keyword">public</span> User <span class="title">findUserHeader</span><span class="params">(@RequestHeader String name,@RequestHeader Long id,@RequestHeader Integer age)</span> <span class="keyword">throws</span> UnsupportedEncodingException </span>&#123;</div><div class="line">     User user = <span class="keyword">new</span> User();</div><div class="line">     user.setId(id);</div><div class="line">     user.setUsername( URLDecoder.decode(name,<span class="string">"UTF-8"</span>));</div><div class="line">     user.setAge(age);</div><div class="line">     logger.info(<span class="string">"&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;findUserHeader&#123;&#125;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;"</span>,user);</div><div class="line">     <span class="keyword">return</span> user;</div><div class="line"> &#125;</div><div class="line"> <span class="comment">/***</span></div><div class="line"><span class="comment">  * 带有RequestBody以及请求相应体是一个对象的请求</span></div><div class="line"><span class="comment">  */</span></div><div class="line"> <span class="meta">@PostMapping</span>(<span class="string">"/feign/insert"</span>)</div><div class="line"> <span class="function"><span class="keyword">public</span> User <span class="title">insertUser</span><span class="params">(@RequestBody User user)</span></span>&#123;</div><div class="line">     userRepository.save(user);</div><div class="line">     <span class="keyword">return</span> userRepository.findOne(user.getId());</div><div class="line"> &#125;</div></pre></td></tr></table></figure></p>
<p>直接将上面添加的接口复制到消费方的Service接口中，删除方法体。需要注意的是：在SpringMVC中<code>@RequestParam</code>和@<code>RequestHeader</code>注解，如果我们不指定value，则默认采用参数的名字作为其value，但是在Feign中，这个value必须明确指定，否则会报错。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment"> * 根据id查询用户，将参数包含在Request参数</span></div><div class="line"><span class="comment"> */</span></div><div class="line"><span class="meta">@GetMapping</span>(<span class="string">"/feign/userById"</span>)</div><div class="line"><span class="function">User <span class="title">finUserById</span><span class="params">(@RequestParam(<span class="string">"id"</span>)</span> Long id)</span>;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment"> * 带有Header信息的请求</span></div><div class="line"><span class="comment"> */</span></div><div class="line"><span class="meta">@GetMapping</span>(<span class="string">"/feign/header/user"</span>)</div><div class="line"><span class="function">User <span class="title">findUserHeader</span><span class="params">(@RequestHeader(<span class="string">"name"</span>)</span> String name, @<span class="title">RequestHeader</span><span class="params">(<span class="string">"id"</span>)</span> Long id,@<span class="title">RequestHeader</span><span class="params">(<span class="string">"age"</span>)</span> Integer age)</span>;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment"> * 带有RequestBody以及请求相应体是一个对象的请求</span></div><div class="line"><span class="comment"> */</span></div><div class="line"><span class="meta">@PostMapping</span>(<span class="string">"/feign/insert"</span>)</div><div class="line"><span class="function">User <span class="title">insertUser</span><span class="params">(@RequestBody User user)</span></span>;</div></pre></td></tr></table></figure></p>
<p>测试接口：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@GetMapping</span>(<span class="string">"/testFeign"</span>)</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testFeign</span><span class="params">()</span> <span class="keyword">throws</span> UnsupportedEncodingException </span>&#123;</div><div class="line">    User user = userService.finUserById(<span class="number">2L</span>);</div><div class="line">    logger.info(<span class="string">"&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;Request参数：&#123;&#125;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;"</span>,user);</div><div class="line">    User user2 = userService.findUserHeader(URLEncoder.encode(<span class="string">"呜呜呜呜"</span>,<span class="string">"UTF-8"</span>), <span class="number">3L</span>,<span class="number">1000</span>);</div><div class="line">    logger.info(<span class="string">"&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;Header:&#123;&#125;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;"</span>,user2);</div><div class="line">    User save_user = <span class="keyword">new</span> User(<span class="number">5L</span>,<span class="string">"嘻嘻嘻"</span>,<span class="number">56</span>);</div><div class="line">    User users = userService.insertUser(save_user);</div><div class="line">    logger.info(<span class="string">"&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;RequestBody:&#123;&#125;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;"</span>,users);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p><img src="http://oy09glbzm.bkt.clouddn.com/18-1-16/3412254.jpg?imageView2/0/q/75|watermark/2/text/d2FucWhibG9nLnRvcA==/font/5a6L5L2T/fontsize/300/fill/IzJDMUJFRQ==/dissolve/100/gravity/SouthEast/dx/10/dy/10" alt=""></p>
<h1 id="继承特性"><a href="#继承特性" class="headerlink" title="继承特性"></a>继承特性</h1><p>在上面的例子中，在服务消费方声明接口时都是将服务提供方的Controller复制过来。这么做会出现很多重复代码。在SpringCloudFeign中提供了继承特性来帮助我们解决这些复制操作。</p>
<ol>
<li><p>创建建一个基础的Maven工程，命名service-api，以复用DTO与接口定义。这里需要用到SpringMVC的注解，所以需要引入依赖：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&lt;dependency&gt;</div><div class="line">	&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</div><div class="line">	&lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;</div><div class="line">&lt;/dependency&gt;</div></pre></td></tr></table></figure>
</li>
<li><p>将上面的User对象复制到api中，并创建<code>UserService</code></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Data</span></div><div class="line"><span class="meta">@AllArgsConstructor</span></div><div class="line"><span class="meta">@NoArgsConstructor</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> Long id;</div><div class="line">    <span class="keyword">private</span> String username;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/rafactor"</span>)</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserService</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="meta">@GetMapping</span>(<span class="string">"/feign/user/list"</span>)</div><div class="line">    <span class="function">List&lt;User&gt; <span class="title">findAll</span><span class="params">()</span></span>;</div><div class="line"></div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line"><span class="comment">     * 根据id查询用户，将参数包含在Request参数</span></div><div class="line"><span class="comment">     */</span></div><div class="line">    <span class="meta">@GetMapping</span>(<span class="string">"/feign/userById"</span>)</div><div class="line">    <span class="function">User <span class="title">finUserById</span><span class="params">(@RequestParam(<span class="string">"id"</span>)</span> Long id)</span>;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line"><span class="comment">     * 带有Header信息的请求</span></div><div class="line"><span class="comment">     */</span></div><div class="line">    <span class="meta">@GetMapping</span>(<span class="string">"/feign/header/user"</span>)</div><div class="line">    <span class="function">User <span class="title">findUserHeader</span><span class="params">(@RequestHeader(<span class="string">"name"</span>)</span> String name, @<span class="title">RequestHeader</span><span class="params">(<span class="string">"id"</span>)</span> Long id, @<span class="title">RequestHeader</span><span class="params">(<span class="string">"age"</span>)</span> Integer age)</span>;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line"><span class="comment">     * 带有RequestBody以及请求相应体是一个对象的请求</span></div><div class="line"><span class="comment">     */</span></div><div class="line">    <span class="meta">@PostMapping</span>(<span class="string">"/feign/insert"</span>)</div><div class="line">    <span class="function">User <span class="title">insertUser</span><span class="params">(@RequestBody User user)</span></span>;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>重构USER-SERVICE，在pom文件中新增service-api；并创建UserRafactorController类实现service-api的UserService类;</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.wqh<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>sevice-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">version</span>&gt;</span>0.0.1-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div></pre></td></tr></table></figure>
</li>
</ol>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="meta">@RestController</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserRafactorController</span> <span class="keyword">implements</span> <span class="title">UserService</span></span>&#123;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Logger logger = LoggerFactory.getLogger(UserRafactorController.class);</div><div class="line">    <span class="meta">@Autowired</span></div><div class="line">    <span class="keyword">private</span> UserRepository userRepository;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> List&lt;User&gt; <span class="title">findAll</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> User <span class="title">finUserById</span><span class="params">(Long id)</span> </span>&#123;</div><div class="line">        logger.info(<span class="string">"&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;Rafactor id:&#123;&#125;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;"</span>,id);</div><div class="line">        com.wqh.user.entity.User one = userRepository.findOne(id);</div><div class="line">        User user = <span class="keyword">new</span> User(one.getId(),one.getUsername(),one.getAge());</div><div class="line">        <span class="keyword">return</span> user;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> User <span class="title">findUserHeader</span><span class="params">(@RequestHeader(<span class="string">"name"</span>)</span>String name, @<span class="title">RequestHeader</span><span class="params">(<span class="string">"id"</span>)</span>Long id,@<span class="title">RequestHeader</span><span class="params">(<span class="string">"age"</span>)</span> Integer age) </span>&#123;</div><div class="line">        User user = <span class="keyword">new</span> User();</div><div class="line">        user.setId(id);</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            user.setUsername( URLDecoder.decode(name,<span class="string">"UTF-8"</span>));</div><div class="line">        &#125; <span class="keyword">catch</span> (UnsupportedEncodingException e) &#123;</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125;</div><div class="line">        user.setAge(age);</div><div class="line">        logger.info(<span class="string">"&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;Rafactor findUserHeader&#123;&#125;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;"</span>,user);</div><div class="line">        <span class="keyword">return</span> user;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> User <span class="title">insertUser</span><span class="params">(@RequestBody User user)</span> </span>&#123;</div><div class="line">        logger.info(<span class="string">"&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;Rafactor RequestBody&#123;&#125;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;"</span>,user);</div><div class="line">        <span class="keyword">return</span> user;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>该类不需要使用@RequestMapping注解来定义请求映射，参数注解需要添加，并且在类上添加@RestController注解。</p>
<ol>
<li>重构feign-consumer，添加service-api的依赖<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.wqh<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>sevice-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">version</span>&gt;</span>0.0.1-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div></pre></td></tr></table></figure>
</li>
</ol>
<p>创建UserRafactorService接口继承UserService接口<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@FeignClient</span>(value = <span class="string">"USER-SERVICE"</span>)</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserRafactorService</span> <span class="keyword">extends</span> <span class="title">UserService</span> </span>&#123;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<ol>
<li>测试接口<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@GetMapping</span>(<span class="string">"/testRafactorService"</span>)</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testRafactorService</span><span class="params">()</span> <span class="keyword">throws</span> UnsupportedEncodingException </span>&#123;</div><div class="line">    com.wqh.api.dto.User user = userRafactorService.finUserById(<span class="number">2L</span>);</div><div class="line">    logger.info(<span class="string">"&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;Rafactor Request参数：&#123;&#125;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;"</span>,user);</div><div class="line">    com.wqh.api.dto.User user2 = userRafactorService.findUserHeader(URLEncoder.encode(<span class="string">"呜呜呜呜"</span>,<span class="string">"UTF-8"</span>), <span class="number">3L</span>,<span class="number">1000</span>);</div><div class="line">    logger.info(<span class="string">"&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;Rafactor Header:&#123;&#125;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;"</span>,user2);</div><div class="line">    com.wqh.api.dto.User save_user = <span class="keyword">new</span> com.wqh.api.dto.User(<span class="number">5L</span>,<span class="string">"嘻嘻嘻"</span>,<span class="number">56</span>);</div><div class="line">    com.wqh.api.dto.User users = userRafactorService.insertUser(save_user);</div><div class="line">    logger.info(<span class="string">"&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;Rafactor RequestBody:&#123;&#125;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;"</span>,users);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ol>
<p><img src="http://oy09glbzm.bkt.clouddn.com/18-1-16/15875621.jpg?imageView2/0/q/75|watermark/2/text/d2FucWhibG9nLnRvcA==/font/5a6L5L2T/fontsize/300/fill/IzJDMUJFRQ==/dissolve/100/gravity/SouthEast/dx/10/dy/10" alt=""><br><img src="http://oy09glbzm.bkt.clouddn.com/18-1-16/8119963.jpg?imageView2/0/q/75|watermark/2/text/d2FucWhibG9nLnRvcA==/font/5a6L5L2T/fontsize/300/fill/IzJDMUJFRQ==/dissolve/100/gravity/SouthEast/dx/10/dy/10" alt=""><br>注意：这里对于对象之间的处理是存在问题，就不详细的修改了，主要是为了Feign的继承特性。</p>
<h1 id="Feign配置详解"><a href="#Feign配置详解" class="headerlink" title="Feign配置详解"></a>Feign配置详解</h1><h2 id="Ribbon配置"><a href="#Ribbon配置" class="headerlink" title="Ribbon配置"></a>Ribbon配置</h2><p>在Feign中配置Ribbon非常简单，直接在application.properties中配置即可，如：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"># 设置连接超时时间</div><div class="line">ribbon.ConnectTimeout=<span class="number">500</span></div><div class="line"># 设置读取超时时间</div><div class="line">ribbon.ReadTimeout=<span class="number">5000</span></div><div class="line"># 对所有操作请求都进行重试</div><div class="line">ribbon.OkToRetryOnAllOperations=<span class="keyword">true</span></div><div class="line"># 切换实例的重试次数</div><div class="line">ribbon.MaxAutoRetriesNextServer=<span class="number">2</span></div><div class="line"># 对当前实例的重试次数</div><div class="line">ribbon.MaxAutoRetries=<span class="number">1</span></div></pre></td></tr></table></figure></p>
<p>同样也可以指定服务配置，直接在application.properties中采用<client>.ribbon.key=value的格式进行配置，如下：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"># 设置针对user-service服务的连接超时时间</div><div class="line">user-service.ribbon.ConnectTimeout=<span class="number">600</span></div><div class="line"># 设置针对user-service服务的读取超时时间</div><div class="line">user-service.ribbon.ReadTimeout=<span class="number">6000</span></div><div class="line"># 设置针对user-service服务所有操作请求都进行重试</div><div class="line">user-service.ribbon.OkToRetryOnAllOperations=<span class="keyword">true</span></div><div class="line"># 设置针对user-service服务切换实例的重试次数</div><div class="line">user-service.ribbon.MaxAutoRetriesNextServer=<span class="number">2</span></div><div class="line"># 设置针对user-service服务的当前实例的重试次数</div><div class="line">user-service.ribbon.MaxAutoRetries=<span class="number">1</span></div></pre></td></tr></table></figure></client></p>
<p>在SpringCloudFeign中是默认打开重试机制，从上面的配置信息也可以看出，我们可以设置重试的次数。对于重试机制的测试，可以让服务提供方的方法延迟随机毫秒数来测试。</p>
<h2 id="Hystrix配置"><a href="#Hystrix配置" class="headerlink" title="Hystrix配置"></a>Hystrix配置</h2><p>对于Hystrix的配置同样可以在application.properties中配置，全局配置直接使用默认前缀<code>hystrix.command.default</code>，如<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"># 设置熔断超时时间</div><div class="line">hystrix.command.<span class="keyword">default</span>.execution.isolation.thread.timeoutInMilliseconds=<span class="number">10000</span></div><div class="line"># 关闭Hystrix功能（不要和上面的配置一起使用）</div><div class="line">feign.hystrix.enabled=<span class="keyword">false</span></div><div class="line"># 关闭熔断功能</div><div class="line">hystrix.command.<span class="keyword">default</span>.execution.timeout.enabled=<span class="keyword">false</span></div></pre></td></tr></table></figure></p>
<p>也可以直接对指定的接口进行配置，采用<code>hystrix.command.default.&lt;commandKey&gt;</code>作为前缀，比如如<code>/findAllUser</code>：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"># 设置熔断超时时间</div><div class="line">hystrix.command.findAllUser.execution.isolation.thread.timeoutInMilliseconds=<span class="number">10000</span></div><div class="line"># 关闭熔断功能</div><div class="line">hystrix.command.findAllUser.execution.timeout.enabled=<span class="keyword">false</span></div></pre></td></tr></table></figure></p>
<p>对于重复的接口名会共用这一条Hystrix配置；</p>
<h2 id="禁用Hystrix"><a href="#禁用Hystrix" class="headerlink" title="禁用Hystrix"></a>禁用Hystrix</h2><p>上面的配置信息中，可以通过配置文件全局禁用Hystrix也可以指定接口禁用。我们也可以注解属性的方式禁用Hystrix;</p>
<ul>
<li><p>构建一个关闭Hystrix的配置类</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Configuration</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DisableHystrixConfiguration</span> </span>&#123;</div><div class="line">    </div><div class="line">    <span class="meta">@Bean</span></div><div class="line">    <span class="meta">@Scope</span>(<span class="string">"prototype"</span>)</div><div class="line">    <span class="keyword">public</span> Feign.<span class="function">Builder <span class="title">feignBuilder</span><span class="params">()</span></span>&#123;</div><div class="line">        <span class="keyword">return</span> Feign.builder();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>在<code>@FeignClient</code>注解中，通过<code>configuration</code>参数引入上面实现的配置</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@FeignClient</span>(value = <span class="string">"USER-SERVICE"</span>,configuration = DisableHystrixConfiguration.class)</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserRafactorService</span> <span class="keyword">extends</span> <span class="title">UserService</span> </span>&#123;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="服务降级配置"><a href="#服务降级配置" class="headerlink" title="服务降级配置"></a>服务降级配置</h2><p>在Hystrix中我们可以直接通过@HystrixCommand注解的fallback参数进行配置降级处理方法，然而Feign对其进行封装，并提供了一种简单的定义方式：</p>
<ol>
<li><p>在之前的feign-consumer服务中创建一个UserServiceFallback类，该类实现UserService接口。这里对于哪个类接口的降级就实现哪个接口，</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Component</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserServiceFallback</span> <span class="keyword">implements</span> <span class="title">UserService</span> </span>&#123;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> List&lt;User&gt; <span class="title">findAll</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> User <span class="title">finUserById</span><span class="params">(Long id)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> User(-<span class="number">1L</span>,<span class="string">"error"</span>,<span class="number">0</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> User <span class="title">findUserHeader</span><span class="params">(String name, Long id, Integer age)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> User(-<span class="number">1L</span>,<span class="string">"error"</span>,<span class="number">0</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> User <span class="title">insertUser</span><span class="params">(User user)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> User(-<span class="number">1L</span>,<span class="string">"error"</span>,<span class="number">0</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>然后再@FeignClient注解中指定服务降级处理类即可：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@FeignClient</span>(value = <span class="string">"USER-SERVICE"</span>,fallback = UserServiceFallback.class)</div></pre></td></tr></table></figure>
</li>
<li><p>在配置文件中开启Hystrix：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">feign:</div><div class="line">  hystrix:</div><div class="line">    enabled: <span class="keyword">true</span></div></pre></td></tr></table></figure>
</li>
</ol>
<p>然后在USER-SERVICE服务中将某个接口设置延迟测试：<br><img src="http://oy09glbzm.bkt.clouddn.com/18-1-16/11952425.jpg?imageView2/0/q/75|watermark/2/text/d2FucWhibG9nLnRvcA==/font/5a6L5L2T/fontsize/300/fill/IzJDMUJFRQ==/dissolve/100/gravity/SouthEast/dx/10/dy/10" alt=""></p>
<h2 id="请求压缩"><a href="#请求压缩" class="headerlink" title="请求压缩"></a>请求压缩</h2><blockquote>
<p>Spring Cloud Feign支持对请求和响应进行GZIP压缩，以提高通信效率，配置方式如下：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"># 配置请求GZIP压缩</div><div class="line">feign.compression.request.enabled=<span class="keyword">true</span></div><div class="line"># 配置响应GZIP压缩</div><div class="line">feign.compression.response.enabled=<span class="keyword">true</span></div><div class="line"># 配置压缩支持的MIME TYPE</div><div class="line">feign.compression.request.mime-types=text/xml,application/xml,application/json</div><div class="line"># 配置压缩数据大小的下限</div><div class="line">feign.compression.request.min-request-size=<span class="number">2048</span></div></pre></td></tr></table></figure></p>
</blockquote>
<h2 id="日志配置"><a href="#日志配置" class="headerlink" title="日志配置"></a>日志配置</h2><p>SpringCloudFeign为每一个FeignClient都提供了一个feign.Logger实例。可以根据<code>logging.level.&lt;FeignClient&gt;</code>参数配置格式来开启Feign客户端的DEBUG日志，其中<code>&lt;FeignClient&gt;</code>为Feign客户端定义接口的完整路径。如：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">logging:</div><div class="line">  level: </div><div class="line">    com.wqh.feign.service.UserService: debug</div></pre></td></tr></table></figure></p>
<p>然后再主类中直接加入Looger.Level的Bean<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Bean</span></div><div class="line"><span class="keyword">public</span> Logger.<span class="function">Level <span class="title">feignLoggerLevel</span><span class="params">()</span></span>&#123;</div><div class="line">	<span class="keyword">return</span>  Logger.Level.FULL;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>这里也可以通过配置，然后在具体的Feign客户端来指定配置类实现日志。<br>日志级别有下面4类：</p>
<ul>
<li>NONE：不记录任何信息；</li>
<li>BASIC：仅记录请求方法、URL以及响应状态码和执行时间；</li>
<li>HEADERS：除了记录BASIC级别的信息外，还记录请求和响应的头信息；</li>
<li>FULL：记录所有请求与响应的明细，包括头信息、请求体、元数据等。</li>
</ul>
<hr>
<p>作为SpringCloud学习笔记，有很多地方不好。望指出！！！</p>
<p>源码地址：<a href="https://gitee.com/wqh3520/spring-cloud-1-9" target="_blank" rel="external">https://gitee.com/wqh3520</a></p>
<p>原文地址：<a href="http://www.wanqhblog.top/2018/01/16/SpringCloud%E5%A3%B0%E6%98%8E%E5%BC%8F%E6%9C%8D%E5%8A%A1%E8%B0%83%E7%94%A8Feign/">SpringCloud声明式服务调用Feign</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;前面使用了Ribbon做客户端负载均衡，使用Hystrix做容错保护，这两者被作为基础工具类框架被广泛地应用在各个微服务的实现中。SpringCloudFeign是将两者做了更高层次的封装以简化开发。它基于Netfix Feign实现，整合了SpringCloudRibbon和SpringCloudHystrix，除了提供这两者的强大功能外，还提供了一种声明是的Web服务客户端定义的方式。SpringCloudFeign在NetFixFeign的基础上扩展了对SpringMVC注解的支持，在其实现下，我们只需创建一个接口并用注解的方式来配置它，即可完成对服务提供方的接口绑定。简化了SpringCloudRibbon自行封装服务调用客户端的开发量。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&quot;快速使用&quot;&gt;&lt;a href=&quot;#快速使用&quot; class=&quot;headerlink&quot; title=&quot;快速使用&quot;&gt;&lt;/a&gt;快速使用&lt;/h1&gt;
    
    </summary>
    
      <category term="SpringCloud" scheme="http://www.wanqhblog.top/categories/SpringCloud/"/>
    
    
      <category term="SpringCloud" scheme="http://www.wanqhblog.top/tags/SpringCloud/"/>
    
      <category term="Feign" scheme="http://www.wanqhblog.top/tags/Feign/"/>
    
  </entry>
  
  <entry>
    <title>SpringCloud容错保护Hystrix（二）</title>
    <link href="http://www.wanqhblog.top/2018/01/15/SpringCloud%E5%AE%B9%E9%94%99%E4%BF%9D%E6%8A%A4Hystrix%EF%BC%88%E4%BA%8C%EF%BC%89/"/>
    <id>http://www.wanqhblog.top/2018/01/15/SpringCloud容错保护Hystrix（二）/</id>
    <published>2018-01-15T11:30:20.000Z</published>
    <updated>2018-01-16T08:07:40.577Z</updated>
    
    <content type="html"><![CDATA[<p>接着上一篇:<a href="http://www.wanqhblog.top/2018/01/12/SpringCloud%E5%AD%A6%E4%B9%A0%E4%B9%8BHystrix%EF%BC%88%E4%B8%80%EF%BC%89/">SpringCloud容错保护Hystrix（一）</a></p>
<h1 id="请求合并"><a href="#请求合并" class="headerlink" title="请求合并"></a>请求合并</h1><p>上一篇写到可以使用请求缓存来减轻高并发时的请求线程消耗、降低请求相应时间。请求合并又是什么东西呢？在微服务架构中，我们将项目拆分成多个模块，每个模块间通过远程调用进行通信。远程调用最常见的问题是通信消耗与连接数占用。在高并发情况下。随着通信次数的增加，通信时间会增加；因为依赖服务的线程池资源有限，将出现排队等待与响应延迟的情况。请求合并正是Hystrix为解决这两个问题而开发的，以减少通信消耗和线程数的占用。<a id="more"></a></p>
<blockquote>
<p>Hystrix提供HystrixCollapser来实现请求转发，在HystrixCommand之前放置一个合并处理器，将处于一个很短的时间窗（默认为10毫秒）内对同一个依赖服务的多个请求进行整合并以批量方式发起请求，<br><img src="http://oy09glbzm.bkt.clouddn.com/18-1-14/35566908.jpg?imageView2/0/q/75|watermark/2/text/d2FucWhibG9nLnRvcA==/font/5a6L5L2T/fontsize/300/fill/IzJDMUJFRQ==/dissolve/100/gravity/SouthEast/dx/10/dy/10" alt=""><br>HystrixCollapser是一个抽象类，进入源码可以看到，它指定了三个不同的类。</p>
<ul>
<li>BatchReturnType: 合并后批量请求的返回类型；</li>
<li>ResponseType: 单个请求返回的类型；</li>
<li>RequestArgumentType: 请求参数类型。<br>对于这三个类型的使用：<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="comment">//用来定义获取请求参数的方法</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> RequestArgumentType <span class="title">getRequestArgument</span><span class="params">()</span></span>;</div><div class="line"></div><div class="line"><span class="comment">//合并请求产生批量命令的具体实现</span></div><div class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">abstract</span> HystrixCommand&lt;BatchReturnType&gt; <span class="title">createCommand</span><span class="params">(Collection&lt;com.netflix.hystrix.HystrixCollapser.CollapsedRequest&lt;ResponseType, RequestArgumentType&gt;&gt; requests)</span></span>;</div><div class="line"></div><div class="line"><span class="comment">//批量命令结果返回后的处理，这里需要实现将批量命令结果拆分并传递给合并前各个原子请求命令的逻辑</span></div><div class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">mapResponseToRequests</span><span class="params">(BatchReturnType batchResponse, Collection&lt;com.netflix.hystrix.HystrixCollapser.CollapsedRequest&lt;ResponseType, RequestArgumentType&gt;&gt; requests)</span></span>;</div></pre></td></tr></table></figure>
</li>
</ul>
</blockquote>
<h2 id="继承方式"><a href="#继承方式" class="headerlink" title="继承方式"></a>继承方式</h2><p><strong>修改服务提供者</strong><br>在之前的代码基础上，在USER-SERVICE中添加一个接口，这里使用到的两个接口：</p>
<ul>
<li>/user/{id}：根据id查询用户</li>
<li>/users/ids?ids={ids}：查询多个用户，这里id以逗号隔开。<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@GetMapping</span>(<span class="string">"/user/&#123;id&#125;"</span>)</div><div class="line"><span class="function"><span class="keyword">public</span> User <span class="title">findById</span><span class="params">(@PathVariable(<span class="string">"id"</span>)</span> Long id)</span>&#123;</div><div class="line">    <span class="keyword">return</span> userRepository.findOne(id);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="meta">@GetMapping</span>(<span class="string">"/users/ids"</span>)</div><div class="line"><span class="function"><span class="keyword">public</span> List&lt;User&gt; <span class="title">findUserByIds</span><span class="params">(String ids)</span></span>&#123;</div><div class="line"> 	System.out.println(<span class="string">"&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;"</span>+ids);</div><div class="line">    String[] split = ids.split(<span class="string">","</span>);</div><div class="line">    List&lt;User&gt; result = <span class="keyword">new</span> ArrayList&lt;&gt;();</div><div class="line">    <span class="keyword">for</span> (String s : split)&#123;</div><div class="line">        Long id = Long.valueOf(s);</div><div class="line">        User  user = userRepository.findOne(id);</div><div class="line">        result.add(user);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> result;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
<p><strong>服务消费者</strong></p>
<ol>
<li><p>这里我是通过ArticleService调用USER-SERVICE服务，在ArticleService中添加方法</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> User <span class="title">getUserById</span><span class="params">(@CacheKey(<span class="string">"id"</span>)</span> Long id) </span>&#123;</div><div class="line">    <span class="keyword">return</span> restTemplate.getForObject(<span class="string">"http://USER-SERVICE/user/&#123;1&#125;"</span>, User.class, id);</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">public</span> List&lt;User&gt; <span class="title">findUserByIds</span><span class="params">(List&lt;Long&gt; ids)</span></span>&#123;</div><div class="line">    System.out.println(<span class="string">"findUserByIds---------"</span>+ids+<span class="string">"Thread.currentThread().getName():"</span> + Thread.currentThread().getName());</div><div class="line">    String str = StringUtils.join(ids,<span class="string">","</span>);</div><div class="line">    User[] users =  restTemplate.getForObject(<span class="string">"http://USER-SERVICE/users/ids?ids=&#123;1&#125;"</span>, User[].class,str);</div><div class="line">    <span class="keyword">return</span> Arrays.asList(users);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>实现一个批量请求命令</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserBatchCommand</span> <span class="keyword">extends</span> <span class="title">HystrixCommand</span>&lt;<span class="title">List</span>&lt;<span class="title">User</span>&gt;&gt; </span>&#123;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Logger logger =  LoggerFactory.getLogger(UserCommand.class);</div><div class="line">    <span class="keyword">private</span> List&lt;Long&gt; ids;</div><div class="line">    <span class="keyword">private</span> ArticleService articleService;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">UserBatchCommand</span><span class="params">(ArticleService articleService,List&lt;Long&gt; ids)</span></span>&#123;</div><div class="line">        <span class="keyword">super</span>(Setter.withGroupKey(HystrixCommandGroupKey.Factory.asKey(<span class="string">"userGroup"</span>)));</div><div class="line">        <span class="keyword">this</span>.ids = ids;</div><div class="line">        <span class="keyword">this</span>.articleService = articleService;</div><div class="line">    &#125;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> List&lt;User&gt; <span class="title">run</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">        <span class="keyword">return</span> articleService.findUserByIds(ids);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>通过继承HystrixCollapser实现请求合并器</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserCollapdeCommand</span> <span class="keyword">extends</span> <span class="title">HystrixCollapser</span>&lt;<span class="title">List</span>&lt;<span class="title">User</span>&gt;,<span class="title">User</span>,<span class="title">Long</span>&gt; </span>&#123;</div><div class="line">    <span class="keyword">private</span> ArticleService articleService;</div><div class="line">    <span class="keyword">private</span> Long id;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">UserCollapdeCommand</span><span class="params">(ArticleService articleService,Long id)</span></span>&#123;</div><div class="line">        <span class="comment">//设置时间延迟属性，延迟时间窗为100毫秒</span></div><div class="line">        <span class="keyword">super</span>(Setter.withCollapserKey(HystrixCollapserKey.Factory.asKey(<span class="string">"userCollapdeCommand"</span>)).andCollapserPropertiesDefaults(</div><div class="line">                HystrixCollapserProperties.Setter().withTimerDelayInMilliseconds(<span class="number">100</span>)</div><div class="line">        ));</div><div class="line">        <span class="keyword">this</span>.articleService = articleService;</div><div class="line">        <span class="keyword">this</span>.id = id;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line"><span class="comment">     * 返回单个请求参数id</span></div><div class="line"><span class="comment">     * <span class="doctag">@return</span></span></div><div class="line"><span class="comment">     */</span></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> Long <span class="title">getRequestArgument</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> id;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line"><span class="comment">     * 这里通过获取单个请求的参数来组织批量请求命令UserBatchCommand的实例</span></div><div class="line"><span class="comment">     * <span class="doctag">@param</span> collapsedRequests 保存了延迟时间窗中收集到的所有获取单个User的请求。</span></div><div class="line"><span class="comment">     * <span class="doctag">@return</span></span></div><div class="line"><span class="comment">     */</span></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="keyword">protected</span> HystrixCommand&lt;List&lt;User&gt;&gt; createCommand(Collection&lt;CollapsedRequest&lt;User, Long&gt;&gt; collapsedRequests) &#123;</div><div class="line">        ArrayList&lt;Long&gt; userIds = <span class="keyword">new</span> ArrayList&lt;&gt;(collapsedRequests.size());</div><div class="line">        userIds.addAll(collapsedRequests.stream().map(CollapsedRequest::getArgument).collect(Collectors.toList()));</div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> UserBatchCommand(articleService,userIds);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line"><span class="comment">     * 该方法在批量请求命令UserBatchCommand执行完成之后执行</span></div><div class="line"><span class="comment">     * 通过遍历batchResponse来为collapsedRequests设置请求结果。</span></div><div class="line"><span class="comment">     * <span class="doctag">@param</span> batchResponse 保存了createCommand中组织的批量请求返回结果</span></div><div class="line"><span class="comment">     * <span class="doctag">@param</span> collapsedRequests 每个被合并的请求，</span></div><div class="line"><span class="comment">     */</span></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">mapResponseToRequests</span><span class="params">(List&lt;User&gt; batchResponse, Collection&lt;CollapsedRequest&lt;User, Long&gt;&gt; collapsedRequests)</span> </span>&#123;</div><div class="line">        <span class="keyword">int</span> count = <span class="number">0</span>;</div><div class="line">        <span class="keyword">for</span> (CollapsedRequest&lt;User,Long&gt; collapsedRequest : collapsedRequests)&#123;</div><div class="line">            User user = batchResponse.get(count++);</div><div class="line">            collapsedRequest.setResponse(user);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>测试接口，因为要将请求合并是合并100毫秒时间窗的请求，所以这里使用异步请求的方式。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@GetMapping</span>(<span class="string">"/testBathCommand"</span>)</div><div class="line"><span class="function"><span class="keyword">public</span> List&lt;User&gt; <span class="title">testBathCommand</span><span class="params">()</span> <span class="keyword">throws</span> ExecutionException, InterruptedException </span>&#123;</div><div class="line">    HystrixRequestContext context = HystrixRequestContext.initializeContext();</div><div class="line">    UserCollapdeCommand u1 = <span class="keyword">new</span> UserCollapdeCommand(articleService, <span class="number">1L</span>);</div><div class="line">    UserCollapdeCommand u2 = <span class="keyword">new</span> UserCollapdeCommand(articleService, <span class="number">2L</span>);</div><div class="line">    UserCollapdeCommand u3 = <span class="keyword">new</span> UserCollapdeCommand(articleService, <span class="number">3L</span>);</div><div class="line">    UserCollapdeCommand u4 = <span class="keyword">new</span> UserCollapdeCommand(articleService, <span class="number">4L</span>);</div><div class="line">    Future&lt;User&gt; q1 = u1.queue();</div><div class="line">    Future&lt;User&gt; q2 = u2.queue();</div><div class="line">    Future&lt;User&gt; q3 = u3.queue();</div><div class="line">    Future&lt;User&gt; q4 = u4.queue();</div><div class="line">    User e1 = q1.get();</div><div class="line">    User e2 = q2.get();</div><div class="line">    User e3 = q3.get();</div><div class="line">    User e4 = q4.get();</div><div class="line">    List&lt;User&gt; res = <span class="keyword">new</span> ArrayList&lt;&gt;();</div><div class="line">    res.add(e1);</div><div class="line">    res.add(e2);</div><div class="line">    res.add(e3);</div><div class="line">    res.add(e4);</div><div class="line">    System.out.println(res);</div><div class="line">    <span class="keyword">return</span> res;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ol>
<p><img src="http://oy09glbzm.bkt.clouddn.com/18-1-14/45378957.jpg?imageView2/0/q/75|watermark/2/text/d2FucWhibG9nLnRvcA==/font/5a6L5L2T/fontsize/300/fill/IzJDMUJFRQ==/dissolve/100/gravity/SouthEast/dx/10/dy/10" alt=""><br><img src="http://oy09glbzm.bkt.clouddn.com/18-1-14/21826880.jpg?imageView2/0/q/75|watermark/2/text/d2FucWhibG9nLnRvcA==/font/5a6L5L2T/fontsize/300/fill/IzJDMUJFRQ==/dissolve/100/gravity/SouthEast/dx/10/dy/10" alt=""></p>
<h2 id="注解方式"><a href="#注解方式" class="headerlink" title="注解方式"></a>注解方式</h2><p>上面使用继承类的方式可能会有些繁琐，在Hystrix中同样提供了注解来优雅的实现请求合并。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="meta">@HystrixCollapser</span>(batchMethod = <span class="string">"findAll"</span>,collapserProperties = &#123;</div><div class="line">           <span class="meta">@HystrixProperty</span>(name = <span class="string">"DelayInMilliseconds"</span>,value = <span class="string">"100"</span>)</div><div class="line">   &#125;)</div><div class="line">   <span class="function"><span class="keyword">public</span> User <span class="title">findOne</span><span class="params">(Long id)</span></span>&#123;</div><div class="line">       <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">   &#125;</div><div class="line">   <span class="meta">@HystrixCommand</span></div><div class="line">   <span class="function"><span class="keyword">public</span> List&lt;User&gt; <span class="title">findAll</span><span class="params">(List&lt;Long&gt; ids)</span></span>&#123;</div><div class="line">       System.out.println(<span class="string">"findUserByIds---------"</span>+ids+<span class="string">"Thread.currentThread().getName():"</span> + Thread.currentThread().getName());</div><div class="line">       String str = StringUtils.join(ids,<span class="string">","</span>);</div><div class="line">       User[] users =  restTemplate.getForObject(<span class="string">"http://USER-SERVICE/users/ids?ids=&#123;1&#125;"</span>, User[].class,str);</div><div class="line">       <span class="keyword">return</span> Arrays.asList(users);</div><div class="line">   &#125;</div></pre></td></tr></table></figure></p>
<p>这里通过@HystrixCollapser注解创建合并请求器，通过batchMethod属性指定实现批量请求的findAll方法，通过HystrixProperty属性为合并请求器设置相关属性。 <code>@HystrixProperty(name = &quot;DelayInMilliseconds&quot;,value = &quot;100&quot;)</code>设置时间窗为100毫秒。这里直接调用findOne方法即可，使用注解确实是简单。<br>测试接口<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@GetMapping</span>(<span class="string">"/testBathCommandAnn"</span>)</div><div class="line">  <span class="function"><span class="keyword">public</span> List&lt;User&gt; <span class="title">testBathCommandAnn</span><span class="params">()</span> <span class="keyword">throws</span> ExecutionException, InterruptedException </span>&#123;</div><div class="line">      HystrixRequestContext context = HystrixRequestContext.initializeContext();</div><div class="line">      Future&lt;User&gt; q1 = articleService.findOne(<span class="number">1L</span>);</div><div class="line">      Future&lt;User&gt; q2 = articleService.findOne(<span class="number">2L</span>);</div><div class="line">      Future&lt;User&gt; q3 = articleService.findOne(<span class="number">3L</span>);</div><div class="line">      Future&lt;User&gt; q4 = articleService.findOne(<span class="number">4L</span>);</div><div class="line">      User e1 = q1.get();</div><div class="line">      User e2 = q2.get();</div><div class="line">      User e3 = q3.get();</div><div class="line">      User e4 = q4.get();</div><div class="line">      List&lt;User&gt; res = <span class="keyword">new</span> ArrayList&lt;&gt;();</div><div class="line">      res.add(e1);</div><div class="line">      res.add(e2);</div><div class="line">      res.add(e3);</div><div class="line">      res.add(e4);</div><div class="line">      System.out.println(res);</div><div class="line">      <span class="keyword">return</span> res;</div><div class="line">  &#125;</div></pre></td></tr></table></figure></p>
<h1 id="Hystrix属性"><a href="#Hystrix属性" class="headerlink" title="Hystrix属性"></a>Hystrix属性</h1><p>Hystrix提供了非常灵活的配置方式，所有属性存在下面四个优先级的配置（优先级由低到高）：</p>
<ul>
<li>全局默认配置：如果没有下面三个级别的属性，那么该属性就是默认的；</li>
<li>全局配置属性：通过配置文件中定义；</li>
<li>实例默认值：通过代码为实例定义默认值；</li>
<li>实例配置属性：通过配置文件来指定的实例进行属性配置。<br>Hystrix中主要的三个属性：</li>
<li>Command属性：主要用来控制HystrixCommand命令行为；</li>
<li>Collapser属性：主要用来控制命令合并相关的行为；</li>
<li>ThreadPool属性：用来控制Hystrix命令所属线程池的配置。<br>关于属性参数的更多详解可以查看《SpringCloud微服务实战》<h1 id="Hystrix仪表盘"><a href="#Hystrix仪表盘" class="headerlink" title="Hystrix仪表盘"></a>Hystrix仪表盘</h1><h2 id="单机监控"><a href="#单机监控" class="headerlink" title="单机监控"></a>单机监控</h2>仪表盘是Hystrix Dashboard提供的用来实时监控Hystrix的指标信息的组件。通过该组件反馈的实时信息，可以帮助我们快速的发现系统存在的问题。项目结构图<br><img src="http://oy09glbzm.bkt.clouddn.com/18-1-15/76360834.jpg?imageView2/0/q/75|watermark/2/text/d2FucWhibG9nLnRvcA==/font/5a6L5L2T/fontsize/300/fill/IzJDMUJFRQ==/dissolve/100/gravity/SouthEast/dx/10/dy/10" alt=""></li>
</ul>
<ol>
<li><p>创建一个名为hystrix-dashborad的SpringBoot项目，然后修改pom文件，添加一下依赖：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">&lt;dependency&gt;</div><div class="line">	&lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;</div><div class="line">	&lt;artifactId&gt;spring-cloud-starter-hystrix&lt;/artifactId&gt;</div><div class="line">&lt;/dependency&gt;</div><div class="line">&lt;dependency&gt;</div><div class="line">	&lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;</div><div class="line">	&lt;artifactId&gt;spring-cloud-starter-hystrix-dashboard&lt;/artifactId&gt;</div><div class="line">&lt;/dependency&gt;</div><div class="line">&lt;dependency&gt;</div><div class="line">	&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</div><div class="line">	&lt;artifactId&gt;spring-boot-starter-actuator&lt;/artifactId&gt;</div><div class="line">&lt;/dependency&gt;</div></pre></td></tr></table></figure>
</li>
<li><p>然后再主类上使用注解<code>@EnableHystrixDashboard</code>开启HystrixDashboard功能。</p>
</li>
<li><p>修改配置文件：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">spring:</div><div class="line">  application:</div><div class="line">    name: hystrix-dashboard</div><div class="line">server:</div><div class="line">  port: <span class="number">9999</span></div></pre></td></tr></table></figure>
</li>
<li><p>启动项目，这里的监控方式是根据指定的url开启。前两个是对集群的监控，需要整合Turbin才能实现<br><img src="http://oy09glbzm.bkt.clouddn.com/18-1-15/78218935.jpg?imageView2/0/q/75|watermark/2/text/d2FucWhibG9nLnRvcA==/font/5a6L5L2T/fontsize/300/fill/IzJDMUJFRQ==/dissolve/100/gravity/SouthEast/dx/10/dy/10" alt=""></p>
</li>
<li><p>修改需要监控的服务实例，这里监控ARTICLE-SERVICE。添加<code>spring-boot-starter-actuator</code>监控模块的以开启监控相关的端点。还有hystrix依赖是一定要的。并且确保服务以及使用<code>@EnableCircuitBreaker</code>开启了断路器功能。</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">&lt;dependency&gt;</div><div class="line">	&lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;</div><div class="line">	&lt;artifactId&gt;spring-cloud-starter-hystrix&lt;/artifactId&gt;</div><div class="line">&lt;/dependency&gt;</div><div class="line">&lt;dependency&gt;</div><div class="line">	&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</div><div class="line">	&lt;artifactId&gt;spring-boot-starter-actuator&lt;/artifactId&gt;</div><div class="line">&lt;/dependency&gt;</div></pre></td></tr></table></figure>
</li>
<li><p>重启服务实例<br><img src="http://oy09glbzm.bkt.clouddn.com/18-1-15/58804496.jpg?imageView2/0/q/75|watermark/2/text/d2FucWhibG9nLnRvcA==/font/5a6L5L2T/fontsize/300/fill/IzJDMUJFRQ==/dissolve/100/gravity/SouthEast/dx/10/dy/10" alt=""></p>
</li>
<li>将需要监控的服务地址输入上面的输入框，这里是：<a href="http://localhost:30000/hystrix.stream。然后点击Monitor" target="_blank" rel="external">http://localhost:30000/hystrix.stream。然后点击Monitor</a> Stream按钮。说明：这里要访问/hystrix.stream，需要先访问被监控服务的任意其他接口，否则将不会无法获取到相应的数据。<br><img src="http://oy09glbzm.bkt.clouddn.com/18-1-15/45893648.jpg?imageView2/0/q/75|watermark/2/text/d2FucWhibG9nLnRvcA==/font/5a6L5L2T/fontsize/300/fill/IzJDMUJFRQ==/dissolve/100/gravity/SouthEast/dx/10/dy/10" alt=""><h2 id="集群监控"><a href="#集群监控" class="headerlink" title="集群监控"></a>集群监控</h2>可以使用Turbine实现集群监控，该端点为/trubine.stream。和上面一样，新建一个SpringBoot项目，这里命名为hystrix-turbine。添加以下依赖：<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">&lt;dependencies&gt;</div><div class="line">	&lt;dependency&gt;</div><div class="line">		&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</div><div class="line">		&lt;artifactId&gt;spring-boot-starter-actuator&lt;/artifactId&gt;</div><div class="line">	&lt;/dependency&gt;</div><div class="line">	&lt;dependency&gt;</div><div class="line">		&lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;</div><div class="line">		&lt;artifactId&gt;spring-cloud-starter-turbine&lt;/artifactId&gt;</div><div class="line">	&lt;/dependency&gt;</div><div class="line"></div><div class="line">&lt;/dependencies&gt;</div></pre></td></tr></table></figure>
</li>
</ol>
<p>在主类使用<code>@EnableTurbine</code>注解开启Trubine<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@SpringBootApplication</span></div><div class="line"><span class="meta">@EnableDiscoveryClient</span></div><div class="line"><span class="meta">@EnableTurbine</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TurbineApplication</span> </span>&#123;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">		SpringApplication.run(TurbineApplication.class, args);</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>修改配置文件<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">spring.application.name=hystrix-turbine</div><div class="line">server.port=<span class="number">9998</span></div><div class="line">management.port=<span class="number">9000</span></div><div class="line">eureka.client.service-url.defaultZone=http:<span class="comment">//localhost:8888/eureka/</span></div><div class="line">turbine.app-config=article-service</div><div class="line">turbine.cluster-name-expression=<span class="string">"default"</span></div><div class="line">turbine.combine-host-port=<span class="keyword">true</span></div></pre></td></tr></table></figure></p>
<blockquote>
<ol>
<li>turbine.app-config=ribbon-consumer指定了要监控的应用名字为ribbon-consumer</li>
<li>turbine.cluster-name-expression=”default”,表示集群的名字为default</li>
<li>turbine.combine-host-port=true表示同一主机上的服务通过host和port的组合来进行区分，默认情况下是使用host来区分，这样会使本地调试有问题</li>
</ol>
</blockquote>
<p>最后启动项目，并启动两个article-service，然后添加对 <a href="http://localhost:9998/turbine.stream的监控。" target="_blank" rel="external">http://localhost:9998/turbine.stream的监控。</a><br><img src="http://oy09glbzm.bkt.clouddn.com/18-1-15/1821604.jpg?imageView2/0/q/75|watermark/2/text/d2FucWhibG9nLnRvcA==/font/5a6L5L2T/fontsize/300/fill/IzJDMUJFRQ==/dissolve/100/gravity/SouthEast/dx/10/dy/10" alt=""></p>
<hr>
<p>作为SpringCloud学习笔记，有很多地方不好。望指出！！！</p>
<p>源码地址：<a href="https://gitee.com/wqh3520/spring-cloud-1-9" target="_blank" rel="external">https://gitee.com/wqh3520/</a></p>
<p>原文地址：<a href="http://www.wanqhblog.top/2018/01/15/SpringCloud%E5%AD%A6%E4%B9%A0%E4%B9%8BHystrix%EF%BC%88%E4%BA%8C%EF%BC%89/">SpringCloud容错保护Hystrix（二）</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;接着上一篇:&lt;a href=&quot;http://www.wanqhblog.top/2018/01/12/SpringCloud%E5%AD%A6%E4%B9%A0%E4%B9%8BHystrix%EF%BC%88%E4%B8%80%EF%BC%89/&quot;&gt;SpringCloud容错保护Hystrix（一）&lt;/a&gt;&lt;/p&gt;
&lt;h1 id=&quot;请求合并&quot;&gt;&lt;a href=&quot;#请求合并&quot; class=&quot;headerlink&quot; title=&quot;请求合并&quot;&gt;&lt;/a&gt;请求合并&lt;/h1&gt;&lt;p&gt;上一篇写到可以使用请求缓存来减轻高并发时的请求线程消耗、降低请求相应时间。请求合并又是什么东西呢？在微服务架构中，我们将项目拆分成多个模块，每个模块间通过远程调用进行通信。远程调用最常见的问题是通信消耗与连接数占用。在高并发情况下。随着通信次数的增加，通信时间会增加；因为依赖服务的线程池资源有限，将出现排队等待与响应延迟的情况。请求合并正是Hystrix为解决这两个问题而开发的，以减少通信消耗和线程数的占用。
    
    </summary>
    
      <category term="SpringClou" scheme="http://www.wanqhblog.top/categories/SpringClou/"/>
    
    
      <category term="SpringCloud" scheme="http://www.wanqhblog.top/tags/SpringCloud/"/>
    
      <category term="Hystrix" scheme="http://www.wanqhblog.top/tags/Hystrix/"/>
    
  </entry>
  
  <entry>
    <title>SpringCloud容错保护Hystrix（一）</title>
    <link href="http://www.wanqhblog.top/2018/01/12/SpringCloud%E5%AE%B9%E9%94%99%E4%BF%9D%E6%8A%A4Hystrix%EF%BC%88%E4%B8%80%EF%BC%89/"/>
    <id>http://www.wanqhblog.top/2018/01/12/SpringCloud容错保护Hystrix（一）/</id>
    <published>2018-01-12T01:57:51.000Z</published>
    <updated>2018-01-16T08:07:16.960Z</updated>
    
    <content type="html"><![CDATA[<p>与Eureka和Ribbon一样，Hystrix也是Netfix开源的一个框架，中文名：容错保护系统。SpringCloudHystrix实现了断路器、线程隔离等一系列服务保护功能。在微服务架构中，每个单元都在不同的进程中运行，进程间通过远程调用的方式相互依赖，这样就可能因为网络的原因出现调用故障和延迟，如果调用请求不断增加，将会导致自身服务的瘫痪。为了解决这些问题，产生了断路器等一系列服务保护机制。断路器详细介绍：<a href="https://martinfowler.com/bliki/CircuitBreaker.html" target="_blank" rel="external">断路器</a><a id="more"></a></p>
<h1 id="简单使用"><a href="#简单使用" class="headerlink" title="简单使用"></a>简单使用</h1><p>直接使用上一篇：<a href="http://www.wanqhblog.top/2018/01/11/springcloudribbon/">SpringCloud客户端负载均衡Ribbon</a>，在article-service中添加。<br>pom文件<br><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&lt;dependency&gt;</div><div class="line">	&lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;</div><div class="line">	&lt;artifactId&gt;spring-cloud-starter-hystrix&lt;/artifactId&gt;</div><div class="line">&lt;/dependency&gt;</div></pre></td></tr></table></figure></p>
<p>在主类上添加<code>@EnableCircuitBreaker</code>或<code>@EnableHystrix</code>注解开启Hystrix的使用。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@SpringBootApplication</span></div><div class="line"><span class="meta">@EnableEurekaClient</span></div><div class="line"><span class="meta">@EnableCircuitBreaker</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ArticleApplication</span> </span>&#123;</div><div class="line"></div><div class="line">	<span class="meta">@Bean</span></div><div class="line">	<span class="meta">@LoadBalanced</span></div><div class="line">	<span class="function"><span class="keyword">public</span> RestTemplate <span class="title">restTemplate</span><span class="params">()</span></span>&#123;</div><div class="line">		<span class="keyword">return</span> <span class="keyword">new</span> RestTemplate();</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">		SpringApplication.run(ArticleApplication.class, args);</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>这里也可以使用<code>@SpringCloudApplication</code>注解，该注解已经包含了我们添加的三个注解，所以可以看出SpringCloud的标准应用应该包服务发现和断路器<br><img src="http://oy09glbzm.bkt.clouddn.com/18-1-12/30794990.jpg?imageView2/0/q/75|watermark/2/text/d2FucWhibG9nLnRvcA==/font/5a6L5L2T/fontsize/300/fill/IzJDMUJFRQ==/dissolve/100/gravity/SouthEast/dx/10/dy/10" alt=""><br>然后在ArticleController添加方法，并添加<code>@HystrixCommand</code>定义服务降级，这里的<code>fallbackMethod</code>服务调用失败后调用的方法。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment"> * 使用Hystrix断路器</span></div><div class="line"><span class="comment"> * <span class="doctag">@param</span> id</span></div><div class="line"><span class="comment"> * <span class="doctag">@return</span></span></div><div class="line"><span class="comment"> */</span></div><div class="line"><span class="meta">@HystrixCommand</span>(fallbackMethod = <span class="string">"fallback"</span>)</div><div class="line"><span class="meta">@GetMapping</span>(<span class="string">"/hystrix/&#123;id&#125;"</span>)</div><div class="line"><span class="function"><span class="keyword">public</span> String <span class="title">findUserHystrix</span><span class="params">(@PathVariable(<span class="string">"id"</span>)</span> Long id)</span>&#123;</div><div class="line">    <span class="keyword">return</span> restTemplate.getForObject(<span class="string">"http://USER-SERVICE/user/&#123;1&#125;"</span>,User.class,id).toString();</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">private</span> String <span class="title">fallback</span><span class="params">(Long id)</span></span>&#123;</div><div class="line">    <span class="keyword">return</span> <span class="string">"Error:"</span>+id;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>重启服务，如果没有出现故障，这里是可以正常访问并返回正确的数据。下面将服务接口sleep来模拟网络延迟：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@RestController</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserController</span> </span>&#123;</div><div class="line">    <span class="meta">@Autowired</span></div><div class="line">    <span class="keyword">private</span> UserRepository userRepository;</div><div class="line">    <span class="meta">@GetMapping</span>(<span class="string">"/user/&#123;id&#125;"</span>)</div><div class="line">    <span class="function"><span class="keyword">public</span> User <span class="title">findById</span><span class="params">(@PathVariable(<span class="string">"id"</span>)</span> Long id) <span class="keyword">throws</span> InterruptedException </span>&#123;</div><div class="line">        Thread.sleep(<span class="number">5000</span>);</div><div class="line">        <span class="keyword">return</span> userRepository.findOne(id);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>访问：<a href="http://localhost:30000/hystrix/3，这里会调用回调函数返回数据。" target="_blank" rel="external">http://localhost:30000/hystrix/3，这里会调用回调函数返回数据。</a></p>
<p><img src="http://oy09glbzm.bkt.clouddn.com/18-1-12/54302934.jpg?imageView2/0/q/75|watermark/2/text/d2FucWhibG9nLnRvcA==/font/5a6L5L2T/fontsize/300/fill/IzJDMUJFRQ==/dissolve/100/gravity/SouthEast/dx/10/dy/10" alt=""></p>
<p>通过上面的使用，发现一个问题：使用这种方法配置服务降级的方式，回调函数的入参和返回值必须与接口函数的一直，不然会抛出异常。</p>
<h1 id="自定义Hystrix命令"><a href="#自定义Hystrix命令" class="headerlink" title="自定义Hystrix命令"></a>自定义Hystrix命令</h1><p>上面使用注解方式配置非常简单。在Hystrix中我们也可以通过继承<code>HystrixCommand</code>来实现自定义的<code>HystrixCommand</code>，而且还支持同步请求和异步请求两种方式。</p>
<p>创建UserCommand并继承HystrixCommand，实现run方法：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserCommand</span> <span class="keyword">extends</span> <span class="title">HystrixCommand</span>&lt;<span class="title">User</span>&gt; </span>&#123;</div><div class="line"></div><div class="line">	<span class="keyword">private</span> <span class="keyword">final</span> Logger logger =  LoggerFactory.getLogger(UserCommand.class);</div><div class="line">    <span class="keyword">private</span> RestTemplate restTemplate;</div><div class="line">    <span class="keyword">private</span> Long id;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">UserCommand</span><span class="params">(Setter setter,RestTemplate restTemplate,Long id)</span></span>&#123;</div><div class="line">        <span class="keyword">super</span>(setter);</div><div class="line">        <span class="keyword">this</span>.restTemplate = restTemplate;</div><div class="line">        <span class="keyword">this</span>.id = id;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> User <span class="title">run</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">        logger.info(<span class="string">"&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;自定义HystrixCommand请求&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;"</span>);</div><div class="line">        <span class="keyword">return</span> restTemplate.getForObject(<span class="string">"http://USER-SERVICE/user/&#123;1&#125;"</span>,User.class,id);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>然后添加一个接口<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"> <span class="meta">@GetMapping</span>(<span class="string">"/command/&#123;id&#125;"</span>)</div><div class="line">    <span class="function"><span class="keyword">public</span> User <span class="title">findUserCommand</span><span class="params">(@PathVariable(<span class="string">"id"</span>)</span> Long id) <span class="keyword">throws</span> ExecutionException, InterruptedException </span>&#123;</div><div class="line">        com.netflix.hystrix.HystrixCommand.Setter setter = com.netflix.hystrix.HystrixCommand.Setter.withGroupKey(HystrixCommandGroupKey.Factory.asKey(<span class="string">""</span>));</div><div class="line">        UserCommand userCommand = <span class="keyword">new</span> UserCommand(setter,restTemplate,id);</div><div class="line">        <span class="comment">//同步调用</span></div><div class="line"><span class="comment">//        User user = userCommand.execute();</span></div><div class="line">        <span class="comment">//异步请求</span></div><div class="line">        Future&lt;User&gt; queue = userCommand.queue();</div><div class="line">        User user = queue.get();</div><div class="line">        <span class="keyword">return</span> user;</div><div class="line">    &#125;</div></pre></td></tr></table></figure></p>
<p><code>Setter.withGroupKey(HystrixCommandGroupKey.Factory.asKey(&quot;&quot;))</code>是设置自定义命令的参数。先调用<code>withGroupKye</code>来设置分组，然后通过asKey来设置命令名；因为在Setter的定义中，只有withGroupKye静态函数可以创建Setter实例，所以GroupKey是Setter必需的参数。深入介绍可以查看源码或者看DD大佬的《SpringCloud微服务实战》。查看<code>@HystrixCommand</code>注解源码，可以看到这里也有groupKey、commandKey等参数，这也就是说使用@HystrixCommand注解时是可以配置命令名称、命令分组和线程池划分等参数的。<br><img src="http://oy09glbzm.bkt.clouddn.com/18-1-12/60356591.jpg?imageView2/0/q/75|watermark/2/text/d2FucWhibG9nLnRvcA==/font/5a6L5L2T/fontsize/300/fill/IzJDMUJFRQ==/dissolve/100/gravity/SouthEast/dx/10/dy/10" alt=""></p>
<h1 id="注解实现异步请求"><a href="#注解实现异步请求" class="headerlink" title="注解实现异步请求"></a>注解实现异步请求</h1><p>上面自定义命令中可以实现异步，同样也可以直接使用注解来实现异步请求；</p>
<ol>
<li><p>配置<code>HystrixCommandAspect</code>的Bean</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Bean</span></div><div class="line"><span class="function"><span class="keyword">public</span> HystrixCommandAspect <span class="title">hystrixCommandAspect</span><span class="params">()</span></span>&#123;</div><div class="line">	<span class="keyword">return</span> <span class="keyword">new</span> HystrixCommandAspect();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>然后使用AsyncResult来执行调用</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@HystrixCommand</span></div><div class="line"> <span class="meta">@GetMapping</span>(<span class="string">"/async/&#123;id&#125;"</span>)</div><div class="line"> <span class="function"><span class="keyword">public</span> Future&lt;User&gt; <span class="title">findUserAsync</span><span class="params">(@PathVariable(<span class="string">"id"</span>)</span> Long id)</span>&#123;</div><div class="line">     <span class="keyword">return</span> <span class="keyword">new</span> AsyncResult&lt;User&gt;() &#123;</div><div class="line">         <span class="meta">@Override</span></div><div class="line">         <span class="function"><span class="keyword">public</span> User <span class="title">invoke</span><span class="params">()</span> </span>&#123;</div><div class="line">             <span class="keyword">return</span> restTemplate.getForObject(<span class="string">"http://USER-SERVICE/user/&#123;1&#125;"</span>,User.class,id);</div><div class="line">         &#125;</div><div class="line">     &#125;;</div><div class="line"> &#125;</div></pre></td></tr></table></figure>
</li>
</ol>
<h1 id="异常处理"><a href="#异常处理" class="headerlink" title="异常处理"></a>异常处理</h1><h2 id="异常传播"><a href="#异常传播" class="headerlink" title="异常传播"></a>异常传播</h2><p>查看<code>@HystrixCommand</code>注解源码可以发现里面有个<code>ignoreExceptions</code>参数。该参数是定义忽略指定的异常功能。如下代码，当方法抛出<code>NullPointerException</code>时会将异常抛出，而不触发降级服务。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@HystrixCommand</span>(fallbackMethod = <span class="string">"fallback"</span>,ignoreExceptions = &#123;NullPointerException.class&#125;)</div><div class="line">  <span class="meta">@GetMapping</span>(<span class="string">"/hystrix/&#123;id&#125;"</span>)</div><div class="line">  <span class="function"><span class="keyword">public</span> User <span class="title">findUserHystrix</span><span class="params">(@PathVariable(<span class="string">"id"</span>)</span> Long id)</span>&#123;</div><div class="line">      <span class="keyword">return</span> restTemplate.getForObject(<span class="string">"http://USER-SERVICE/user/&#123;1&#125;"</span>,User.class,id);</div><div class="line">  &#125;</div></pre></td></tr></table></figure></p>
<h2 id="异常获取"><a href="#异常获取" class="headerlink" title="异常获取"></a>异常获取</h2><ol>
<li>传统的继承方式，在继承了<code>HystrixCommand</code>类中重写<code>getFallback()</code>方法，这里在run方法中添加弄出一个异常<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">protected</span> User <span class="title">getFallback</span><span class="params">()</span> </span>&#123;</div><div class="line">    Throwable e = getExecutionException();</div><div class="line">    logger.info(<span class="string">"&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&#123;&#125;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;"</span>,e.getMessage());</div><div class="line">    <span class="keyword">return</span> <span class="keyword">new</span> User(-<span class="number">1L</span>,<span class="string">""</span>,-<span class="number">1</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">protected</span> User <span class="title">run</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">    logger.info(<span class="string">"&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;自定义HystrixCommand请求&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;"</span>);</div><div class="line">    <span class="keyword">int</span> i = <span class="number">1</span>/<span class="number">0</span>;</div><div class="line">    <span class="keyword">return</span> restTemplate.getForObject(<span class="string">"http://USER-SERVICE/user/&#123;1&#125;"</span>,User.class,id);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ol>
<p><img src="http://oy09glbzm.bkt.clouddn.com/18-1-14/59881600.jpg?imageView2/0/q/75|watermark/2/text/d2FucWhibG9nLnRvcA==/font/5a6L5L2T/fontsize/300/fill/IzJDMUJFRQ==/dissolve/100/gravity/SouthEast/dx/10/dy/10" alt=""></p>
<ol>
<li>使用注解，在自定义的服务降级方法中可以使用Throwable 获取异常信息，<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@HystrixCommand</span>(fallbackMethod = <span class="string">"fallback"</span>)</div><div class="line"><span class="meta">@GetMapping</span>(<span class="string">"/hystrix/&#123;id&#125;"</span>)</div><div class="line"><span class="function"><span class="keyword">public</span> User <span class="title">findUserHystrix</span><span class="params">(@PathVariable(<span class="string">"id"</span>)</span> Long id)</span>&#123;</div><div class="line">    <span class="keyword">int</span> i = <span class="number">1</span>/<span class="number">0</span>;</div><div class="line">    <span class="keyword">return</span> restTemplate.getForObject(<span class="string">"http://USER-SERVICE/user/&#123;1&#125;"</span>,User.class,id);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">private</span> User <span class="title">fallback</span><span class="params">(Long id,Throwable throwable)</span></span>&#123;</div><div class="line">    LoggerFactory.getLogger(ArticleController.class).info(<span class="string">"========&#123;&#125;============="</span>,throwable.getMessage());</div><div class="line">    <span class="keyword">return</span> <span class="keyword">new</span> User();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ol>
<p><img src="http://oy09glbzm.bkt.clouddn.com/18-1-14/32605320.jpg?imageView2/0/q/75|watermark/2/text/d2FucWhibG9nLnRvcA==/font/5a6L5L2T/fontsize/300/fill/IzJDMUJFRQ==/dissolve/100/gravity/SouthEast/dx/10/dy/10" alt=""></p>
<h1 id="请求缓存"><a href="#请求缓存" class="headerlink" title="请求缓存"></a>请求缓存</h1><p>在高并发的场景下，Hystrix中提供了请求缓存的功能，可以方便的开启和使用请求缓存来优化系统，达到减轻高并发时的请求线程消耗、降低请求相应时间。</p>
<h2 id="继承方式"><a href="#继承方式" class="headerlink" title="继承方式"></a>继承方式</h2><p>在继承了<code>HystrixCommand</code>类中重写<code>getCacheKey()</code>方法<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">protected</span> String <span class="title">getCacheKey</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">return</span> String.valueOf(id);</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="title">UserCommand</span><span class="params">(RestTemplate restTemplate,Long id)</span></span>&#123;</div><div class="line">    <span class="keyword">super</span>(Setter.withGroupKey(HystrixCommandGroupKey.Factory.asKey(<span class="string">"userGroup"</span>)));</div><div class="line">    <span class="keyword">this</span>.restTemplate = restTemplate;</div><div class="line">    <span class="keyword">this</span>.id = id;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>通过getCacheKey()方法返回请求的Key值，Hystrix会根据getCacheKey返回的值来区分是否是重复请求，如果cacheKey相同，那么该依赖服务只会在第一个请求达到时被真实的调用，另一个请求则是直接从请求缓存中返回结果。<br><img src="http://oy09glbzm.bkt.clouddn.com/18-1-14/23199083.jpg?imageView2/0/q/75|watermark/2/text/d2FucWhibG9nLnRvcA==/font/5a6L5L2T/fontsize/300/fill/IzJDMUJFRQ==/dissolve/100/gravity/SouthEast/dx/10/dy/10" alt=""><br>修改后的接口类，该方法第一句为初始化HystrixRequestContext，如果不初始化该对象会报错。这里是在测试环境，如果在真正项目中该初始化不应该在指定方法中。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@GetMapping</span>(<span class="string">"/command/&#123;id&#125;"</span>)</div><div class="line">   <span class="function"><span class="keyword">public</span> User <span class="title">findUserCommand</span><span class="params">(@PathVariable(<span class="string">"id"</span>)</span> Long id) <span class="keyword">throws</span> ExecutionException, InterruptedException </span>&#123;</div><div class="line">       HystrixRequestContext.initializeContext();</div><div class="line">       UserCommand u1 = <span class="keyword">new</span> UserCommand(restTemplate,id);</div><div class="line">       UserCommand u2 = <span class="keyword">new</span> UserCommand(restTemplate,id);</div><div class="line">       UserCommand u3 = <span class="keyword">new</span> UserCommand(restTemplate,id);</div><div class="line">       UserCommand u4 = <span class="keyword">new</span> UserCommand(restTemplate,id);</div><div class="line">       User user1 = u1.execute();</div><div class="line">       System.out.println(<span class="string">"第一次请求"</span>+user1);</div><div class="line">       User user2 = u2.execute();</div><div class="line">       System.out.println(<span class="string">"第二次请求"</span>+user2);</div><div class="line">       User user3 = u3.execute();</div><div class="line">       System.out.println(<span class="string">"第三次请求"</span>+user3);</div><div class="line">       User user4 = u4.execute();</div><div class="line">       System.out.println(<span class="string">"第四次请求"</span>+user4);</div><div class="line">       <span class="keyword">return</span> user1;</div><div class="line">   &#125;</div></pre></td></tr></table></figure></p>
<h2 id="注解方式"><a href="#注解方式" class="headerlink" title="注解方式"></a>注解方式</h2><p>在SpringCloudHystrix中与缓存有关的三个注解：</p>
<ul>
<li>@CacheResult：用来标记其你去命令的结果应该被缓存，必须与@HystrixCommand注解结合使用；</li>
<li>@CacheRemove：该注解用来让请求命令的缓存失败，失效的缓存根据定义的Key决定；</li>
<li>@CacheKey：该注解用来在请求命令的参数上标记，是其作文缓存的Key值，如果没有标注则会使用所有参数。如果同时使用了@CacheResult和 @CacheRemove注解的cacheKeyMethod方法指定缓存Key生成，那么该注解将不会起作用。<br><strong>设置请求缓存</strong>，修改ArticleService方法，<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Service</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ArticleService</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="meta">@Autowired</span></div><div class="line">    <span class="keyword">private</span> RestTemplate restTemplate;</div><div class="line"></div><div class="line">    <span class="meta">@HystrixCommand</span></div><div class="line">    <span class="meta">@CacheResult</span></div><div class="line">    <span class="function"><span class="keyword">public</span> User <span class="title">getUserById</span><span class="params">(Long id)</span></span>&#123;</div><div class="line">        <span class="keyword">return</span> restTemplate.getForObject(<span class="string">"http://USER-SERVICE/user/&#123;1&#125;"</span>,User.class,id);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
<p>添加接口<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@GetMapping</span>(<span class="string">"/cache/&#123;id&#125;"</span>)</div><div class="line"><span class="function"><span class="keyword">public</span> User <span class="title">findUserCache</span><span class="params">(@PathVariable(<span class="string">"id"</span>)</span> Long id)</span>&#123;</div><div class="line">    HystrixRequestContext.initializeContext();</div><div class="line">    User user1  = articleService.getUserById(id);</div><div class="line">    System.out.println(<span class="string">"第一次请求"</span>+user1);</div><div class="line">    User user2 = articleService.getUserById(id);</div><div class="line">    System.out.println(<span class="string">"第二次请求"</span>+user2);</div><div class="line">    User user3 = articleService.getUserById(id);</div><div class="line">    System.out.println(<span class="string">"第三次请求"</span>+user3);</div><div class="line">    User user4 =articleService.getUserById(id);</div><div class="line">    System.out.println(<span class="string">"第四次请求"</span>+user4);</div><div class="line">   <span class="keyword">return</span> articleService.getUserById(id);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p><strong>定义缓存的Key</strong></p>
<ol>
<li><p>使用@CacheKey，该注解除了可以指定方法参数作为缓存key之外，还可以指定方法参数对象的内不属性作为Key</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@HystrixCommand</span></div><div class="line">   <span class="meta">@CacheResult</span></div><div class="line">   <span class="function"><span class="keyword">public</span> User <span class="title">getUserById</span><span class="params">(@CacheKey(<span class="string">"id"</span>)</span> Long id)</span>&#123;</div><div class="line">       <span class="keyword">return</span> restTemplate.getForObject(<span class="string">"http://USER-SERVICE/user/&#123;1&#125;"</span>,User.class,id);</div><div class="line">   &#125;</div></pre></td></tr></table></figure>
</li>
<li><p>使用@CacheResult和@CacheRemove的cacheKeyMethod属性指定Key，如果与上面的CacheKey注解一起使用，则CacheKey将失效</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@HystrixCommand</span></div><div class="line">    <span class="meta">@CacheResult</span>(cacheKeyMethod = <span class="string">"getCacheKey"</span>)</div><div class="line">    <span class="function"><span class="keyword">public</span> User <span class="title">getUserById</span><span class="params">(Long id)</span></span>&#123;</div><div class="line">        <span class="keyword">return</span> restTemplate.getForObject(<span class="string">"http://USER-SERVICE/user/&#123;1&#125;"</span>,User.class,id);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> Long <span class="title">getCacheKey</span><span class="params">(Long id)</span></span>&#123;</div><div class="line">        <span class="keyword">return</span> id;</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
</li>
</ol>
<h2 id="缓存清理"><a href="#缓存清理" class="headerlink" title="缓存清理"></a>缓存清理</h2><p>上面说通过继承和注解方式都可以将请求保存到缓存，但是当我们更新了数据库的数据，缓存的数据已经是过期数据，这时候再次请求，数据已经失效。所以我们需要更新缓存。在Hystrix中继承和注解都可以实现清除缓存。<br><strong>1. 使用继承方式：</strong>前面介绍使用继承是继承HystrixCommand，然后再run方法中触发请求操作，所以这里创建两个类进程HystrixCommand，一个实现查询，一个实现更新。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GetUserCommand</span>  <span class="keyword">extends</span> <span class="title">HystrixCommand</span>&lt;<span class="title">User</span>&gt; </span>&#123;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Logger logger = LoggerFactory.getLogger(GetUserCommand.class);</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> HystrixCommandKey GETTER_KEY = HystrixCommandKey.Factory.asKey(<span class="string">"CommandKey"</span>);</div><div class="line">    <span class="keyword">private</span> RestTemplate restTemplate;</div><div class="line">    <span class="keyword">private</span> Long id;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">GetUserCommand</span><span class="params">(RestTemplate restTemplate, Long id)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>(Setter.withGroupKey(HystrixCommandGroupKey.Factory.asKey(<span class="string">"userGroup"</span>)));</div><div class="line">        <span class="keyword">this</span>.restTemplate = restTemplate;</div><div class="line">        <span class="keyword">this</span>.id = id;</div><div class="line">    &#125;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> User <span class="title">run</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">        logger.info(<span class="string">"&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;查询操作&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;"</span>);</div><div class="line">        <span class="keyword">return</span> restTemplate.getForObject(<span class="string">"http://USER-SERVICE/user/&#123;1&#125;"</span>, User.class, id);</div><div class="line">    &#125;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> String <span class="title">getCacheKey</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="comment">//根据id保存缓存</span></div><div class="line">        <span class="keyword">return</span> String.valueOf(id);</div><div class="line">    &#125;</div><div class="line">    <span class="comment">/**</span></div><div class="line"><span class="comment">     * 根据id清理缓存</span></div><div class="line"><span class="comment">     * <span class="doctag">@param</span> id</span></div><div class="line"><span class="comment">     */</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">flushCache</span><span class="params">(Long id)</span></span>&#123;</div><div class="line">        logger.info(<span class="string">" &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;GETTER_KEY:&#123;&#125;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;"</span>,GETTER_KEY);</div><div class="line">        HystrixRequestCache.getInstance(GETTER_KEY,</div><div class="line">                HystrixConcurrencyStrategyDefault.getInstance()).clear(String.valueOf(id));</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PostUserCommand</span> <span class="keyword">extends</span> <span class="title">HystrixCommand</span>&lt;<span class="title">User</span>&gt; </span>&#123;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Logger logger =  LoggerFactory.getLogger(UserCommand.class);</div><div class="line">    <span class="keyword">private</span> RestTemplate restTemplate;</div><div class="line">    <span class="keyword">private</span> User user;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">PostUserCommand</span><span class="params">(RestTemplate restTemplate,User user)</span></span>&#123;</div><div class="line">        <span class="keyword">super</span>(Setter.withGroupKey(HystrixCommandGroupKey.Factory.asKey(<span class="string">"userGroup"</span>)));</div><div class="line">        <span class="keyword">this</span>.restTemplate = restTemplate;</div><div class="line">        <span class="keyword">this</span>.user = user;</div><div class="line">    &#125;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> User <span class="title">run</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">        logger.info(<span class="string">"&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;更新操作&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;"</span>);</div><div class="line">        User user1 = restTemplate.postForEntity(<span class="string">"http://USER-SERVICE/u/update"</span>, user, User.class).getBody();</div><div class="line">        <span class="comment">//刷新缓存，清理失效的缓存</span></div><div class="line">        GetUserCommand.flushCache(user1.getId());</div><div class="line">        <span class="keyword">return</span> user1;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>添加接口：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@GetMapping</span>(<span class="string">"/getcommand/&#123;id&#125;"</span>)</div><div class="line">   <span class="function"><span class="keyword">public</span> User <span class="title">testGetCommand</span><span class="params">(@PathVariable(<span class="string">"id"</span>)</span> Long id)</span>&#123;</div><div class="line">       GetUserCommand u1 = <span class="keyword">new</span> GetUserCommand(restTemplate,id);</div><div class="line">       GetUserCommand u2 = <span class="keyword">new</span> GetUserCommand(restTemplate,id);</div><div class="line">       GetUserCommand u3 = <span class="keyword">new</span> GetUserCommand(restTemplate,id);</div><div class="line">       GetUserCommand u4 = <span class="keyword">new</span> GetUserCommand(restTemplate,id);</div><div class="line">       User user1 = u1.execute();</div><div class="line">       System.out.println(<span class="string">"第一次请求"</span>+user1);</div><div class="line">       User user2 = u2.execute();</div><div class="line">       System.out.println(<span class="string">"第二次请求"</span>+user2);</div><div class="line">       User user3 = u3.execute();</div><div class="line">       System.out.println(<span class="string">"第三次请求"</span>+user3);</div><div class="line">       User user4 = u4.execute();</div><div class="line">       System.out.println(<span class="string">"第四次请求"</span>+user4);</div><div class="line">       <span class="keyword">return</span> user1;</div><div class="line">   &#125;</div><div class="line"></div><div class="line">   <span class="meta">@PostMapping</span>(<span class="string">"/postcommand"</span>)</div><div class="line">   <span class="function"><span class="keyword">public</span> User <span class="title">testPostCommand</span><span class="params">(User user)</span></span>&#123;</div><div class="line">       HystrixRequestContext.initializeContext();</div><div class="line">       PostUserCommand u1 = <span class="keyword">new</span> PostUserCommand(restTemplate,user);</div><div class="line">       User execute = u1.execute();</div><div class="line">       <span class="keyword">return</span> execute;</div><div class="line">   &#125;</div></pre></td></tr></table></figure></p>
<p>在上面GetUserCommand方法中添加flushCache的静态方法，该方法通过<code>HystrixRequestCache.getInstance(GETTER_KEY,            HystrixConcurrencyStrategyDefault.getInstance());</code>方法从默认的Hystrix并发策略中根据<code>GETTER_KEY</code>获取到该命令的请求缓存对象HystrixRequestCache，然后再调用clear方法清理key为id的缓存。<br><strong>2. 使用注解方式：</strong>上面提到了<code>@CacheRemove</code>注解是使缓存失效<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@CacheRemove</span>(commandKey = <span class="string">"getUserById"</span>)</div><div class="line"><span class="function"><span class="keyword">public</span> User <span class="title">update</span><span class="params">(@CacheKey(<span class="string">"id"</span>)</span>User user)</span>&#123;</div><div class="line">    <span class="keyword">return</span>  restTemplate.postForEntity(<span class="string">"http://USER-SERVICE/u/update"</span>, user, User.class).getBody();</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p><code>@CacheRemove</code>的commandKey属性是必须指定的，它用来指明需要使用请求缓存的请求命令，只有通过该属性的配置，Hystrix才能找到正确的请求命令缓存位置。</p>
<p>使用请求缓存的时候需要注意的是，必须先使用 <code>HystrixRequestContext.initializeContext();</code>，该方法的调用可以放到拦截器中执行，这里因为是测试，所以直接在接口中调用。</p>
<hr>
<p>作为SpringCloud学习笔记，有很多地方不好。望指出！！！</p>
<p>源码地址：<a href="https://gitee.com/wqh3520/spring-cloud-1-9/tree/master/" target="_blank" rel="external">https://gitee.com/wqh3520/spring-cloud-1-9/tree/master/</a></p>
<p>原文地址：<a href="http://www.wanqhblog.top/2018/01/12/SpringCloud%E5%AD%A6%E4%B9%A0%E4%B9%8BHystrix%EF%BC%88%E4%B8%80%EF%BC%89/">SpringCloud容错保护Hystrix（一）</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;与Eureka和Ribbon一样，Hystrix也是Netfix开源的一个框架，中文名：容错保护系统。SpringCloudHystrix实现了断路器、线程隔离等一系列服务保护功能。在微服务架构中，每个单元都在不同的进程中运行，进程间通过远程调用的方式相互依赖，这样就可能因为网络的原因出现调用故障和延迟，如果调用请求不断增加，将会导致自身服务的瘫痪。为了解决这些问题，产生了断路器等一系列服务保护机制。断路器详细介绍：&lt;a href=&quot;https://martinfowler.com/bliki/CircuitBreaker.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;断路器&lt;/a&gt;
    
    </summary>
    
      <category term="SpringClou" scheme="http://www.wanqhblog.top/categories/SpringClou/"/>
    
    
      <category term="SpringCloud" scheme="http://www.wanqhblog.top/tags/SpringCloud/"/>
    
      <category term="Hystrix" scheme="http://www.wanqhblog.top/tags/Hystrix/"/>
    
  </entry>
  
  <entry>
    <title>SpringCloud客户端负载均衡Ribbon</title>
    <link href="http://www.wanqhblog.top/2018/01/11/springcloud%E5%AE%A2%E6%88%B7%E7%AB%AF%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1ribbon/"/>
    <id>http://www.wanqhblog.top/2018/01/11/springcloud客户端负载均衡ribbon/</id>
    <published>2018-01-11T08:52:36.000Z</published>
    <updated>2018-01-16T08:06:42.553Z</updated>
    
    <content type="html"><![CDATA[<p>上一篇写到关于SpringCloudEureka的相关知识：<a href="http://www.wanqhblog.top/2018/01/10/SprngCloudEureka/">SpringCloud服务治理Eureka</a>。我们实现的服注册中心，以及服务提供者。接下来记录关于服务消费，以及客户端负载均衡器Ribbon的简单使用和配置。在使用Ribbon之前，先看看怎么调用服务吧。</p>
<h2 id="基础的服务消费"><a href="#基础的服务消费" class="headerlink" title="基础的服务消费"></a>基础的服务消费</h2><h3 id="服务提供者"><a href="#服务提供者" class="headerlink" title="服务提供者"></a>服务提供者</h3><p>在上一篇的基础之上，创建一个<code>service-user</code>的微服务。这个微服我使用了h2数据库来保存数据，所以需要在配置文件中添加关于数据库的配置以及在pom文件中添加依赖，<a id="more"></a><br>application.yml<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line">server:</div><div class="line">  port: <span class="number">40000</span></div><div class="line">spring:</div><div class="line">  application:</div><div class="line">    name: user-service</div><div class="line">#===========================================================</div><div class="line">#   数据库配置</div><div class="line">#===========================================================</div><div class="line">  jpa:</div><div class="line">    show-sql: <span class="keyword">true</span></div><div class="line">    hibernate:</div><div class="line">      ddl-auto: none</div><div class="line">    generate-ddl: <span class="keyword">false</span></div><div class="line">  datasource:</div><div class="line">    platform: h2</div><div class="line">    schema: classpath:schema.sql</div><div class="line">    data: classpath:data.sql</div><div class="line">#===========================================================</div><div class="line">#   eureka配置</div><div class="line">#===========================================================</div><div class="line">eureka:</div><div class="line">  client:</div><div class="line">    serviceUrl:</div><div class="line">      defaultZone: http:<span class="comment">//localhost:8888/eureka/</span></div><div class="line">  instance:</div><div class="line">    prefer-ip-address: <span class="keyword">true</span></div><div class="line">    instance-id: $&#123;spring.application.name&#125;:$&#123;server.port&#125;</div></pre></td></tr></table></figure></p>
<p>pom.xml<br><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">&lt;dependencies&gt;</div><div class="line">	&lt;dependency&gt;</div><div class="line">		&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</div><div class="line">		&lt;artifactId&gt;spring-boot-starter-data-jpa&lt;/artifactId&gt;</div><div class="line">	&lt;/dependency&gt;</div><div class="line"></div><div class="line">	&lt;dependency&gt;</div><div class="line">		&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</div><div class="line">		&lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;</div><div class="line">	&lt;/dependency&gt;</div><div class="line"></div><div class="line">	&lt;dependency&gt;</div><div class="line">		&lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;</div><div class="line">		&lt;artifactId&gt;spring-cloud-starter-eureka&lt;/artifactId&gt;</div><div class="line">	&lt;/dependency&gt;</div><div class="line">	&lt;dependency&gt;</div><div class="line">		&lt;groupId&gt;com.h2database&lt;/groupId&gt;</div><div class="line">		&lt;artifactId&gt;h2&lt;/artifactId&gt;</div><div class="line">		&lt;scope&gt;runtime&lt;/scope&gt;</div><div class="line">	&lt;/dependency&gt;</div><div class="line">&lt;/dependencies&gt;</div></pre></td></tr></table></figure></p>
<p>然后编写数据库文件初始化数据；<br>schema.sql<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">DROP TABLE user <span class="keyword">if</span>  EXISTS ;</div><div class="line"><span class="function">create table <span class="title">user</span> <span class="params">(</span></span></div><div class="line"><span class="function"><span class="params">  id <span class="keyword">int</span> generated by DEFAULT  as IDENTITY,</span></span></div><div class="line"><span class="function"><span class="params">  username VARCHAR (<span class="number">40</span>)</span>,</span></div><div class="line"><span class="function">  age <span class="title">INT</span><span class="params">(<span class="number">3</span>)</span>,</span></div><div class="line"><span class="function">  PRIMARY <span class="title">KEY</span> <span class="params">(id)</span></span></div><div class="line"><span class="function">)</span>;</div></pre></td></tr></table></figure></p>
<p>data.sql<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">insert</span> <span class="keyword">into</span> <span class="keyword">user</span> (<span class="keyword">id</span>,username,age) <span class="keyword">values</span> (<span class="number">1</span>,<span class="string">'张三'</span>,<span class="number">20</span>);</div><div class="line"><span class="keyword">insert</span> <span class="keyword">into</span> <span class="keyword">user</span> (<span class="keyword">id</span>,username,age) <span class="keyword">values</span> (<span class="number">2</span>,<span class="string">'李四'</span>,<span class="number">25</span>);</div><div class="line"><span class="keyword">insert</span> <span class="keyword">into</span> <span class="keyword">user</span> (<span class="keyword">id</span>,username,age) <span class="keyword">values</span> (<span class="number">3</span>,<span class="string">'王五'</span>,<span class="number">23</span>);</div><div class="line"><span class="keyword">insert</span> <span class="keyword">into</span> <span class="keyword">user</span> (<span class="keyword">id</span>,username,age) <span class="keyword">values</span> (<span class="number">4</span>,<span class="string">'赵六'</span>,<span class="number">30</span>);</div></pre></td></tr></table></figure></p>
<p>User实体类，这里使用了<code>lombok</code>工具<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Entity</span></div><div class="line"><span class="meta">@Data</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="meta">@Id</span></div><div class="line">    <span class="meta">@GeneratedValue</span>(strategy = GenerationType.AUTO)</div><div class="line">    <span class="keyword">private</span> Long id;</div><div class="line">    <span class="meta">@Column</span></div><div class="line">    <span class="keyword">private</span> String username;</div><div class="line">    <span class="meta">@Column</span></div><div class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>然后创建<code>UserRepository</code>和<code>UserController</code>，在<code>UserController</code>中添加一个根据id查询的接口：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Autowired</span></div><div class="line"><span class="keyword">private</span> UserRepository userRepository;</div><div class="line"><span class="meta">@GetMapping</span>(<span class="string">"/user/&#123;id&#125;"</span>)</div><div class="line"><span class="function"><span class="keyword">public</span> User <span class="title">findById</span><span class="params">(@PathVariable(<span class="string">"id"</span>)</span> Long id)</span>&#123;</div><div class="line">    <span class="keyword">return</span> userRepository.findOne(id);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>在<code>SpringBoot</code>入口类上添加<code>@EnableEurekaClient</code>注解<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@EnableEurekaClient</span></div><div class="line"><span class="meta">@SpringBootApplication</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserApplication</span> </span>&#123;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">		SpringApplication.run(UserApplication.class, args);</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>最终的项目结构：</p>
<p><img src="http://oy09glbzm.bkt.clouddn.com/18-1-11/38826206.jpg?imageView2/0/q/75|watermark/2/text/d2FucWhibG9nLnRvcA==/font/5a6L5L2T/fontsize/300/fill/IzJDMUJFRQ==/dissolve/100/gravity/SouthEast/dx/10/dy/10" alt=""></p>
<p>启动项目，访问：<code>http://localhost:40000/user/1</code><br><img src="http://oy09glbzm.bkt.clouddn.com/18-1-11/13807012.jpg?imageView2/0/q/75|watermark/2/text/d2FucWhibG9nLnRvcA==/font/5a6L5L2T/fontsize/300/fill/IzJDMUJFRQ==/dissolve/100/gravity/SouthEast/dx/10/dy/10" alt=""></p>
<h3 id="服务消费"><a href="#服务消费" class="headerlink" title="服务消费"></a>服务消费</h3><p>这里直接修改上一篇<code>service-article</code>服务，用<code>service-article</code>服务来调用<code>service-user</code>服务。所以需要修改<code>service-article</code>，新增<code>User</code>对象和<code>ArticleController</code>，在<code>ArticleController</code>中添加一个查询接口。<br>这里调用服务都是使用<code>RestTemplate</code>，所以先在入口内中注册注册<code>RestTemplate</code>，<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@SpringBootApplication</span></div><div class="line"><span class="meta">@EnableEurekaClient</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ArticleApplication</span> </span>&#123;</div><div class="line"></div><div class="line">	<span class="meta">@Bean</span></div><div class="line">	<span class="function"><span class="keyword">public</span> RestTemplate <span class="title">restTemplate</span><span class="params">()</span></span>&#123;</div><div class="line">		<span class="keyword">return</span> <span class="keyword">new</span> RestTemplate();</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">		SpringApplication.run(ArticleApplication.class, args);</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>User实体，可以直接拷贝user微服务的实体类去掉注解即可，因为这里不是持久化对象。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Data</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> Long id;</div><div class="line">    <span class="keyword">private</span> String username;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>ArticleController<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@RestController</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ArticleController</span> </span>&#123;</div><div class="line">    <span class="meta">@Autowired</span></div><div class="line">    <span class="keyword">private</span> RestTemplate restTemplate;</div><div class="line"></div><div class="line">    <span class="meta">@GetMapping</span>(<span class="string">"/a/u/&#123;id&#125;"</span>)</div><div class="line">    <span class="function"><span class="keyword">public</span> User <span class="title">getUser</span><span class="params">(@PathVariable(<span class="string">"id"</span>)</span> Long id)</span>&#123;</div><div class="line">        <span class="keyword">return</span> restTemplate.getForObject(<span class="string">"http://localhost:40000/user/&#123;1&#125;"</span>,User.class,id);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>启动服务，访问：<a href="http://localhost:30000/a/u/2" target="_blank" rel="external">http://localhost:30000/a/u/2</a></p>
<h2 id="使用Ribbon"><a href="#使用Ribbon" class="headerlink" title="使用Ribbon"></a>使用Ribbon</h2><h3 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h3><p>SpringCloudRibbon是一个基于HTTP和TCP的客户端负载均衡工具。是基于Netfix Ribbon实现的。SpringCloud将其封装，可以让我们轻松的将面向服务的REST模板自动转换成客户端负载均衡的服务调用。</p>
<h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><p>修改<code>article-service</code>，<br>添加依赖<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&lt;dependency&gt;</div><div class="line">	&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</div><div class="line">	&lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;</div><div class="line">&lt;/dependency&gt;</div></pre></td></tr></table></figure></p>
<p>在注册<code>RestTemplate</code>方法上添加<code>@LoadBalanced</code>注解开启客户端负载均衡，然后修改请求的URL，直接使用服务名请求，这里能够直接使用服务名，是因为在SpringCloudRibbon中有一个拦截器，他能够在实际调用的时候自动的选取服务实例，并将实际请求的ip地址替换这里的服务名。详细介绍可以查看DD大佬的书：&lt;<springcloud微服务实战>&gt;<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@GetMapping</span>(<span class="string">"/a/u/&#123;id&#125;"</span>)</div><div class="line"><span class="function"><span class="keyword">public</span> User <span class="title">getUser</span><span class="params">(@PathVariable(<span class="string">"id"</span>)</span> Long id)</span>&#123;</div><div class="line">    <span class="keyword">return</span> restTemplate.getForObject(<span class="string">"http://USER-SERVICE:40000/user/&#123;1&#125;"</span>,User.class,id);</div><div class="line">&#125;</div></pre></td></tr></table></figure></springcloud微服务实战></p>
<p>最后为了测试负载均衡，我们需要开启多个USER-SERVICE服务实例；在USER-SERVICE中添加<code>application-pree1.yml</code>和<code>application-pree2.yml</code>，具体配与application.yml一样，只要修改<code>server.port</code>，这里分别是40001和40002。然后打包服务，分别启动两个服务<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">java -jar user-0.0.1-SNAPSHOT.jar --spring.profiles.active=pree1</div><div class="line"></div><div class="line">java -jar user-0.0.1-SNAPSHOT.jar --spring.profiles.active=pree2</div></pre></td></tr></table></figure></p>
<p>在注册中心可以看到三个USER-SERVICE服务：<br><img src="http://oy09glbzm.bkt.clouddn.com/18-1-11/1932464.jpg?imageView2/0/q/75|watermark/2/text/d2FucWhibG9nLnRvcA==/font/5a6L5L2T/fontsize/300/fill/IzJDMUJFRQ==/dissolve/100/gravity/SouthEast/dx/10/dy/10" alt=""><br>最后启动ARTICLE-SERVICE，并访问接口。刷新几次页面，发现三个服务都会打印数据库语句，这里调用方式为线性轮询<br><img src="http://oy09glbzm.bkt.clouddn.com/18-1-11/71968186.jpg?imageView2/0/q/75|watermark/2/text/d2FucWhibG9nLnRvcA==/font/5a6L5L2T/fontsize/300/fill/IzJDMUJFRQ==/dissolve/100/gravity/SouthEast/dx/10/dy/10" alt=""></p>
<h2 id="Ribbon的配置"><a href="#Ribbon的配置" class="headerlink" title="Ribbon的配置"></a>Ribbon的配置</h2><p>当我们在SpringBoot项目中添加SpringCloudRibbon以后，SpringBoot会为我们自动化配置Ribbon，有些时候自动化配置是无法满足需要的。我们都知道在SpringBoot中我们可以使用两种配置属性的方法：使用java config方式和在配置文件中配置。</p>
<h3 id="使用配置类的方式"><a href="#使用配置类的方式" class="headerlink" title="使用配置类的方式"></a>使用配置类的方式</h3><p>创建<code>UserServiceConfig</code>，该类不能在启动时候被扫描到，所以我们需要将该类放到SpringBoot入口类的上一层路径下。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Configuration</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserServiceConfig</span> </span>&#123;</div><div class="line">    <span class="comment">/**</span></div><div class="line"><span class="comment">     *将服务检查策略改为PingUrl</span></div><div class="line"><span class="comment">     * <span class="doctag">@return</span></span></div><div class="line"><span class="comment">     */</span></div><div class="line">    <span class="meta">@Bean</span></div><div class="line">    <span class="function"><span class="keyword">public</span> IPing <span class="title">ribbonPing</span><span class="params">()</span></span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> PingUrl();</div><div class="line">    &#125;</div><div class="line">    <span class="comment">/**</span></div><div class="line"><span class="comment">     * 将负载均衡的策略改为随机选取服务实例</span></div><div class="line"><span class="comment">     * <span class="doctag">@return</span></span></div><div class="line"><span class="comment">     */</span></div><div class="line">    <span class="meta">@Bean</span></div><div class="line">    <span class="function"><span class="keyword">public</span> IRule <span class="title">ribbonRule</span><span class="params">()</span></span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> RandomRule();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>然后创建<code>RibbonConfig</code>,这里<code>@RibbonClients</code>注解是可以指定多个RibbonClient，而<code>@RibbonClient</code>注解则是指定那个哪个服务使用哪个配置类<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Configuration</span></div><div class="line"><span class="meta">@RibbonClients</span>(&#123;</div><div class="line">        <span class="meta">@RibbonClient</span>(name = <span class="string">"user-service"</span>,configuration = UserServiceConfig.class),</div><div class="line">&#125;)</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RibbonConfig</span> </span>&#123;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="在appplication-yml中配置"><a href="#在appplication-yml中配置" class="headerlink" title="在appplication.yml中配置"></a>在appplication.yml中配置</h3><p>在配置文件中配置时候我们也可以配置全局的和指定客户端方式配置</p>
<ol>
<li>全局配置，只需要使用<code>ribbon.&lt;key&gt;=&lt;value&gt;</code>，key客户端配置参数名，value为对应的参数值</li>
<li>指定客户端配置，使用<code>&lt;client&gt;.ribbon.&lt;key&gt;=&lt;value&gt;</code>，这里的client为指定的服务名。下面为user-service指定负载均衡策略：<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">USER-SERVICE:</div><div class="line">  ribbon:</div><div class="line">    RulePredicateClasses: com.netflix.loadbalancer.RandomRule</div></pre></td></tr></table></figure>
</li>
</ol>
<p>更多关于key的配置信息可以查看<code>com.netflix.client.config.CommonClientConfigKey</code>。</p>
<hr>
<p>作为SpringCloud学习笔记，可能有很多地方不好。望指出！！！</p>
<p>源码地址：<a href="https://gitee.com/wqh3520/spring-cloud-1-9/tree/master/" target="_blank" rel="external">https://gitee.com/wqh3520/</a></p>
<p>原文地址：<a href="http://www.wanqhblog.top/2018/01/11/springcloudribbon/">SpringCloud客户端负载均衡Ribbon</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;上一篇写到关于SpringCloudEureka的相关知识：&lt;a href=&quot;http://www.wanqhblog.top/2018/01/10/SprngCloudEureka/&quot;&gt;SpringCloud服务治理Eureka&lt;/a&gt;。我们实现的服注册中心，以及服务提供者。接下来记录关于服务消费，以及客户端负载均衡器Ribbon的简单使用和配置。在使用Ribbon之前，先看看怎么调用服务吧。&lt;/p&gt;
&lt;h2 id=&quot;基础的服务消费&quot;&gt;&lt;a href=&quot;#基础的服务消费&quot; class=&quot;headerlink&quot; title=&quot;基础的服务消费&quot;&gt;&lt;/a&gt;基础的服务消费&lt;/h2&gt;&lt;h3 id=&quot;服务提供者&quot;&gt;&lt;a href=&quot;#服务提供者&quot; class=&quot;headerlink&quot; title=&quot;服务提供者&quot;&gt;&lt;/a&gt;服务提供者&lt;/h3&gt;&lt;p&gt;在上一篇的基础之上，创建一个&lt;code&gt;service-user&lt;/code&gt;的微服务。这个微服我使用了h2数据库来保存数据，所以需要在配置文件中添加关于数据库的配置以及在pom文件中添加依赖，
    
    </summary>
    
      <category term="SpringCloud" scheme="http://www.wanqhblog.top/categories/SpringCloud/"/>
    
    
      <category term="SpringCloud" scheme="http://www.wanqhblog.top/tags/SpringCloud/"/>
    
      <category term="Ribbon" scheme="http://www.wanqhblog.top/tags/Ribbon/"/>
    
  </entry>
  
  <entry>
    <title>SpringCloud服务治理Eureka</title>
    <link href="http://www.wanqhblog.top/2018/01/10/SprngCloud%E6%9C%8D%E5%8A%A1%E6%B2%BB%E7%90%86Eureka/"/>
    <id>http://www.wanqhblog.top/2018/01/10/SprngCloud服务治理Eureka/</id>
    <published>2018-01-10T07:04:55.000Z</published>
    <updated>2018-01-16T08:06:09.970Z</updated>
    
    <content type="html"><![CDATA[<h2 id="SpringCloud简介"><a href="#SpringCloud简介" class="headerlink" title="SpringCloud简介"></a>SpringCloud简介</h2><p>直接应用官方文档的介绍：<a href="https://springcloud.cc/spring-cloud-dalston.html" target="_blank" rel="external">https://springcloud.cc/spring-cloud-dalston.html</a><br><img src="http://oy09glbzm.bkt.clouddn.com/18-1-10/86331686.jpg?imageView2/0/q/75|watermark/2/text/d2FucWhibG9nLnRvcA==/font/5a6L5L2T/fontsize/300/fill/IzJDMUJFRQ==/dissolve/100/gravity/SouthEast/dx/10/dy/10" alt=""></p>
<h2 id="SpringCloudEureka简介"><a href="#SpringCloudEureka简介" class="headerlink" title="SpringCloudEureka简介"></a>SpringCloudEureka简介</h2><a id="more"></a>
<p>Eureka是Netfix开发的服务发现框架，SpringCloudEureka是SpringCloudNetfix下的一个子项目，它对Eureka进行了二次封装，通过为Eureka添加SpringBoot风格的自动化配置，我们主需要简单的引入依赖和注解就能在SpringBoot构建的微服务应用轻松地与Eureka服务治理体系进行整合。<!--附上[DD大佬](http://blog.didispace.com)的Spring Cloud微服务实战。--></p>
<h2 id="创建服务注册中心"><a href="#创建服务注册中心" class="headerlink" title="创建服务注册中心"></a>创建服务注册中心</h2><p>首先，使用maven创建一个父项目，这里就不详细介绍maven创建项目了。其pom文件如下：这里主要是处理相同依赖，以及添加SpringCloud的依赖，SpringCloud的版本为<code>Edgware.RELEASE</code>。<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</div><div class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">"http://maven.apache.org/POM/4.0.0"</span> <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></div><div class="line"><span class="tag">	<span class="attr">xsi:schemaLocation</span>=<span class="string">"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></div><div class="line"></div><div class="line">	<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.wqh<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">packaging</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></div><div class="line"></div><div class="line">	<span class="tag">&lt;<span class="name">name</span>&gt;</span>spring-cloud<span class="tag">&lt;/<span class="name">name</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">description</span>&gt;</span>Demo project for Spring Boot<span class="tag">&lt;/<span class="name">description</span>&gt;</span></div><div class="line"></div><div class="line">	<span class="tag">&lt;<span class="name">parent</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">version</span>&gt;</span>1.5.8.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">relativePath</span>/&gt;</span> <span class="comment">&lt;!-- lookup parent from repository --&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">parent</span>&gt;</span></div><div class="line"></div><div class="line">	<span class="tag">&lt;<span class="name">properties</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">project.build.sourceEncoding</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">project.reporting.outputEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">project.reporting.outputEncoding</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">java.version</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">java.version</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">properties</span>&gt;</span></div><div class="line"></div><div class="line">	<span class="tag">&lt;<span class="name">dependencyManagement</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">				<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">				<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-dependencies<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">				<span class="tag">&lt;<span class="name">version</span>&gt;</span>Edgware.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line">				<span class="tag">&lt;<span class="name">type</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">type</span>&gt;</span></div><div class="line">				<span class="tag">&lt;<span class="name">scope</span>&gt;</span>import<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></div><div class="line">			<span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line">		<span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">dependencyManagement</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">		<span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line"></div><div class="line">		<span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></div><div class="line">		<span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>然后创建一个基础的SpringBoot工程，这里命名为eureka-server，然后修改其pom文件，将父项目改为上面创建的项目<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</div><div class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">"http://maven.apache.org/POM/4.0.0"</span> <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></div><div class="line"><span class="tag">	<span class="attr">xsi:schemaLocation</span>=<span class="string">"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">parent</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.wqh<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">parent</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>eureak-server<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">packaging</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">name</span>&gt;</span>$&#123;project.artifactId&#125;<span class="tag">&lt;/<span class="name">name</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">properties</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">project.build.sourceEncoding</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">project.reporting.outputEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">project.reporting.outputEncoding</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">java.version</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">java.version</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">properties</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></div><div class="line">	 	<span class="comment">&lt;!--添加Eureka Server的依赖--&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-eureka-server<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">		<span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></div><div class="line"></div><div class="line">	<span class="tag">&lt;<span class="name">build</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">plugins</span>&gt;</span></div><div class="line">			<span class="tag">&lt;<span class="name">plugin</span>&gt;</span></div><div class="line">				<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">				<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">			<span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></div><div class="line">		<span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">build</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>在父项目的pom文件中添加<code>eureak-server</code>的<code>module</code><br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">modules</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">module</span>&gt;</span>eureka-server<span class="tag">&lt;/<span class="name">module</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">modules</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>修改配置文件，这里我将配置文件改为<code>yml</code>格式<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">#=========================================</div><div class="line">#           配置项目名已经端口默认端口是8761</div><div class="line">#=========================================</div><div class="line">spring:</div><div class="line">  application:</div><div class="line">    name: eureak-server</div><div class="line">server:</div><div class="line">  port: 8888</div><div class="line">#=========================================</div><div class="line">#           配置eureka的基本信息</div><div class="line">#=========================================</div><div class="line">eureka:</div><div class="line">  instance:</div><div class="line">    hostname: localhost</div><div class="line">  client:</div><div class="line">    serviceUrl:</div><div class="line">      defaultZone: http://$&#123;eureka.instance.hostname&#125;:$&#123;server.port&#125;/eureka/</div><div class="line">    fetch-registry: false</div><div class="line">    register-with-eureka: false</div></pre></td></tr></table></figure></p>
<ul>
<li>eureka.client.fetch-registery：由于注册中心的职责是维护服务实例，不需要检索服务，所以设置为false；</li>
<li>eureka.client.register-with-eureka：设置false，表示不向注册中心注册自己。<br>最后使用<code>@EnableEurekaServer</code>注解开启服务注册中心功能，<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@SpringBootApplication</span></div><div class="line"><span class="meta">@EnableEurekaServer</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">EurekaServerApplication</span> </span>&#123;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">		SpringApplication.run(EurekaServerApplication.class, args);</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
<p>启动项目，在地址栏输入：<a href="http://localhonst:8888" target="_blank" rel="external">http://localhonst:8888</a><br><img src="http://oy09glbzm.bkt.clouddn.com/18-1-10/33781342.jpg?imageView2/0/q/75|watermark/2/text/d2FucWhibG9nLnRvcA==/font/5a6L5L2T/fontsize/300/fill/IzJDMUJFRQ==/dissolve/100/gravity/SouthEast/dx/10/dy/10" alt=""></p>
<h2 id="添加身份验证"><a href="#添加身份验证" class="headerlink" title="添加身份验证"></a>添加身份验证</h2><p>修改上面注册中心的配置文件，开启安全验证已经配置登录用户名和密码<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">#=========================================</div><div class="line">#           添加安全验证</div><div class="line">#=========================================</div><div class="line">security:</div><div class="line">  basic:</div><div class="line">    enabled: <span class="keyword">true</span></div><div class="line">  user:</div><div class="line">    password: password1234</div><div class="line">    name: user</div></pre></td></tr></table></figure></p>
<p>因为SpringCloudEureka的安全是基于SpringSecurity，所以需要添加依赖<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-security<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>修改配置文件的<code>eureka.client.serviceUrl.defaultZone</code><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">http://$&#123;security.user.name&#125;:$&#123;security.user.password&#125;@$&#123;eureka.instance.hostname&#125;:$&#123;server.port&#125;/eureka/</div></pre></td></tr></table></figure></p>
<p>重启项目，再次访问。在浏览器会出现输入账号密码弹框，配置成功。</p>
<h2 id="创建服务提供者"><a href="#创建服务提供者" class="headerlink" title="创建服务提供者"></a>创建服务提供者</h2><p>按照上面创建注册中心的方式创建一个<code>module</code>,这里名字为<code>service-article</code>。添加所需依赖：<br><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&lt;dependency&gt;</div><div class="line">	&lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;</div><div class="line">	&lt;artifactId&gt;spring-cloud-starter-eureka&lt;/artifactId&gt;</div><div class="line">&lt;/dependency&gt;</div></pre></td></tr></table></figure></p>
<p>在主类上使用<code>@EnableEurekaClient</code>注解激活Eureka的DiscoveryClient实现。这里也可以使用<code>@EnableDiscoveryClient</code>。两个注解基本相同，如果选用的注册中心是eureka，那么就推荐@EnableEurekaClient，如果是其他的注册中心，那么推荐使用@EnableDiscoveryClient。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@SpringBootApplication</span></div><div class="line"><span class="meta">@EnableEurekaClient</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ArticleApplication</span> </span>&#123;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">		SpringApplication.run(ArticleApplication.class, args);</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>配置信息，<br><code>eureka.client.serviceUrl.defaultZone</code>：属性对应服务注册中心的配置内容，指定服务注册中心的位置。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">spring:</div><div class="line">  application:</div><div class="line">    name: article-service</div><div class="line">server:</div><div class="line">  port: <span class="number">30000</span></div><div class="line">eureka:</div><div class="line">  client:</div><div class="line">    serviceUrl:</div><div class="line">      defaultZone: http:<span class="comment">//user:password1234@localhost:8888/eureka/</span></div></pre></td></tr></table></figure></p>
<p>启动项目，再次刷新注册中心：<br><img src="http://oy09glbzm.bkt.clouddn.com/18-1-10/98252230.jpg?imageView2/0/q/75|watermark/2/text/d2FucWhibG9nLnRvcA==/font/5a6L5L2T/fontsize/300/fill/IzJDMUJFRQ==/dissolve/100/gravity/SouthEast/dx/10/dy/10" alt=""><br>这里服务的id位主机电脑名：服务名：端口号，点击该Status，进入的地址也是主机名+端口号。通过修改配置文件信息，可以修改：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">eureka:</div><div class="line">  instance:</div><div class="line">   #使用ip显示</div><div class="line">    prefer-ip-address: <span class="keyword">true</span></div><div class="line">     #设置服务在注册中显示的Status</div><div class="line">    instance-id: $&#123;spring.application.name&#125;:$&#123;spring.application.instance_id:$&#123;server.port&#125;&#125;</div></pre></td></tr></table></figure></p>
<p><img src="http://oy09glbzm.bkt.clouddn.com/18-1-10/95334317.jpg?imageView2/0/q/75|watermark/2/text/d2FucWhibG9nLnRvcA==/font/5a6L5L2T/fontsize/300/fill/IzJDMUJFRQ==/dissolve/100/gravity/SouthEast/dx/10/dy/10" alt=""></p>
<h2 id="高可用的注册中心"><a href="#高可用的注册中心" class="headerlink" title="高可用的注册中心"></a>高可用的注册中心</h2><p>分布式项目在生产环境中一般都会使用高可用部署方式，下面介绍关于高可用注册中心的配置，构建双节点的服务注册中心集群。<br>在eureka-server中创建application-peer1.yml文件，作为peer1服务中心的配置。将serviceUrl指向peer2<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">spring:</div><div class="line">  application:</div><div class="line">    name: eureka-server</div><div class="line">server:</div><div class="line">  port: <span class="number">8888</span></div><div class="line">eureka:</div><div class="line">  instance:</div><div class="line">    hostname: peer1</div><div class="line">  client:</div><div class="line">    serviceUrl:</div><div class="line">      defaultZone: http:<span class="comment">//peer2:8889/eureka/</span></div></pre></td></tr></table></figure></p>
<p>同样创建application-peer2.yml文件作为peer2服务中心的配置。将serviceUrl指向peer1<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">spring:</div><div class="line">  application:</div><div class="line">    name: eureka-server</div><div class="line">server:</div><div class="line">  port: <span class="number">8889</span></div><div class="line">eureka:</div><div class="line">  instance:</div><div class="line">    hostname: peer2</div><div class="line">  client:</div><div class="line">    serviceUrl:</div><div class="line">      defaultZone: http:<span class="comment">//peer1:8888/eureka/</span></div></pre></td></tr></table></figure></p>
<p>接下来运行项目，介绍两种方式</p>
<ol>
<li>修改<code>application.yml</code>文件的<code>spring.profiles.active</code>，首先设置为peer1启动项目，然后设置为peer2启动项目。当然这种方式部署不适合在生产环境。 </li>
<li>打包为jar，然后运行jar包：<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">java -jar eureak-server-<span class="number">1.0</span>.0-SNAPSHOT.jar --spring.profiles.active=peer1</div><div class="line"></div><div class="line"></div><div class="line">java -jar eureak-server-<span class="number">1.0</span>.0-SNAPSHOT.jar --spring.profiles.active=peer2</div></pre></td></tr></table></figure>
</li>
</ol>
<p>这里还需要修改hosts文件，添加一下内容：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">127.0.0.1 peer1</div><div class="line">127.0.0.1 peer2</div></pre></td></tr></table></figure></p>
<p>访问peer1，可以看到已经有peer2节点的<code>eureka-server</code>了。<br><img src="http://oy09glbzm.bkt.clouddn.com/18-1-10/55059752.jpg?imageView2/0/q/75|watermark/2/text/d2FucWhibG9nLnRvcA==/font/5a6L5L2T/fontsize/300/fill/IzJDMUJFRQ==/dissolve/100/gravity/SouthEast/dx/10/dy/10" alt=""><br>设置多节点的服务注册中心之后，还需要修改微服务的<code>serveiceUrl</code>：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">eureka:</div><div class="line">  client:</div><div class="line">    serviceUrl:</div><div class="line">      defaultZone: http:<span class="comment">//peer1:8888/eureka/,http://peer2:8889/eureka/</span></div></pre></td></tr></table></figure></p>
<p>重启服务提供者，可以在上面两个注册中心看到该服。</p>
<hr>
<p>实例源码：<a href="https://gitee.com/wqh3520/spring-cloud-1-9" target="_blank" rel="external">https://gitee.com/wqh3520</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;SpringCloud简介&quot;&gt;&lt;a href=&quot;#SpringCloud简介&quot; class=&quot;headerlink&quot; title=&quot;SpringCloud简介&quot;&gt;&lt;/a&gt;SpringCloud简介&lt;/h2&gt;&lt;p&gt;直接应用官方文档的介绍：&lt;a href=&quot;https://springcloud.cc/spring-cloud-dalston.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://springcloud.cc/spring-cloud-dalston.html&lt;/a&gt;&lt;br&gt;&lt;img src=&quot;http://oy09glbzm.bkt.clouddn.com/18-1-10/86331686.jpg?imageView2/0/q/75|watermark/2/text/d2FucWhibG9nLnRvcA==/font/5a6L5L2T/fontsize/300/fill/IzJDMUJFRQ==/dissolve/100/gravity/SouthEast/dx/10/dy/10&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;SpringCloudEureka简介&quot;&gt;&lt;a href=&quot;#SpringCloudEureka简介&quot; class=&quot;headerlink&quot; title=&quot;SpringCloudEureka简介&quot;&gt;&lt;/a&gt;SpringCloudEureka简介&lt;/h2&gt;
    
    </summary>
    
      <category term="SpringCloud" scheme="http://www.wanqhblog.top/categories/SpringCloud/"/>
    
    
      <category term="SpringCloud" scheme="http://www.wanqhblog.top/tags/SpringCloud/"/>
    
      <category term="Eureka" scheme="http://www.wanqhblog.top/tags/Eureka/"/>
    
  </entry>
  
  <entry>
    <title>MyBatis拦截器实现分页</title>
    <link href="http://www.wanqhblog.top/2018/01/04/MyBatis%E4%BD%BF%E7%94%A8%E8%87%AA%E5%AE%9A%E4%B9%89%E6%8B%A6%E6%88%AA%E5%99%A8%E8%BF%9B%E8%A1%8C%E5%88%86%E9%A1%B5/"/>
    <id>http://www.wanqhblog.top/2018/01/04/MyBatis使用自定义拦截器进行分页/</id>
    <published>2018-01-04T07:18:09.000Z</published>
    <updated>2018-01-05T01:09:14.336Z</updated>
    
    <content type="html"><![CDATA[<p>拦截器的作用就是拦截某些方法的调用，我们可以在方法执行前后为方法加上某些逻辑，也可以只执行拦截的逻辑代码而不执行被拦截的方法。Mybatis拦截器设计的一个初衷就是为了供用户在某些时候可以实现自己的逻辑而不必去动Mybatis固有的逻辑。</p>
<h2 id="拦截器分页原理"><a href="#拦截器分页原理" class="headerlink" title="拦截器分页原理"></a>拦截器分页原理</h2><blockquote>
<p>Mybatis拦截器常常会被用来进行分页处理。我们知道要利用JDBC对数据库进行操作就必须要有一个对应的Statement对象，Mybatis在执行Sql语句前也会产生一个包含Sql语句的Statement对象，而且对应的Sql语句是在Statement之前产生的，所以我们就可以在它成Statement之前对用来生成Statement的Sql语句下手。在Mybatis中Statement语句是通过RoutingStatementHandler对象的prepare方法生成的。所以利用拦截器实现Mybatis分页的一个思路就是拦截<a id="more"></a>StatementHandler接口的prepare方法，然后在拦截器方法中把Sql语句改成对应的分页查询Sql语句，之后再调用StatementHandler对象的prepare方法，即调用invocation.proceed()。更改Sql语句这个看起来很简单，而事实上来说的话就没那么直观，因为包括sql等其他属性在内的多个属性都没有对应的方法可以直接取到，它们对外部都是封闭的，是对象的私有属性，所以这里就需要引入反射机制来获取或者更改对象的私有属性的值了。对于分页而言，在拦截器里面我们常常还需要做的一个操作就是统计满足当前条件的记录一共有多少，这是通过获取到了原始的Sql语句后，把它改为对应的统计语句再利用Mybatis封装好的参数和设置参数的功能把Sql语句中的参数进行替换，之后再执行查询记录数的Sql语句进行总记录数的统计</p>
</blockquote>
<h2 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h2><p>分页的实体类Page：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div><div class="line">168</div><div class="line">169</div><div class="line">170</div><div class="line">171</div><div class="line">172</div><div class="line">173</div><div class="line">174</div><div class="line">175</div><div class="line">176</div><div class="line">177</div><div class="line">178</div><div class="line">179</div><div class="line">180</div><div class="line">181</div><div class="line">182</div><div class="line">183</div><div class="line">184</div><div class="line">185</div><div class="line">186</div><div class="line">187</div><div class="line">188</div><div class="line">189</div><div class="line">190</div><div class="line">191</div><div class="line">192</div><div class="line">193</div><div class="line">194</div><div class="line">195</div><div class="line">196</div><div class="line">197</div><div class="line">198</div><div class="line">199</div><div class="line">200</div><div class="line">201</div><div class="line">202</div><div class="line">203</div><div class="line">204</div><div class="line">205</div><div class="line">206</div><div class="line">207</div><div class="line">208</div><div class="line">209</div><div class="line">210</div><div class="line">211</div><div class="line">212</div><div class="line">213</div><div class="line">214</div><div class="line">215</div><div class="line">216</div><div class="line">217</div><div class="line">218</div><div class="line">219</div><div class="line">220</div><div class="line">221</div><div class="line">222</div><div class="line">223</div><div class="line">224</div><div class="line">225</div><div class="line">226</div><div class="line">227</div><div class="line">228</div><div class="line">229</div><div class="line">230</div><div class="line">231</div><div class="line">232</div><div class="line">233</div><div class="line">234</div><div class="line">235</div><div class="line">236</div><div class="line">237</div><div class="line">238</div><div class="line">239</div><div class="line">240</div><div class="line">241</div><div class="line">242</div><div class="line">243</div><div class="line">244</div><div class="line">245</div><div class="line">246</div><div class="line">247</div><div class="line">248</div><div class="line">249</div><div class="line">250</div><div class="line">251</div><div class="line">252</div><div class="line">253</div><div class="line">254</div><div class="line">255</div><div class="line">256</div><div class="line">257</div><div class="line">258</div><div class="line">259</div><div class="line">260</div><div class="line">261</div><div class="line">262</div><div class="line">263</div><div class="line">264</div><div class="line">265</div><div class="line">266</div><div class="line">267</div><div class="line">268</div><div class="line">269</div><div class="line">270</div><div class="line">271</div><div class="line">272</div><div class="line">273</div><div class="line">274</div><div class="line">275</div><div class="line">276</div><div class="line">277</div><div class="line">278</div><div class="line">279</div><div class="line">280</div><div class="line">281</div><div class="line">282</div><div class="line">283</div><div class="line">284</div><div class="line">285</div><div class="line">286</div><div class="line">287</div><div class="line">288</div><div class="line">289</div><div class="line">290</div><div class="line">291</div><div class="line">292</div><div class="line">293</div><div class="line">294</div><div class="line">295</div><div class="line">296</div><div class="line">297</div><div class="line">298</div><div class="line">299</div><div class="line">300</div><div class="line">301</div><div class="line">302</div><div class="line">303</div><div class="line">304</div><div class="line">305</div><div class="line">306</div><div class="line">307</div><div class="line">308</div><div class="line">309</div><div class="line">310</div><div class="line">311</div><div class="line">312</div><div class="line">313</div><div class="line">314</div><div class="line">315</div><div class="line">316</div><div class="line">317</div><div class="line">318</div><div class="line">319</div><div class="line">320</div><div class="line">321</div><div class="line">322</div><div class="line">323</div><div class="line">324</div><div class="line">325</div><div class="line">326</div><div class="line">327</div><div class="line">328</div><div class="line">329</div><div class="line">330</div><div class="line">331</div><div class="line">332</div><div class="line">333</div><div class="line">334</div><div class="line">335</div><div class="line">336</div><div class="line">337</div><div class="line">338</div><div class="line">339</div><div class="line">340</div><div class="line">341</div><div class="line">342</div><div class="line">343</div><div class="line">344</div><div class="line">345</div><div class="line">346</div><div class="line">347</div><div class="line">348</div><div class="line">349</div><div class="line">350</div><div class="line">351</div><div class="line">352</div><div class="line">353</div><div class="line">354</div><div class="line">355</div><div class="line">356</div><div class="line">357</div><div class="line">358</div><div class="line">359</div><div class="line">360</div><div class="line">361</div><div class="line">362</div><div class="line">363</div><div class="line">364</div><div class="line">365</div><div class="line">366</div><div class="line">367</div><div class="line">368</div><div class="line">369</div><div class="line">370</div><div class="line">371</div><div class="line">372</div><div class="line">373</div><div class="line">374</div><div class="line">375</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Page</span>&lt;<span class="title">T</span>&gt; </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">protected</span> <span class="keyword">int</span> pageNo = <span class="number">1</span>; <span class="comment">// 当前页码</span></div><div class="line">    <span class="keyword">protected</span> <span class="keyword">int</span> pageSize = <span class="number">10</span>; <span class="comment">// 页面大小，设置为“-1”表示不进行分页（分页无效）</span></div><div class="line"></div><div class="line">    <span class="keyword">protected</span> <span class="keyword">long</span> count;<span class="comment">// 总记录数，设置为“-1”表示不查询总数</span></div><div class="line"></div><div class="line">    <span class="keyword">protected</span> <span class="keyword">int</span> first;<span class="comment">// 首页索引</span></div><div class="line">    <span class="keyword">protected</span> <span class="keyword">int</span> last;<span class="comment">// 尾页索引</span></div><div class="line">    <span class="keyword">protected</span> <span class="keyword">int</span> prev;<span class="comment">// 上一页索引</span></div><div class="line">    <span class="keyword">protected</span> <span class="keyword">int</span> next;<span class="comment">// 下一页索引</span></div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="keyword">boolean</span> firstPage;<span class="comment">//是否是第一页</span></div><div class="line">    <span class="keyword">private</span> <span class="keyword">boolean</span> lastPage;<span class="comment">//是否是最后一页</span></div><div class="line"></div><div class="line">    <span class="keyword">protected</span> <span class="keyword">int</span> length = <span class="number">8</span>;<span class="comment">// 显示页面长度</span></div><div class="line">    <span class="keyword">protected</span> <span class="keyword">int</span> slider = <span class="number">1</span>;<span class="comment">// 前后显示页面长度</span></div><div class="line"></div><div class="line">    <span class="keyword">private</span> List&lt;T&gt; list = <span class="keyword">new</span> ArrayList&lt;T&gt;();</div><div class="line"></div><div class="line">    <span class="keyword">private</span> String orderBy = <span class="string">""</span>; <span class="comment">// 标准查询有效， 实例： updatedate desc, name asc</span></div><div class="line"></div><div class="line">    <span class="keyword">protected</span> String funcName = <span class="string">"page"</span>; <span class="comment">// 设置点击页码调用的js函数名称，默认为page，在一页有多个分页对象时使用。</span></div><div class="line"></div><div class="line">    <span class="keyword">protected</span> String funcParam = <span class="string">""</span>; <span class="comment">// 函数的附加参数，第三个参数值。</span></div><div class="line"></div><div class="line">    <span class="keyword">private</span> String message = <span class="string">""</span>; <span class="comment">// 设置提示消息，显示在“共n条”之后</span></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Page</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.pageSize = -<span class="number">1</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line"><span class="comment">     *  构造方法，</span></div><div class="line"><span class="comment">     * <span class="doctag">@param</span> pageNo 页码，</span></div><div class="line"><span class="comment">     * <span class="doctag">@param</span> orderBy 排序</span></div><div class="line"><span class="comment">     */</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Page</span><span class="params">(String pageNo,String orderBy)</span></span>&#123;</div><div class="line">        <span class="keyword">this</span>.setPageNo(Integer.parseInt(pageNo));</div><div class="line"></div><div class="line">        <span class="comment">// 设置排序参数</span></div><div class="line">        <span class="keyword">if</span> (StringUtils.isNotBlank(orderBy))&#123;</div><div class="line">            <span class="keyword">this</span>.setOrderBy(orderBy);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line"><span class="comment">     * 构造方法</span></div><div class="line"><span class="comment">     * <span class="doctag">@param</span> pageNo 当前页码</span></div><div class="line"><span class="comment">     * <span class="doctag">@param</span> pageSize 分页大小</span></div><div class="line"><span class="comment">     */</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Page</span><span class="params">(<span class="keyword">int</span> pageNo, <span class="keyword">int</span> pageSize)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>(pageNo, pageSize, <span class="number">0</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line"><span class="comment">     * 构造方法</span></div><div class="line"><span class="comment">     * <span class="doctag">@param</span> pageNo 当前页码</span></div><div class="line"><span class="comment">     * <span class="doctag">@param</span> pageSize 分页大小</span></div><div class="line"><span class="comment">     * <span class="doctag">@param</span> count 数据条数</span></div><div class="line"><span class="comment">     */</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Page</span><span class="params">(<span class="keyword">int</span> pageNo, <span class="keyword">int</span> pageSize, <span class="keyword">long</span> count)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>(pageNo, pageSize, count, <span class="keyword">new</span> ArrayList&lt;T&gt;());</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line"><span class="comment">     * 构造方法</span></div><div class="line"><span class="comment">     * <span class="doctag">@param</span> pageNo 当前页码</span></div><div class="line"><span class="comment">     * <span class="doctag">@param</span> pageSize 分页大小</span></div><div class="line"><span class="comment">     * <span class="doctag">@param</span> count 数据条数</span></div><div class="line"><span class="comment">     * <span class="doctag">@param</span> list 本页数据对象列表</span></div><div class="line"><span class="comment">     */</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Page</span><span class="params">(<span class="keyword">int</span> pageNo, <span class="keyword">int</span> pageSize, <span class="keyword">long</span> count, List&lt;T&gt; list)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.setCount(count);</div><div class="line">        <span class="keyword">this</span>.setPageNo(pageNo);</div><div class="line">        <span class="keyword">this</span>.pageSize = pageSize;</div><div class="line">        <span class="keyword">this</span>.list = list;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line"><span class="comment">     * 初始化参数</span></div><div class="line"><span class="comment">     */</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">initialize</span><span class="params">()</span></span>&#123;</div><div class="line"></div><div class="line">        <span class="comment">//1</span></div><div class="line">        <span class="keyword">this</span>.first = <span class="number">1</span>;</div><div class="line"></div><div class="line">        <span class="keyword">this</span>.last = (<span class="keyword">int</span>)(count / (<span class="keyword">this</span>.pageSize &lt; <span class="number">1</span> ? <span class="number">20</span> : <span class="keyword">this</span>.pageSize) + first - <span class="number">1</span>);</div><div class="line"></div><div class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.count % <span class="keyword">this</span>.pageSize != <span class="number">0</span> || <span class="keyword">this</span>.last == <span class="number">0</span>) &#123;</div><div class="line">            <span class="keyword">this</span>.last++;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.last &lt; <span class="keyword">this</span>.first) &#123;</div><div class="line">            <span class="keyword">this</span>.last = <span class="keyword">this</span>.first;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.pageNo &lt;= <span class="number">1</span>) &#123;</div><div class="line">            <span class="keyword">this</span>.pageNo = <span class="keyword">this</span>.first;</div><div class="line">            <span class="keyword">this</span>.firstPage=<span class="keyword">true</span>;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.pageNo &gt;= <span class="keyword">this</span>.last) &#123;</div><div class="line">            <span class="keyword">this</span>.pageNo = <span class="keyword">this</span>.last;</div><div class="line">            <span class="keyword">this</span>.lastPage=<span class="keyword">true</span>;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.pageNo &lt; <span class="keyword">this</span>.last - <span class="number">1</span>) &#123;</div><div class="line">            <span class="keyword">this</span>.next = <span class="keyword">this</span>.pageNo + <span class="number">1</span>;</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            <span class="keyword">this</span>.next = <span class="keyword">this</span>.last;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.pageNo &gt; <span class="number">1</span>) &#123;</div><div class="line">            <span class="keyword">this</span>.prev = <span class="keyword">this</span>.pageNo - <span class="number">1</span>;</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            <span class="keyword">this</span>.prev = <span class="keyword">this</span>.first;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="comment">//2</span></div><div class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.pageNo &lt; <span class="keyword">this</span>.first) &#123;<span class="comment">// 如果当前页小于首页</span></div><div class="line">            <span class="keyword">this</span>.pageNo = <span class="keyword">this</span>.first;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.pageNo &gt; <span class="keyword">this</span>.last) &#123;<span class="comment">// 如果当前页大于尾页</span></div><div class="line">            <span class="keyword">this</span>.pageNo = <span class="keyword">this</span>.last;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line"><span class="comment">     * 获取设置总数</span></div><div class="line"><span class="comment">     * <span class="doctag">@return</span></span></div><div class="line"><span class="comment">     */</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">long</span> <span class="title">getCount</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> count;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line"><span class="comment">     * 设置数据总数</span></div><div class="line"><span class="comment">     * <span class="doctag">@param</span> count</span></div><div class="line"><span class="comment">     */</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setCount</span><span class="params">(<span class="keyword">long</span> count)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.count = count;</div><div class="line">        <span class="keyword">if</span> (pageSize &gt;= count)&#123;</div><div class="line">            pageNo = <span class="number">1</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line"><span class="comment">     * 获取当前页码</span></div><div class="line"><span class="comment">     * <span class="doctag">@return</span></span></div><div class="line"><span class="comment">     */</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getPageNo</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> pageNo;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line"><span class="comment">     * 设置当前页码</span></div><div class="line"><span class="comment">     * <span class="doctag">@param</span> pageNo</span></div><div class="line"><span class="comment">     */</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setPageNo</span><span class="params">(<span class="keyword">int</span> pageNo)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.pageNo = pageNo;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line"><span class="comment">     * 获取页面大小</span></div><div class="line"><span class="comment">     * <span class="doctag">@return</span></span></div><div class="line"><span class="comment">     */</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getPageSize</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> pageSize;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line"><span class="comment">     * 设置页面大小（最大500）</span></div><div class="line"><span class="comment">     * <span class="doctag">@param</span> pageSize</span></div><div class="line"><span class="comment">     */</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setPageSize</span><span class="params">(<span class="keyword">int</span> pageSize)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.pageSize = pageSize &lt;= <span class="number">0</span> ? <span class="number">10</span> : pageSize;<span class="comment">// &gt; 500 ? 500 : pageSize;</span></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line"><span class="comment">     * 首页索引</span></div><div class="line"><span class="comment">     * <span class="doctag">@return</span></span></div><div class="line"><span class="comment">     */</span></div><div class="line">    <span class="meta">@JsonIgnore</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getFirst</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> first;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line"><span class="comment">     * 尾页索引</span></div><div class="line"><span class="comment">     * <span class="doctag">@return</span></span></div><div class="line"><span class="comment">     */</span></div><div class="line">    <span class="meta">@JsonIgnore</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getLast</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> last;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line"><span class="comment">     * 获取页面总数</span></div><div class="line"><span class="comment">     * <span class="doctag">@return</span> getLast();</span></div><div class="line"><span class="comment">     */</span></div><div class="line">    <span class="meta">@JsonIgnore</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getTotalPage</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> getLast();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line"><span class="comment">     * 是否为第一页</span></div><div class="line"><span class="comment">     * <span class="doctag">@return</span></span></div><div class="line"><span class="comment">     */</span></div><div class="line">    <span class="meta">@JsonIgnore</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isFirstPage</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> firstPage;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line"><span class="comment">     * 是否为最后一页</span></div><div class="line"><span class="comment">     * <span class="doctag">@return</span></span></div><div class="line"><span class="comment">     */</span></div><div class="line">    <span class="meta">@JsonIgnore</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isLastPage</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> lastPage;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line"><span class="comment">     * 上一页索引值</span></div><div class="line"><span class="comment">     * <span class="doctag">@return</span></span></div><div class="line"><span class="comment">     */</span></div><div class="line">    <span class="meta">@JsonIgnore</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getPrev</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (isFirstPage()) &#123;</div><div class="line">            <span class="keyword">return</span> pageNo;</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            <span class="keyword">return</span> pageNo - <span class="number">1</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line"><span class="comment">     * 下一页索引值</span></div><div class="line"><span class="comment">     * <span class="doctag">@return</span></span></div><div class="line"><span class="comment">     */</span></div><div class="line">    <span class="meta">@JsonIgnore</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getNext</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (isLastPage()) &#123;</div><div class="line">            <span class="keyword">return</span> pageNo;</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            <span class="keyword">return</span> pageNo + <span class="number">1</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line"><span class="comment">     * 获取本页数据对象列表</span></div><div class="line"><span class="comment">     * <span class="doctag">@return</span> List&lt;T&gt;</span></div><div class="line"><span class="comment">     */</span></div><div class="line">    <span class="function"><span class="keyword">public</span> List&lt;T&gt; <span class="title">getList</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> list;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line"><span class="comment">     * 设置本页数据对象列表</span></div><div class="line"><span class="comment">     * <span class="doctag">@param</span> list</span></div><div class="line"><span class="comment">     */</span></div><div class="line">    <span class="function"><span class="keyword">public</span> Page&lt;T&gt; <span class="title">setList</span><span class="params">(List&lt;T&gt; list)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.list = list;</div><div class="line">        initialize();</div><div class="line">        <span class="keyword">return</span> <span class="keyword">this</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line"><span class="comment">     * 获取查询排序字符串</span></div><div class="line"><span class="comment">     * <span class="doctag">@return</span></span></div><div class="line"><span class="comment">     */</span></div><div class="line">    <span class="meta">@JsonIgnore</span></div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getOrderBy</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="comment">// SQL过滤，防止注入</span></div><div class="line">        String reg = <span class="string">"(?:')|(?:--)|(/\\*(?:.|[\\n\\r])*?\\*/)|"</span></div><div class="line">                + <span class="string">"(\\b(select|update|and|or|delete|insert|trancate|char|into|substr|ascii|declare|exec|count|master|into|drop|execute)\\b)"</span>;</div><div class="line">        Pattern sqlPattern = Pattern.compile(reg, Pattern.CASE_INSENSITIVE);</div><div class="line">        <span class="keyword">if</span> (sqlPattern.matcher(orderBy).find()) &#123;</div><div class="line">            <span class="keyword">return</span> <span class="string">""</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> orderBy;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line"><span class="comment">     * 设置查询排序，标准查询有效， 实例： updatedate desc, name asc</span></div><div class="line"><span class="comment">     */</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setOrderBy</span><span class="params">(String orderBy)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.orderBy = orderBy;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line"><span class="comment">     * 获取点击页码调用的js函数名称</span></div><div class="line"><span class="comment">     * function $&#123;page.funcName&#125;(pageNo)&#123;location="$&#123;ctx&#125;/list-$&#123;category.id&#125;$&#123;urlSuffix&#125;?pageNo="+i;&#125;</span></div><div class="line"><span class="comment">     * <span class="doctag">@return</span></span></div><div class="line"><span class="comment">     */</span></div><div class="line">    <span class="meta">@JsonIgnore</span></div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getFuncName</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> funcName;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line"><span class="comment">     * 设置点击页码调用的js函数名称，默认为page，在一页有多个分页对象时使用。</span></div><div class="line"><span class="comment">     * <span class="doctag">@param</span> funcName 默认为page</span></div><div class="line"><span class="comment">     */</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setFuncName</span><span class="params">(String funcName)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.funcName = funcName;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line"><span class="comment">     * 获取分页函数的附加参数</span></div><div class="line"><span class="comment">     * <span class="doctag">@return</span></span></div><div class="line"><span class="comment">     */</span></div><div class="line">    <span class="meta">@JsonIgnore</span></div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getFuncParam</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> funcParam;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line"><span class="comment">     * 设置分页函数的附加参数</span></div><div class="line"><span class="comment">     * <span class="doctag">@return</span></span></div><div class="line"><span class="comment">     */</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setFuncParam</span><span class="params">(String funcParam)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.funcParam = funcParam;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line"><span class="comment">     * 设置提示消息，显示在“共n条”之后</span></div><div class="line"><span class="comment">     * <span class="doctag">@param</span> message</span></div><div class="line"><span class="comment">     */</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setMessage</span><span class="params">(String message)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.message = message;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line"><span class="comment">     * 分页是否有效</span></div><div class="line"><span class="comment">     * <span class="doctag">@return</span> this.pageSize==-1</span></div><div class="line"><span class="comment">     */</span></div><div class="line">    <span class="meta">@JsonIgnore</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isDisabled</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.pageSize==-<span class="number">1</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line"><span class="comment">     * 是否进行总数统计</span></div><div class="line"><span class="comment">     * <span class="doctag">@return</span> this.count==-1</span></div><div class="line"><span class="comment">     */</span></div><div class="line">    <span class="meta">@JsonIgnore</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isNotCount</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.count==-<span class="number">1</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line"><span class="comment">     * 获取 Hibernate FirstResult</span></div><div class="line"><span class="comment">     */</span></div><div class="line">    <span class="meta">@JsonIgnore</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getFirstResult</span><span class="params">()</span></span>&#123;</div><div class="line">        <span class="keyword">int</span> firstResult = (getPageNo() - <span class="number">1</span>) * getPageSize();</div><div class="line">        <span class="keyword">if</span> (firstResult &gt;= getCount() || firstResult&lt;<span class="number">0</span>) &#123;</div><div class="line">            firstResult = <span class="number">0</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> firstResult;</div><div class="line">    &#125;</div><div class="line">    <span class="comment">/**</span></div><div class="line"><span class="comment">     * 获取 Hibernate MaxResults</span></div><div class="line"><span class="comment">     */</span></div><div class="line">    <span class="meta">@JsonIgnore</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getMaxResults</span><span class="params">()</span></span>&#123;</div><div class="line">        <span class="keyword">return</span> getPageSize();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>因为数据库的不同，分页的语言可能会有所不同。为了能够是程序兼容性好，最好把数据库方言的设置抽出，这里列出mysql和oracle的方言设置：<br>数据库方言配置接口<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Dialect</span> </span>&#123;</div><div class="line">    <span class="comment">/**</span></div><div class="line"><span class="comment">     * 数据库本身是否支持分页当前的分页查询方式</span></div><div class="line"><span class="comment">     * 如果数据库不支持的话，则不进行数据库分页</span></div><div class="line"><span class="comment">     *</span></div><div class="line"><span class="comment">     * <span class="doctag">@return</span> true：支持当前的分页查询方式</span></div><div class="line"><span class="comment">     */</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">supportsLimit</span><span class="params">()</span></span>;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line"><span class="comment">     * 将sql转换为分页SQL，分别调用分页sql</span></div><div class="line"><span class="comment">     *</span></div><div class="line"><span class="comment">     * <span class="doctag">@param</span> sql    SQL语句</span></div><div class="line"><span class="comment">     * <span class="doctag">@param</span> offset 开始条数</span></div><div class="line"><span class="comment">     * <span class="doctag">@param</span> limit  每页显示多少纪录条数</span></div><div class="line"><span class="comment">     * <span class="doctag">@return</span> 分页查询的sql</span></div><div class="line"><span class="comment">     */</span></div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getLimitString</span><span class="params">(String sql, <span class="keyword">int</span> offset, <span class="keyword">int</span> limit)</span></span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>MySql方言实现类<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MySqlDialect</span> <span class="keyword">implements</span> <span class="title">Dialect</span> </span>&#123;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">supportsLimit</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getLimitString</span><span class="params">(String sql, <span class="keyword">int</span> offset, <span class="keyword">int</span> limit)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> getLimitString(sql, offset, Integer.toString(offset),</div><div class="line">                Integer.toString(limit));</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line"><span class="comment">     * 将sql变成分页sql语句，提供offest及limit使用占位符号(placeholder)替换.</span></div><div class="line"><span class="comment">     * 如mysql</span></div><div class="line"><span class="comment">     * dialect.getLimitString("select * from user", 12, ":offset",0,":limit") 将返回</span></div><div class="line"><span class="comment">     * select * from user limit :offset,:limit</span></div><div class="line"><span class="comment">     *</span></div><div class="line"><span class="comment">     * <span class="doctag">@param</span> sql               实际SQL语句</span></div><div class="line"><span class="comment">     * <span class="doctag">@param</span> offset            分页开始纪录条数</span></div><div class="line"><span class="comment">     * <span class="doctag">@param</span> offsetPlaceholder 分页开始纪录条数－占位符号</span></div><div class="line"><span class="comment">     * <span class="doctag">@param</span> limitPlaceholder  分页纪录条数占位符号</span></div><div class="line"><span class="comment">     * <span class="doctag">@return</span> 包含占位符的分页sql</span></div><div class="line"><span class="comment">     */</span></div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getLimitString</span><span class="params">(String sql, <span class="keyword">int</span> offset, String offsetPlaceholder, String limitPlaceholder)</span> </span>&#123;</div><div class="line">        StringBuilder stringBuilder = <span class="keyword">new</span> StringBuilder(sql);</div><div class="line">        stringBuilder.append(<span class="string">" limit "</span>);</div><div class="line">        <span class="keyword">if</span> (offset &gt; <span class="number">0</span>) &#123;</div><div class="line">            stringBuilder.append(offsetPlaceholder).append(<span class="string">","</span>).append(limitPlaceholder);</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            stringBuilder.append(limitPlaceholder);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> stringBuilder.toString();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>oracle方言实现类<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OracleDialect</span> <span class="keyword">implements</span> <span class="title">Dialect</span> </span>&#123;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">supportsLimit</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getLimitString</span><span class="params">(String sql, <span class="keyword">int</span> offset, <span class="keyword">int</span> limit)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> getLimitString(sql, offset, Integer.toString(offset), Integer.toString(limit));</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line"><span class="comment">     * 将sql变成分页sql语句,提供将offset及limit使用占位符号(placeholder)替换.</span></div><div class="line"><span class="comment">     * &lt;pre&gt;</span></div><div class="line"><span class="comment">     * 如mysql</span></div><div class="line"><span class="comment">     * dialect.getLimitString("select * from user", 12, ":offset",0,":limit") 将返回</span></div><div class="line"><span class="comment">     * select * from user limit :offset,:limit</span></div><div class="line"><span class="comment">     * &lt;/pre&gt;</span></div><div class="line"><span class="comment">     *</span></div><div class="line"><span class="comment">     * <span class="doctag">@param</span> sql               实际SQL语句</span></div><div class="line"><span class="comment">     * <span class="doctag">@param</span> offset            分页开始纪录条数</span></div><div class="line"><span class="comment">     * <span class="doctag">@param</span> offsetPlaceholder 分页开始纪录条数－占位符号</span></div><div class="line"><span class="comment">     * <span class="doctag">@param</span> limitPlaceholder  分页纪录条数占位符号</span></div><div class="line"><span class="comment">     * <span class="doctag">@return</span> 包含占位符的分页sql</span></div><div class="line"><span class="comment">     */</span></div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getLimitString</span><span class="params">(String sql, <span class="keyword">int</span> offset, String offsetPlaceholder, String limitPlaceholder)</span> </span>&#123;</div><div class="line">        sql = sql.trim();</div><div class="line">        <span class="keyword">boolean</span> isForUpdate = <span class="keyword">false</span>;</div><div class="line">        <span class="keyword">if</span> (sql.toLowerCase().endsWith(<span class="string">" for update"</span>)) &#123;</div><div class="line">            sql = sql.substring(<span class="number">0</span>, sql.length() - <span class="number">11</span>);</div><div class="line">            isForUpdate = <span class="keyword">true</span>;</div><div class="line">        &#125;</div><div class="line">        StringBuilder pagingSelect = <span class="keyword">new</span> StringBuilder(sql.length() + <span class="number">100</span>);</div><div class="line"></div><div class="line">        <span class="keyword">if</span> (offset &gt; <span class="number">0</span>) &#123;</div><div class="line">			pagingSelect.append(<span class="string">"select * from ( select row_.*, rownum rownum_ from ( "</span>);</div><div class="line">		&#125; <span class="keyword">else</span> &#123;</div><div class="line">			pagingSelect.append(<span class="string">"select * from ( "</span>);</div><div class="line">		&#125;</div><div class="line">		pagingSelect.append(sql);</div><div class="line">		<span class="keyword">if</span> (offset &gt; <span class="number">0</span>) &#123;</div><div class="line">			String endString = offsetPlaceholder + <span class="string">"+"</span> + limitPlaceholder;</div><div class="line">			pagingSelect.append(<span class="string">" ) row_ where rownum &lt;= "</span>+endString+<span class="string">") where rownum_ &gt; "</span>).append(offsetPlaceholder);</div><div class="line">		&#125; <span class="keyword">else</span> &#123;</div><div class="line">			pagingSelect.append(<span class="string">" ) where rownum &lt;= "</span>+limitPlaceholder);</div><div class="line">		&#125;</div><div class="line"></div><div class="line">        <span class="keyword">if</span> (isForUpdate) &#123;</div><div class="line">            pagingSelect.append(<span class="string">" for update"</span>);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">return</span> pagingSelect.toString();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>sql的工具类，主要有总记录查询方法、对占位符的设值和分页语句的生成<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SQLHelp</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Logger logger = LoggerFactory.getLogger(SQLHelp.class);</div><div class="line">    <span class="comment">/**</span></div><div class="line"><span class="comment">     * 对SQL参数(?)设值,参考org.apache.ibatis.executor.parameter.DefaultParameterHandler</span></div><div class="line"><span class="comment">     *</span></div><div class="line"><span class="comment">     * <span class="doctag">@param</span> ps              表示预编译的 SQL 语句的对象。</span></div><div class="line"><span class="comment">     * <span class="doctag">@param</span> mappedStatement MappedStatement</span></div><div class="line"><span class="comment">     * <span class="doctag">@param</span> boundSql        SQL</span></div><div class="line"><span class="comment">     * <span class="doctag">@param</span> parameterObject 参数对象</span></div><div class="line"><span class="comment">     * <span class="doctag">@throws</span> java.sql.SQLException 数据库异常</span></div><div class="line"><span class="comment">     */</span></div><div class="line">    <span class="meta">@SuppressWarnings</span>(<span class="string">"unchecked"</span>)</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">setParameters</span><span class="params">(PreparedStatement ps, MappedStatement mappedStatement, BoundSql boundSql, Object parameterObject)</span> <span class="keyword">throws</span> SQLException </span>&#123;</div><div class="line">        ErrorContext.instance().activity(<span class="string">"setting parameters"</span>).object(mappedStatement.getParameterMap().getId());</div><div class="line">        List&lt;ParameterMapping&gt; parameterMappings = boundSql.getParameterMappings();</div><div class="line">        <span class="keyword">if</span> (parameterMappings != <span class="keyword">null</span>) &#123;</div><div class="line">            Configuration configuration = mappedStatement.getConfiguration();</div><div class="line">            TypeHandlerRegistry typeHandlerRegistry = configuration.getTypeHandlerRegistry();</div><div class="line">            MetaObject metaObject = parameterObject == <span class="keyword">null</span> ? <span class="keyword">null</span> :</div><div class="line">                    configuration.newMetaObject(parameterObject);</div><div class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; parameterMappings.size(); i++) &#123;</div><div class="line">                ParameterMapping parameterMapping = parameterMappings.get(i);</div><div class="line">                <span class="keyword">if</span> (parameterMapping.getMode() != ParameterMode.OUT) &#123;</div><div class="line">                    Object value;</div><div class="line">                    String propertyName = parameterMapping.getProperty();</div><div class="line">                    PropertyTokenizer prop = <span class="keyword">new</span> PropertyTokenizer(propertyName);</div><div class="line">                    <span class="keyword">if</span> (parameterObject == <span class="keyword">null</span>) &#123;</div><div class="line">                        value = <span class="keyword">null</span>;</div><div class="line">                    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (typeHandlerRegistry.hasTypeHandler(parameterObject.getClass())) &#123;</div><div class="line">                        value = parameterObject;</div><div class="line">                    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (boundSql.hasAdditionalParameter(propertyName)) &#123;</div><div class="line">                        value = boundSql.getAdditionalParameter(propertyName);</div><div class="line">                    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (propertyName.startsWith(ForEachSqlNode.ITEM_PREFIX) &amp;&amp; boundSql.hasAdditionalParameter(prop.getName())) &#123;</div><div class="line">                        value = boundSql.getAdditionalParameter(prop.getName());</div><div class="line">                        <span class="keyword">if</span> (value != <span class="keyword">null</span>) &#123;</div><div class="line">                            value = configuration.newMetaObject(value).getValue(propertyName.substring(prop.getName().length()));</div><div class="line">                        &#125;</div><div class="line">                    &#125; <span class="keyword">else</span> &#123;</div><div class="line">                        value = metaObject == <span class="keyword">null</span> ? <span class="keyword">null</span> : metaObject.getValue(propertyName);</div><div class="line">                    &#125;</div><div class="line">                    <span class="meta">@SuppressWarnings</span>(<span class="string">"rawtypes"</span>)</div><div class="line">                    TypeHandler typeHandler = parameterMapping.getTypeHandler();</div><div class="line">                    <span class="keyword">if</span> (typeHandler == <span class="keyword">null</span>) &#123;</div><div class="line">                        <span class="keyword">throw</span> <span class="keyword">new</span> ExecutorException(<span class="string">"There was no TypeHandler found for parameter "</span> + propertyName + <span class="string">" of statement "</span> + mappedStatement.getId());</div><div class="line">                    &#125;</div><div class="line">                    typeHandler.setParameter(ps, i + <span class="number">1</span>, value, parameterMapping.getJdbcType());</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line"><span class="comment">     * 查询总纪录数</span></div><div class="line"><span class="comment">     * <span class="doctag">@param</span> sql             SQL语句</span></div><div class="line"><span class="comment">     * <span class="doctag">@param</span> connection      数据库连接</span></div><div class="line"><span class="comment">     * <span class="doctag">@param</span> mappedStatement mapped</span></div><div class="line"><span class="comment">     * <span class="doctag">@param</span> parameterObject 参数</span></div><div class="line"><span class="comment">     * <span class="doctag">@param</span> boundSql        boundSql</span></div><div class="line"><span class="comment">     * <span class="doctag">@return</span> 总记录数</span></div><div class="line"><span class="comment">     * <span class="doctag">@throws</span> SQLException sql查询错误</span></div><div class="line"><span class="comment">     */</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">getRowCount</span><span class="params">(<span class="keyword">final</span> String sql, <span class="keyword">final</span> Connection connection, <span class="keyword">final</span> BoundSql boundSql,</span></span></div><div class="line"><span class="function"><span class="params">                            <span class="keyword">final</span> MappedStatement mappedStatement, <span class="keyword">final</span> Object parameterObject)</span> <span class="keyword">throws</span> SQLException </span>&#123;</div><div class="line">        <span class="keyword">final</span> String countSql = <span class="string">"select count(1) from ("</span> + sql + <span class="string">")temp_count"</span>;</div><div class="line">        Connection conn = connection;</div><div class="line">        PreparedStatement ps = <span class="keyword">null</span>;</div><div class="line">        ResultSet rs = <span class="keyword">null</span>;</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            <span class="keyword">if</span>(logger.isDebugEnabled())&#123;</div><div class="line">                logger.debug(<span class="string">"COUNT SQL: "</span> + StringUtils.replaceEach(countSql, <span class="keyword">new</span> String[]&#123;<span class="string">"\n"</span>,<span class="string">"\t"</span>&#125;, <span class="keyword">new</span> String[]&#123;<span class="string">" "</span>,<span class="string">" "</span>&#125;));</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">if</span>(connection == <span class="keyword">null</span>)&#123;</div><div class="line">                conn = mappedStatement.getConfiguration().getEnvironment().getDataSource().getConnection();</div><div class="line">            &#125;</div><div class="line">            ps = conn.prepareStatement(countSql);</div><div class="line">            BoundSql countBS = <span class="keyword">new</span> BoundSql(mappedStatement.getConfiguration(),</div><div class="line">                    countSql,</div><div class="line">                    boundSql.getParameterMappings(),</div><div class="line">                    parameterObject);</div><div class="line">            SQLHelp.setParameters(ps,mappedStatement,countBS,parameterObject);</div><div class="line">            rs = ps.executeQuery();</div><div class="line">            <span class="keyword">int</span> count = <span class="number">0</span>;</div><div class="line">            <span class="keyword">if</span>(rs.next())&#123;</div><div class="line">                count = rs.getInt(<span class="number">1</span>);</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">return</span> count;</div><div class="line">        &#125;<span class="keyword">finally</span> &#123;</div><div class="line">            <span class="keyword">if</span> (rs != <span class="keyword">null</span>) &#123;</div><div class="line">                rs.close();</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">if</span> (ps != <span class="keyword">null</span>) &#123;</div><div class="line">                ps.close();</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">if</span> (conn != <span class="keyword">null</span>) &#123;</div><div class="line">                conn.close();</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line"><span class="comment">     * 根据数据库方言，生成特定的分页sql</span></div><div class="line"><span class="comment">     * <span class="doctag">@param</span> sql     Mapper中的Sql语句</span></div><div class="line"><span class="comment">     * <span class="doctag">@param</span> page    分页对象</span></div><div class="line"><span class="comment">     * <span class="doctag">@param</span> dialect 方言类型</span></div><div class="line"><span class="comment">     * <span class="doctag">@return</span> 分页SQL</span></div><div class="line"><span class="comment">     */</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">generatePageSql</span><span class="params">(String sql, Page&lt;Object&gt; page, Dialect dialect)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (dialect.supportsLimit()) &#123;</div><div class="line">            <span class="keyword">return</span> dialect.getLimitString(sql, page.getFirstResult(), page.getMaxResults());</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            <span class="keyword">return</span> sql;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>拦截方法类，自定义mybatis需要实现Interceptor接口，并实现该接口的两个方法：plugin、intercept。在plugin方法中我们可以决定是否要进行拦截进而决定要返回一个什么样的目标对象。而intercept方法就是要进行拦截的时候要执行的方法。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="meta">@Intercepts</span>(&#123;</div><div class="line">        <span class="meta">@Signature</span>(method = <span class="string">"query"</span>, type = Executor.class, args = &#123;</div><div class="line">                MappedStatement.class, Object.class, RowBounds.class,</div><div class="line">                ResultHandler.class&#125;)</div><div class="line">&#125;)</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PaginationInterceptor</span> <span class="keyword">implements</span> <span class="title">Interceptor</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Logger logger = LoggerFactory.getLogger(getClass());</div><div class="line"></div><div class="line">    <span class="keyword">protected</span> <span class="keyword">static</span> <span class="keyword">final</span> String PAGE = <span class="string">"page"</span>;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> Dialect dialect;</div><div class="line"></div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line"><span class="comment">     * 分页拦截方法</span></div><div class="line"><span class="comment">     * <span class="doctag">@param</span> invocation</span></div><div class="line"><span class="comment">     * <span class="doctag">@return</span></span></div><div class="line"><span class="comment">     * <span class="doctag">@throws</span> Throwable</span></div><div class="line"><span class="comment">     */</span></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">intercept</span><span class="params">(Invocation invocation)</span> <span class="keyword">throws</span> Throwable </span>&#123;</div><div class="line">        <span class="keyword">final</span> MappedStatement mappedStatement = (MappedStatement) invocation.getArgs()[<span class="number">0</span>];</div><div class="line">        <span class="comment">//拦截需要分页的SQL</span></div><div class="line">        Object parameter = invocation.getArgs()[<span class="number">1</span>];</div><div class="line">        BoundSql boundSql = mappedStatement.getBoundSql(parameter);</div><div class="line">        Object parameterObject = boundSql.getParameterObject();</div><div class="line">        <span class="comment">//获取分页参数对象</span></div><div class="line">        Page&lt;Object&gt; page = <span class="keyword">null</span>;</div><div class="line">        <span class="keyword">if</span>(parameterObject != <span class="keyword">null</span>)&#123;</div><div class="line">            page = convertParameter(parameterObject,page);</div><div class="line">        &#125;</div><div class="line">        <span class="comment">//如果设置了分页对象，则进行分页</span></div><div class="line">        <span class="keyword">if</span>(page != <span class="keyword">null</span> &amp;&amp; page.getPageSize() != -<span class="number">1</span>)&#123;</div><div class="line">            <span class="keyword">if</span>(StringUtils.isBlank(boundSql.getSql()))&#123;</div><div class="line">                <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">            &#125;</div><div class="line">            String origin_sql = boundSql.getSql().trim();</div><div class="line"></div><div class="line">            <span class="comment">//设置总的记录数</span></div><div class="line">            page.setCount(SQLHelp.getRowCount(origin_sql,<span class="keyword">null</span>,boundSql,mappedStatement,parameterObject));</div><div class="line">            <span class="comment">//分页查询</span></div><div class="line">            String pageSql = SQLHelp.generatePageSql(origin_sql,page,dialect);</div><div class="line">            invocation.getArgs()[<span class="number">2</span>] = <span class="keyword">new</span> RowBounds(RowBounds.NO_ROW_OFFSET,RowBounds.NO_ROW_LIMIT);</div><div class="line">            BoundSql newBoundSql = <span class="keyword">new</span> BoundSql(mappedStatement.getConfiguration(),</div><div class="line">                                                        pageSql,</div><div class="line">                                                        boundSql.getParameterMappings(),</div><div class="line">                                                        boundSql.getParameterObject());</div><div class="line">            MappedStatement newMs = copyFromMappedStatement(mappedStatement,<span class="keyword">new</span> BoundSqlSqlSource(newBoundSql));</div><div class="line"></div><div class="line">            invocation.getArgs()[<span class="number">0</span>] = newMs;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> invocation.proceed();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> MappedStatement <span class="title">copyFromMappedStatement</span><span class="params">(MappedStatement ms,</span></span></div><div class="line"><span class="function"><span class="params">                                                    SqlSource newSqlSource)</span> </span>&#123;</div><div class="line">        MappedStatement.Builder builder = <span class="keyword">new</span> MappedStatement.Builder(ms.getConfiguration(),</div><div class="line">                ms.getId(), newSqlSource, ms.getSqlCommandType());</div><div class="line">        builder.resource(ms.getResource());</div><div class="line">        builder.fetchSize(ms.getFetchSize());</div><div class="line">        builder.statementType(ms.getStatementType());</div><div class="line">        builder.keyGenerator(ms.getKeyGenerator());</div><div class="line">        <span class="keyword">if</span> (ms.getKeyProperties() != <span class="keyword">null</span>) &#123;</div><div class="line">            <span class="keyword">for</span> (String keyProperty : ms.getKeyProperties()) &#123;</div><div class="line">                builder.keyProperty(keyProperty);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        builder.timeout(ms.getTimeout());</div><div class="line">        builder.parameterMap(ms.getParameterMap());</div><div class="line">        builder.resultMaps(ms.getResultMaps());</div><div class="line">        builder.cache(ms.getCache());</div><div class="line">        <span class="keyword">return</span> builder.build();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">BoundSqlSqlSource</span> <span class="keyword">implements</span> <span class="title">SqlSource</span> </span>&#123;</div><div class="line">        BoundSql boundSql;</div><div class="line"></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="title">BoundSqlSqlSource</span><span class="params">(BoundSql boundSql)</span> </span>&#123;</div><div class="line">            <span class="keyword">this</span>.boundSql = boundSql;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">public</span> BoundSql <span class="title">getBoundSql</span><span class="params">(Object parameterObject)</span> </span>&#123;</div><div class="line">            <span class="keyword">return</span> boundSql;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line"><span class="comment">     * 对参数进行转换和检查</span></div><div class="line"><span class="comment">     * <span class="doctag">@param</span> parameterObject 参数对象</span></div><div class="line"><span class="comment">     * <span class="doctag">@param</span> page            分页对象</span></div><div class="line"><span class="comment">     * <span class="doctag">@return</span> 分页对象</span></div><div class="line"><span class="comment">     * <span class="doctag">@throws</span> NoSuchFieldException 无法找到参数</span></div><div class="line"><span class="comment">     */</span></div><div class="line">    <span class="meta">@SuppressWarnings</span>(<span class="string">"unchecked"</span>)</div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">static</span> Page&lt;Object&gt; <span class="title">convertParameter</span><span class="params">(Object parameterObject, Page&lt;Object&gt; page)</span> </span>&#123;</div><div class="line">        <span class="keyword">try</span>&#123;</div><div class="line">            <span class="keyword">if</span> (parameterObject <span class="keyword">instanceof</span> Page) &#123;</div><div class="line">                <span class="keyword">return</span> (Page&lt;Object&gt;) parameterObject;</div><div class="line">            &#125; <span class="keyword">else</span> &#123;</div><div class="line">                <span class="keyword">return</span> (Page&lt;Object&gt;) ReflectHelper.getFieldValue(parameterObject, PAGE);</div><div class="line">            &#125;</div><div class="line">        &#125;<span class="keyword">catch</span> (Exception e) &#123;</div><div class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">plugin</span><span class="params">(Object o)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> Plugin.wrap(o, <span class="keyword">this</span>);</div><div class="line">    &#125;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setProperties</span><span class="params">(Properties properties)</span> </span>&#123;</div><div class="line">    	<span class="comment">//初始化方言实现类</span></div><div class="line">       dialect = <span class="keyword">new</span> MySqlDialect();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>可以看到在该类上使用了<code>@Intercepts</code>注解，该注解主要是定义拦截点。该Interceptor将拦截Executor接口中参数类型为MappedStatement、Object、RowBounds和ResultHandler的query方法。<br>最后需要在mybatis的配置文件中注册拦截器：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">plugins</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">plugin</span> <span class="attr">interceptor</span>=<span class="string">"com.wqh.blog.handle.PaginationInterceptor"</span> /&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></div></pre></td></tr></table></figure></p>
<hr>
<p>参考：<a href="http://elim.iteye.com/blog/1851081" target="_blank" rel="external">Mybatis拦截器介绍及分页插件</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;拦截器的作用就是拦截某些方法的调用，我们可以在方法执行前后为方法加上某些逻辑，也可以只执行拦截的逻辑代码而不执行被拦截的方法。Mybatis拦截器设计的一个初衷就是为了供用户在某些时候可以实现自己的逻辑而不必去动Mybatis固有的逻辑。&lt;/p&gt;
&lt;h2 id=&quot;拦截器分页原理&quot;&gt;&lt;a href=&quot;#拦截器分页原理&quot; class=&quot;headerlink&quot; title=&quot;拦截器分页原理&quot;&gt;&lt;/a&gt;拦截器分页原理&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;Mybatis拦截器常常会被用来进行分页处理。我们知道要利用JDBC对数据库进行操作就必须要有一个对应的Statement对象，Mybatis在执行Sql语句前也会产生一个包含Sql语句的Statement对象，而且对应的Sql语句是在Statement之前产生的，所以我们就可以在它成Statement之前对用来生成Statement的Sql语句下手。在Mybatis中Statement语句是通过RoutingStatementHandler对象的prepare方法生成的。所以利用拦截器实现Mybatis分页的一个思路就是拦截
    
    </summary>
    
      <category term="MyBatis" scheme="http://www.wanqhblog.top/categories/MyBatis/"/>
    
    
      <category term="分页" scheme="http://www.wanqhblog.top/tags/%E5%88%86%E9%A1%B5/"/>
    
      <category term="拦截器" scheme="http://www.wanqhblog.top/tags/%E6%8B%A6%E6%88%AA%E5%99%A8/"/>
    
  </entry>
  
  <entry>
    <title>SpringBoot使用JWT实现登录验证</title>
    <link href="http://www.wanqhblog.top/2018/01/02/SpringBoot%E4%BD%BF%E7%94%A8JWT%E5%AE%9E%E7%8E%B0%E7%99%BB%E5%BD%95%E9%AA%8C%E8%AF%81/"/>
    <id>http://www.wanqhblog.top/2018/01/02/SpringBoot使用JWT实现登录验证/</id>
    <published>2018-01-02T08:46:17.000Z</published>
    <updated>2018-01-02T08:53:05.396Z</updated>
    
    <content type="html"><![CDATA[<h2 id="什么是JWT"><a href="#什么是JWT" class="headerlink" title="什么是JWT"></a>什么是JWT</h2><blockquote>
<p>JSON Web Token（JWT）是一个开放的标准（RFC 7519），它定义了一个紧凑且自包含的方式，用于在各方之间以JSON对象安全地传输信息。这些信息可以通过数字签名进行验证和信任。可以使用秘密（使用HMAC算法）或使用RSA的公钥/私钥对来对JWT进行签名。<br>具体的jwt介绍可以查看官网的介绍：<a href="https://jwt.io/introduction/" target="_blank" rel="external">https://jwt.io/introduction/</a></p>
</blockquote>
<h2 id="jwt请求流程"><a href="#jwt请求流程" class="headerlink" title="jwt请求流程"></a>jwt请求流程</h2><p>引用官网的图片<a id="more"></a><br><img src="http://oy09glbzm.bkt.clouddn.com/18-1-2/81484781.jpg?imageView2/0/q/75|watermark/2/text/d2FucWhibG9nLnRvcA==/font/5a6L5L2T/fontsize/300/fill/IzJDMUJFRQ==/dissolve/100/gravity/SouthEast/dx/10/dy/10" alt=""><br>中文介绍：</p>
<ol>
<li>用户使用账号和面发出post请求；</li>
<li>服务器使用私钥创建一个jwt；</li>
<li>服务器返回这个jwt给浏览器；</li>
<li>浏览器将该jwt串在请求头中像服务器发送请求；</li>
<li>服务器验证该jwt；</li>
<li>返回响应的资源给浏览器。<h2 id="jwt组成"><a href="#jwt组成" class="headerlink" title="jwt组成"></a>jwt组成</h2>jwt含有三部分：头部（header）、载荷（payload）、签证（signature）<h3 id="头部（header）"><a href="#头部（header）" class="headerlink" title="头部（header）"></a>头部（header）</h3>头部一般有两部分信息：声明类型、声明加密的算法（通常使用HMAC SHA256）<br>头部一般使用base64加密：<code>eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9</code><br>解密后：<figure class="highlight json"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">	<span class="attr">"typ"</span>:<span class="string">"JWT"</span>,</div><div class="line">	<span class="attr">"alg"</span>:<span class="string">"HS256"</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ol>
<h3 id="载荷（payload）"><a href="#载荷（payload）" class="headerlink" title="载荷（payload）"></a>载荷（payload）</h3><p>该部分一般存放一些有效的信息。jwt的标准定义包含五个字段：</p>
<ul>
<li><code>iss</code>：该JWT的签发者</li>
<li><code>sub</code>: 该JWT所面向的用户</li>
<li><code>aud</code>: 接收该JWT的一方</li>
<li><code>exp(expires)</code>: 什么时候过期，这里是一个Unix时间戳</li>
<li><code>iat(issued at)</code>: 在什么时候签发的<br>这个只是JWT的定义标准，不强制使用。另外自己也可以添加一些公开的不涉及安全的方面的信息。<h3 id="签证（signature）"><a href="#签证（signature）" class="headerlink" title="签证（signature）"></a>签证（signature）</h3>JWT最后一个部分。该部分是使用了HS256加密后的数据；包含三个部分：</li>
<li>header (base64后的)</li>
<li>payload (base64后的)</li>
<li>secret 私钥</li>
</ul>
<p>secret是保存在服务器端的，jwt的签发生成也是在服务器端的，secret就是用来进行jwt的签发和jwt的验证，所以，它就是你服务端的私钥，在任何场景都不应该流露出去。一旦客户端得知这个secret, 那就意味着客户端是可以自我签发jwt了。</p>
<h2 id="在SpringBoot项目中应用"><a href="#在SpringBoot项目中应用" class="headerlink" title="在SpringBoot项目中应用"></a>在SpringBoot项目中应用</h2><p>首先需要添加JWT的依赖：<br><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&lt;dependency&gt;</div><div class="line">    &lt;groupId&gt;io.jsonwebtoken&lt;/groupId&gt;</div><div class="line">    &lt;artifactId&gt;jjwt&lt;/artifactId&gt;</div><div class="line">    &lt;version&gt;0.6.0&lt;/version&gt;</div><div class="line">&lt;/dependency&gt;</div></pre></td></tr></table></figure></p>
<p>接下来在配置文件中添加JWT的配置信息：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">##jwt配置</div><div class="line">audience:</div><div class="line">  clientId: <span class="number">098f</span>6bcd4621d373cade4e832627b4f6</div><div class="line">  base64Secret: MDk4ZjZiY2Q0NjIxZDM3M2NhZGU0ZTgzMjYyN2I0ZjY=</div><div class="line">  name: restapiuser</div><div class="line">  expiresSecond: <span class="number">172800</span></div></pre></td></tr></table></figure></p>
<p>配置信息的实体类，以便获取jwt的配置：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Data</span></div><div class="line"><span class="meta">@ConfigurationProperties</span>(prefix = <span class="string">"audience"</span>)</div><div class="line"><span class="meta">@Component</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Audience</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> String clientId;</div><div class="line">    <span class="keyword">private</span> String base64Secret;</div><div class="line">    <span class="keyword">private</span> String name;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">int</span> expiresSecond;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>JWT验证主要是通过拦截器验证，所以我们需要添加一个拦截器来验证请求头中是否含有后台颁发的token，这里请求头的格式：这里<code>bearer;</code>后面就是服务器颁发的token</p>
<p><img src="http://oy09glbzm.bkt.clouddn.com/18-1-2/15052102.jpg?imageView2/0/q/75|watermark/2/text/d2FucWhibG9nLnRvcA==/font/5a6L5L2T/fontsize/300/fill/IzJDMUJFRQ==/dissolve/100/gravity/SouthEast/dx/10/dy/10" alt=""><br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JwtFilter</span> <span class="keyword">extends</span> <span class="title">GenericFilterBean</span> </span>&#123;</div><div class="line"></div><div class="line">	<span class="meta">@Autowired</span></div><div class="line">	<span class="keyword">private</span> Audience audience;</div><div class="line"></div><div class="line">	<span class="comment">/**</span></div><div class="line"><span class="comment">	 *  Reserved claims（保留），它的含义就像是编程语言的保留字一样，属于JWT标准里面规定的一些claim。JWT标准里面定好的claim有：</span></div><div class="line"><span class="comment"></span></div><div class="line"><span class="comment">	 iss(Issuser)：代表这个JWT的签发主体；</span></div><div class="line"><span class="comment">	 sub(Subject)：代表这个JWT的主体，即它的所有人；</span></div><div class="line"><span class="comment">	 aud(Audience)：代表这个JWT的接收对象；</span></div><div class="line"><span class="comment">	 exp(Expiration time)：是一个时间戳，代表这个JWT的过期时间；</span></div><div class="line"><span class="comment">	 nbf(Not Before)：是一个时间戳，代表这个JWT生效的开始时间，意味着在这个时间之前验证JWT是会失败的；</span></div><div class="line"><span class="comment">	 iat(Issued at)：是一个时间戳，代表这个JWT的签发时间；</span></div><div class="line"><span class="comment">	 jti(JWT ID)：是JWT的唯一标识。</span></div><div class="line"><span class="comment">	 * <span class="doctag">@param</span> req</span></div><div class="line"><span class="comment">	 * <span class="doctag">@param</span> res</span></div><div class="line"><span class="comment">	 * <span class="doctag">@param</span> chain</span></div><div class="line"><span class="comment">	 * <span class="doctag">@throws</span> IOException</span></div><div class="line"><span class="comment">	 * <span class="doctag">@throws</span> ServletException</span></div><div class="line"><span class="comment">	 */</span></div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doFilter</span><span class="params">(<span class="keyword">final</span> ServletRequest req, <span class="keyword">final</span> ServletResponse res, <span class="keyword">final</span> FilterChain chain)</span></span></div><div class="line"><span class="function">			<span class="keyword">throws</span> IOException, ServletException </span>&#123;</div><div class="line"></div><div class="line">		<span class="keyword">final</span> HttpServletRequest request = (HttpServletRequest) req;</div><div class="line">		<span class="keyword">final</span> HttpServletResponse response = (HttpServletResponse) res;</div><div class="line">		<span class="comment">//等到请求头信息authorization信息</span></div><div class="line">		<span class="keyword">final</span> String authHeader = request.getHeader(<span class="string">"authorization"</span>);</div><div class="line"></div><div class="line">		<span class="keyword">if</span> (<span class="string">"OPTIONS"</span>.equals(request.getMethod())) &#123;</div><div class="line">			response.setStatus(HttpServletResponse.SC_OK);</div><div class="line">			chain.doFilter(req, res);</div><div class="line">		&#125; <span class="keyword">else</span> &#123;</div><div class="line"></div><div class="line">			<span class="keyword">if</span> (authHeader == <span class="keyword">null</span> || !authHeader.startsWith(<span class="string">"bearer;"</span>)) &#123;</div><div class="line">				<span class="keyword">throw</span> <span class="keyword">new</span> LoginException(ResultEnum.LOGIN_ERROR);</div><div class="line">			&#125;</div><div class="line">			<span class="keyword">final</span> String token = authHeader.substring(<span class="number">7</span>);</div><div class="line"></div><div class="line">			<span class="keyword">try</span> &#123;</div><div class="line">				<span class="keyword">if</span>(audience == <span class="keyword">null</span>)&#123;</div><div class="line">					BeanFactory factory = WebApplicationContextUtils.getRequiredWebApplicationContext(request.getServletContext());</div><div class="line">					audience = (Audience) factory.getBean(<span class="string">"audience"</span>);</div><div class="line">				&#125;</div><div class="line">				<span class="keyword">final</span> Claims claims = JwtHelper.parseJWT(token,audience.getBase64Secret());</div><div class="line">				<span class="keyword">if</span>(claims == <span class="keyword">null</span>)&#123;</div><div class="line">					<span class="keyword">throw</span> <span class="keyword">new</span> LoginException(ResultEnum.LOGIN_ERROR);</div><div class="line">				&#125;</div><div class="line">				request.setAttribute(Constants.CLAIMS, claims);</div><div class="line">			&#125; <span class="keyword">catch</span> (<span class="keyword">final</span> Exception e) &#123;</div><div class="line">				<span class="keyword">throw</span> <span class="keyword">new</span> LoginException(ResultEnum.LOGIN_ERROR);</div><div class="line">			&#125;</div><div class="line"></div><div class="line">			chain.doFilter(req, res);</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>注册JWT拦截器，可以在配置类中，也可以直接在SpringBoot的入口类中<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Bean</span></div><div class="line"><span class="function"><span class="keyword">public</span> FilterRegistrationBean <span class="title">jwtFilter</span><span class="params">()</span> </span>&#123;</div><div class="line">	<span class="keyword">final</span> FilterRegistrationBean registrationBean = <span class="keyword">new</span> FilterRegistrationBean();</div><div class="line">	registrationBean.setFilter(<span class="keyword">new</span> JwtFilter());</div><div class="line">	<span class="comment">//添加需要拦截的url</span></div><div class="line">	List&lt;String&gt;  urlPatterns = Lists.newArrayList();</div><div class="line">	urlPatterns.add(<span class="string">"/article/insert"</span>);</div><div class="line">	registrationBean.addUrlPatterns(urlPatterns.toArray(<span class="keyword">new</span> String[urlPatterns.size()]));</div><div class="line">	<span class="keyword">return</span> registrationBean;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>登录处理，也就是jwt的颁发<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line">@PostMapping(&quot;login&quot;)</div><div class="line">  public ResultVo login(@RequestParam(value = &quot;usernameOrEmail&quot;, required = true) String usernameOrEmail,</div><div class="line">                        @RequestParam(value = &quot;password&quot;, required = true) String password,</div><div class="line">                        HttpServletRequest request) &#123;</div><div class="line">      Boolean is_email = MatcherUtil.matcherEmail(usernameOrEmail);</div><div class="line">      User user = new User();</div><div class="line">      if (is_email) &#123;</div><div class="line">          user.setEmail(usernameOrEmail);</div><div class="line">      &#125; else &#123;</div><div class="line">          user.setUsername(usernameOrEmail);</div><div class="line">      &#125;</div><div class="line">      User query_user = userService.get(user);</div><div class="line">      if (query_user == null) &#123;</div><div class="line">          return ResultVOUtil.error(&quot;400&quot;, &quot;用户名或邮箱错误&quot;);</div><div class="line">      &#125;</div><div class="line">      //验证密码</div><div class="line">      PasswordEncoder encoder = new BCryptPasswordEncoder();</div><div class="line">      boolean is_password = encoder.matches(password, query_user.getPassword());</div><div class="line">      if (!is_password) &#123;</div><div class="line">          //密码错误，返回提示</div><div class="line">          return ResultVOUtil.error(&quot;400&quot;, &quot;密码错误&quot;);</div><div class="line">      &#125;</div><div class="line">   </div><div class="line">     String jwtToken = JwtHelper.createJWT(query_user.getUsername(),</div><div class="line">                                         query_user.getId(),</div><div class="line">                                         query_user.getRole().toString(),</div><div class="line">                                         audience.getClientId(),</div><div class="line">                                         audience.getName(),</div><div class="line">                                         audience.getExpiresSecond()*1000,</div><div class="line">                                         audience.getBase64Secret());</div><div class="line"></div><div class="line">      String result_str = &quot;bearer;&quot; + jwtToken;</div><div class="line">      return ResultVOUtil.success(result_str);</div><div class="line">  &#125;</div></pre></td></tr></table></figure></p>
<p>这里将jwt的颁发处理抽离出来了，JWT工具类：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JwtHelper</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line"><span class="comment">     * 解析jwt</span></div><div class="line"><span class="comment">     */</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Claims <span class="title">parseJWT</span><span class="params">(String jsonWebToken, String base64Security)</span></span>&#123;</div><div class="line">        <span class="keyword">try</span></div><div class="line">        &#123;</div><div class="line">            Claims claims = Jwts.parser()</div><div class="line">                    .setSigningKey(DatatypeConverter.parseBase64Binary(base64Security))</div><div class="line">                    .parseClaimsJws(jsonWebToken).getBody();</div><div class="line">            <span class="keyword">return</span> claims;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">catch</span>(Exception ex)</div><div class="line">        &#123;</div><div class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line"><span class="comment">     * 构建jwt</span></div><div class="line"><span class="comment">     */</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">createJWT</span><span class="params">(String name, String userId, String role,</span></span></div><div class="line"><span class="function"><span class="params">                                   String audience, String issuer, <span class="keyword">long</span> TTLMillis, String base64Security)</span></span></div><div class="line"><span class="function">    </span>&#123;</div><div class="line">        SignatureAlgorithm signatureAlgorithm = SignatureAlgorithm.HS256;</div><div class="line"></div><div class="line">        <span class="keyword">long</span> nowMillis = System.currentTimeMillis();</div><div class="line">        Date now = <span class="keyword">new</span> Date(nowMillis);</div><div class="line"></div><div class="line">        <span class="comment">//生成签名密钥</span></div><div class="line">        <span class="keyword">byte</span>[] apiKeySecretBytes = DatatypeConverter.parseBase64Binary(base64Security);</div><div class="line">        Key signingKey = <span class="keyword">new</span> SecretKeySpec(apiKeySecretBytes, signatureAlgorithm.getJcaName());</div><div class="line"></div><div class="line">        <span class="comment">//添加构成JWT的参数</span></div><div class="line">        JwtBuilder builder = Jwts.builder().setHeaderParam(<span class="string">"typ"</span>, <span class="string">"JWT"</span>)</div><div class="line">                .claim(<span class="string">"role"</span>, role)</div><div class="line">                .claim(<span class="string">"unique_name"</span>, name)</div><div class="line">                .claim(<span class="string">"userid"</span>, userId)</div><div class="line">                .setIssuer(issuer)</div><div class="line">                .setAudience(audience)</div><div class="line">                .signWith(signatureAlgorithm, signingKey);</div><div class="line">        <span class="comment">//添加Token过期时间</span></div><div class="line">        <span class="keyword">if</span> (TTLMillis &gt;= <span class="number">0</span>) &#123;</div><div class="line">            <span class="keyword">long</span> expMillis = nowMillis + TTLMillis;</div><div class="line">            Date exp = <span class="keyword">new</span> Date(expMillis);</div><div class="line">            builder.setExpiration(exp).setNotBefore(now);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="comment">//生成JWT</span></div><div class="line">        <span class="keyword">return</span> builder.compact();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>最后，jwt可能会出现跨域的问题，所以最好添加一下对跨域的处理<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line">@Configuration</div><div class="line">public class CorsConfig &#123;</div><div class="line"></div><div class="line">	@Bean</div><div class="line">	public FilterRegistrationBean corsFilter() &#123;</div><div class="line">		UrlBasedCorsConfigurationSource source = new UrlBasedCorsConfigurationSource();</div><div class="line">		CorsConfiguration config = new CorsConfiguration();</div><div class="line">		config.setAllowCredentials(true);</div><div class="line">		config.addAllowedOrigin(&quot;*&quot;);</div><div class="line">		config.addAllowedHeader(&quot;*&quot;);</div><div class="line">		config.addAllowedMethod(&quot;OPTIONS&quot;);</div><div class="line">		config.addAllowedMethod(&quot;HEAD&quot;);</div><div class="line">		config.addAllowedMethod(&quot;GET&quot;);</div><div class="line">		config.addAllowedMethod(&quot;PUT&quot;);</div><div class="line">		config.addAllowedMethod(&quot;POST&quot;);</div><div class="line">		config.addAllowedMethod(&quot;DELETE&quot;);</div><div class="line">		config.addAllowedMethod(&quot;PATCH&quot;);</div><div class="line">		source.registerCorsConfiguration(&quot;/**&quot;, config);</div><div class="line">		final FilterRegistrationBean bean = new FilterRegistrationBean(new CorsFilter(source));</div><div class="line">		bean.setOrder(0);</div><div class="line">		return bean;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	@Bean</div><div class="line">	public WebMvcConfigurer mvcConfigurer() &#123;</div><div class="line">		return new WebMvcConfigurerAdapter() &#123;</div><div class="line">			@Override</div><div class="line">			public void addCorsMappings(CorsRegistry registry) &#123;</div><div class="line">				registry.addMapping(&quot;/**&quot;).allowedMethods(&quot;GET&quot;, &quot;PUT&quot;, &quot;POST&quot;, &quot;GET&quot;, &quot;OPTIONS&quot;);</div><div class="line">			&#125;</div><div class="line">		&#125;;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<hr>
<p>参考：</p>
<ul>
<li><a href="https://www.jianshu.com/p/576dbf44b2ae" target="_blank" rel="external">什么是 JWT – JSON WEB TOKEN</a></li>
<li><a href="http://blog.leapoahead.com/2015/09/06/understanding-jwt/" target="_blank" rel="external">JSON Web Token - 在Web应用间安全地传递信息</a></li>
</ul>
<p>最后：写的不好，对权限的控制很粗糙。欢迎大家来喷！！</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;什么是JWT&quot;&gt;&lt;a href=&quot;#什么是JWT&quot; class=&quot;headerlink&quot; title=&quot;什么是JWT&quot;&gt;&lt;/a&gt;什么是JWT&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;JSON Web Token（JWT）是一个开放的标准（RFC 7519），它定义了一个紧凑且自包含的方式，用于在各方之间以JSON对象安全地传输信息。这些信息可以通过数字签名进行验证和信任。可以使用秘密（使用HMAC算法）或使用RSA的公钥/私钥对来对JWT进行签名。&lt;br&gt;具体的jwt介绍可以查看官网的介绍：&lt;a href=&quot;https://jwt.io/introduction/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://jwt.io/introduction/&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;jwt请求流程&quot;&gt;&lt;a href=&quot;#jwt请求流程&quot; class=&quot;headerlink&quot; title=&quot;jwt请求流程&quot;&gt;&lt;/a&gt;jwt请求流程&lt;/h2&gt;&lt;p&gt;引用官网的图片
    
    </summary>
    
      <category term="SpringBoot" scheme="http://www.wanqhblog.top/categories/SpringBoot/"/>
    
    
      <category term="SpringBoot" scheme="http://www.wanqhblog.top/tags/SpringBoot/"/>
    
      <category term="JWT" scheme="http://www.wanqhblog.top/tags/JWT/"/>
    
  </entry>
  
  <entry>
    <title>SpringBoot使用AOP+注解实现简单的权限验证</title>
    <link href="http://www.wanqhblog.top/2018/01/02/SpringBoot%E4%BD%BF%E7%94%A8AOP-%E6%B3%A8%E8%A7%A3%E5%AE%9E%E7%8E%B0%E7%AE%80%E5%8D%95%E7%9A%84%E6%9D%83%E9%99%90%E9%AA%8C%E8%AF%81/"/>
    <id>http://www.wanqhblog.top/2018/01/02/SpringBoot使用AOP-注解实现简单的权限验证/</id>
    <published>2018-01-02T02:39:04.000Z</published>
    <updated>2018-01-02T03:29:24.181Z</updated>
    
    <content type="html"><![CDATA[<p>SpringAOP的介绍：<a href="http://www.wanqhblog.top/2017/08/28/SpringAOP/">传送门</a></p>
<h2 id="demo介绍"><a href="#demo介绍" class="headerlink" title="demo介绍"></a>demo介绍</h2><p>主要通过自定义注解，使用SpringAOP的环绕通知拦截请求，判断该方法是否有自定义注解，然后判断该用户是否有该权限。这里做的比较简单，只有两个权限：一个普通用户、一个管理员。</p>
<h2 id="项目搭建"><a href="#项目搭建" class="headerlink" title="项目搭建"></a>项目搭建</h2><p>这里是基于SpringBoot的，对于SpringBoot项目的搭建就不说了。在项目中添加AOP的依赖：<a id="more"></a><br><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&lt;!--AOP包--&gt;</div><div class="line">&lt;dependency&gt;</div><div class="line">    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</div><div class="line">    &lt;artifactId&gt;spring-boot-starter-aop&lt;/artifactId&gt;</div><div class="line">&lt;/dependency&gt;</div></pre></td></tr></table></figure></p>
<h2 id="自定义注解及解析"><a href="#自定义注解及解析" class="headerlink" title="自定义注解及解析"></a>自定义注解及解析</h2><p>在方法上添加该注解，说明该方法需要管理员权限才能访问。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Target</span>(ElementType.METHOD)</div><div class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)</div><div class="line"><span class="meta">@Documented</span></div><div class="line"><span class="keyword">public</span> <span class="meta">@interface</span> Permission &#123;</div><div class="line"></div><div class="line">      <span class="function">String <span class="title">authorities</span><span class="params">()</span> <span class="keyword">default</span> "ADMIN"</span>;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>解析类：通过AOP的环绕通知获取方法上的注解，判断是否有Permission注解，返回注解的值。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AnnotationParse</span> </span>&#123;</div><div class="line">    <span class="comment">/***</span></div><div class="line"><span class="comment">     * 解析权限注解</span></div><div class="line"><span class="comment">     * <span class="doctag">@return</span> 返回注解的authorities值</span></div><div class="line"><span class="comment">     * <span class="doctag">@throws</span> Exception</span></div><div class="line"><span class="comment">     */</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">privilegeParse</span><span class="params">(Method method)</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">        <span class="comment">//获取该方法</span></div><div class="line">        <span class="keyword">if</span>(method.isAnnotationPresent(Permission.class))&#123;</div><div class="line">            Permission annotation = method.getAnnotation(Permission.class);</div><div class="line">            <span class="keyword">return</span> annotation.authorities();</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h2 id="SpringAOP环绕通知"><a href="#SpringAOP环绕通知" class="headerlink" title="SpringAOP环绕通知"></a>SpringAOP环绕通知</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div></pre></td><td class="code"><pre><div class="line">@Aspect</div><div class="line">@Component</div><div class="line">public class ControllerAspect &#123;</div><div class="line"></div><div class="line">    private final static Logger logger = LoggerFactory.getLogger(ControllerAspect.class);</div><div class="line"></div><div class="line">    @Autowired</div><div class="line">    private UserService userService;</div><div class="line">    /**</div><div class="line">     * 定义切点</div><div class="line">     */</div><div class="line">    @Pointcut(&quot;execution(public * com.wqh.blog.controller.*.*(..))&quot;)</div><div class="line">    public void privilege()&#123;&#125;</div><div class="line"></div><div class="line">    /**</div><div class="line">     * 权限环绕通知</div><div class="line">     * @param joinPoint</div><div class="line">     * @throws Throwable</div><div class="line">     */</div><div class="line">    @ResponseBody</div><div class="line">    @Around(&quot;privilege()&quot;)</div><div class="line">    public Object isAccessMethod(ProceedingJoinPoint joinPoint) throws Throwable &#123;</div><div class="line">        //获取访问目标方法</div><div class="line">        MethodSignature methodSignature = (MethodSignature)joinPoint.getSignature();</div><div class="line">        Method targetMethod = methodSignature.getMethod();</div><div class="line">        //得到方法的访问权限</div><div class="line">        final String methodAccess = AnnotationParse.privilegeParse(targetMethod);</div><div class="line"></div><div class="line">        //如果该方法上没有权限注解，直接调用目标方法</div><div class="line">        if(StringUtils.isBlank(methodAccess))&#123;</div><div class="line">            return joinPoint.proceed();</div><div class="line">        &#125;else &#123;</div><div class="line">            //获取当前用户的权限,这里是自定义的发那个发</div><div class="line">            User currentUser = userService.getCurrentUser();</div><div class="line">            logger.info(&quot;访问用户，&#123;&#125;&quot;,currentUser.toString());</div><div class="line">            if(currentUser == null)&#123;</div><div class="line">                throw new LoginException(ResultEnum.LOGIN_ERROR);</div><div class="line">            &#125;</div><div class="line">            if(methodAccess.equals(currentUser.getRole().toString()))&#123;</div><div class="line">               return joinPoint.proceed();</div><div class="line">            &#125;else &#123;</div><div class="line">                throw new BusinessException(ResultEnum.ROLE_ERROR);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><p>只需要在需要验证的方法上添加自定义注解:<code>@Permission</code>既可</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;SpringAOP的介绍：&lt;a href=&quot;http://www.wanqhblog.top/2017/08/28/SpringAOP/&quot;&gt;传送门&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;demo介绍&quot;&gt;&lt;a href=&quot;#demo介绍&quot; class=&quot;headerlink&quot; title=&quot;demo介绍&quot;&gt;&lt;/a&gt;demo介绍&lt;/h2&gt;&lt;p&gt;主要通过自定义注解，使用SpringAOP的环绕通知拦截请求，判断该方法是否有自定义注解，然后判断该用户是否有该权限。这里做的比较简单，只有两个权限：一个普通用户、一个管理员。&lt;/p&gt;
&lt;h2 id=&quot;项目搭建&quot;&gt;&lt;a href=&quot;#项目搭建&quot; class=&quot;headerlink&quot; title=&quot;项目搭建&quot;&gt;&lt;/a&gt;项目搭建&lt;/h2&gt;&lt;p&gt;这里是基于SpringBoot的，对于SpringBoot项目的搭建就不说了。在项目中添加AOP的依赖：
    
    </summary>
    
      <category term="SpringBoot" scheme="http://www.wanqhblog.top/categories/SpringBoot/"/>
    
    
      <category term="AOP" scheme="http://www.wanqhblog.top/tags/AOP/"/>
    
      <category term="注解" scheme="http://www.wanqhblog.top/tags/%E6%B3%A8%E8%A7%A3/"/>
    
  </entry>
  
  <entry>
    <title>使用nginx代理访问FastDFS上传的文件</title>
    <link href="http://www.wanqhblog.top/2017/12/29/%E4%BD%BF%E7%94%A8nginx%E4%BB%A3%E7%90%86%E8%AE%BF%E9%97%AEFastDFS%E4%B8%8A%E4%BC%A0%E7%9A%84%E6%96%87%E4%BB%B6/"/>
    <id>http://www.wanqhblog.top/2017/12/29/使用nginx代理访问FastDFS上传的文件/</id>
    <published>2017-12-29T01:12:24.000Z</published>
    <updated>2017-12-29T06:35:36.375Z</updated>
    
    <content type="html"><![CDATA[<p>上一次介绍了关于FastDFS系统单机版的安装配置以及使用官方测试上传图片：<br><a href="http://www.wanqhblog.top/2017/12/27/FastDFS%E7%B3%BB%E7%BB%9F%E7%9A%84%E6%90%AD%E5%BB%BA/">Linux下FastDFS系统的搭建</a><br>上传成功返回的链接还无法访问，因为FastDFS不支持http协议，所以要想直接访问，还需要使用nginx访问传的图片，文件。</p>
<p><img src="http://oy09glbzm.bkt.clouddn.com/17-12-27/58813378.jpg?imageView2/0/q/100|watermark/2/text/d2FucWhibG9nLnRvcA==/font/5a6L5L2T/fontsize/500/fill/I0VGRUZFRg==/dissolve/70/gravity/SouthEast/dx/5/dy/5" alt=""><br><a id="more"></a></p>
<h2 id="nginx的搭建"><a href="#nginx的搭建" class="headerlink" title="nginx的搭建"></a>nginx的搭建</h2><p>这里就不介绍了，传送门：<a href="http://www.wanqhblog.top/2017/11/25/CentOS%E4%B8%8BNginx%E7%9A%84%E9%85%8D%E7%BD%AE%E5%AE%89%E8%A3%85/">CentOS下Nginx的配置安装</a></p>
<h2 id="fastdfs-nginx-module"><a href="#fastdfs-nginx-module" class="headerlink" title="fastdfs-nginx-module"></a>fastdfs-nginx-module</h2><p>下载地址：<a href="https://github.com/happyfish100/fastdfs-nginx-module" target="_blank" rel="external">https://github.com/happyfish100/fastdfs-nginx-module</a><br>这里我从新安装nginx服务器，命令如下：如果是在现有的nginx上添加，可能会比较麻烦<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">[root@localhost nginx]# wget https://github.com/happyfish100/fastdfs-nginx-module/archive/master.zip</div><div class="line">[root@localhost nginx]# unzip master.zip</div><div class="line">[root@localhost nginx]# cd nginx-1.9.0/</div><div class="line">[root@localhost nginx-1.9.0]#  ./configure --prefix=/usr/local/webserver/nginx --with-http_stub_status_module --with-pcre=/usr/local/nginx/pcre-8.41 --add-module=/usr/local/nginx/fastdfs-nginx-module-master/src</div><div class="line">[root@localhost nginx-1.9.0]# make</div><div class="line">[root@localhost nginx-1.9.0]# make install</div></pre></td></tr></table></figure></p>
<p>安装完成之后要三个配置文件拷贝到fastDFS的配置文件目录下，我这里是<code>/etc/fdfs</code><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">[root@localhost nginx-1.9.0]# cp /usr/local/nginx/fastdfs-nginx-module-master/src/mod_fastdfs.conf /etc/fdfs</div><div class="line"></div><div class="line">[root@localhost src]# cp /usr/local/fastdfs/fastdfs-5.11/conf/http.conf /etc/fdfs/</div><div class="line"></div><div class="line">[root@localhost src]# cp /usr/local//fastdfs/fastdfs-5.11/conf/mime.types /etc/fdfs/</div></pre></td></tr></table></figure></p>
<p>修改mod_fastdfs.conf 配置信息：<br><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">[root@localhost bin]# vim /etc/fdfs/mod_fastdfs.conf</div></pre></td></tr></table></figure></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">base_path=/data/fastdfs/storage</div><div class="line">tracker_server=192.168.18.130:22122</div><div class="line">store_path0=/data/fastdfs/storage</div></pre></td></tr></table></figure>
<p>然后建立软连接：指向文件保存路径<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">[root@localhost nginx-1.9.0]# ln -s /data/fastdfs/storage/data/ /data/fastdfs/storage/data/M00</div></pre></td></tr></table></figure></p>
<p>最后修改nginx的配置文件：添加location</p>
<p><img src="http://oy09glbzm.bkt.clouddn.com/17-12-29/82209240.jpg?imageView2/0/q/75|watermark/2/text/d2FucWhibG9nLnRvcA==/font/5a6L5L2T/fontsize/300/fill/IzJDMUJFRQ==/dissolve/100/gravity/SouthEast/dx/10/dy/10" alt=""></p>
<h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><p>启动nginx：<br><code>[root@localhost src]# /usr/local/webserver/nginx/sbin/nginx -s reload</code><br>再次使用客户端测试类上传一张图片或者文件：<br><img src="http://oy09glbzm.bkt.clouddn.com/17-12-29/76287184.jpg?imageView2/0/q/75|watermark/2/text/d2FucWhibG9nLnRvcA==/font/5a6L5L2T/fontsize/300/fill/IzJDMUJFRQ==/dissolve/100/gravity/SouthEast/dx/10/dy/10" alt=""><br>在浏览器访问返回的链接：<br><img src="http://oy09glbzm.bkt.clouddn.com/17-12-29/17508526.jpg?imageView2/0/q/75|watermark/2/text/d2FucWhibG9nLnRvcA==/font/5a6L5L2T/fontsize/300/fill/IzJDMUJFRQ==/dissolve/100/gravity/SouthEast/dx/10/dy/10" alt=""></p>
<hr>
<p>关于nginx+FastDFS的简单配置介绍完成！！！</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;上一次介绍了关于FastDFS系统单机版的安装配置以及使用官方测试上传图片：&lt;br&gt;&lt;a href=&quot;http://www.wanqhblog.top/2017/12/27/FastDFS%E7%B3%BB%E7%BB%9F%E7%9A%84%E6%90%AD%E5%BB%BA/&quot;&gt;Linux下FastDFS系统的搭建&lt;/a&gt;&lt;br&gt;上传成功返回的链接还无法访问，因为FastDFS不支持http协议，所以要想直接访问，还需要使用nginx访问传的图片，文件。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://oy09glbzm.bkt.clouddn.com/17-12-27/58813378.jpg?imageView2/0/q/100|watermark/2/text/d2FucWhibG9nLnRvcA==/font/5a6L5L2T/fontsize/500/fill/I0VGRUZFRg==/dissolve/70/gravity/SouthEast/dx/5/dy/5&quot; alt=&quot;&quot;&gt;&lt;br&gt;
    
    </summary>
    
      <category term="FastDFS" scheme="http://www.wanqhblog.top/categories/FastDFS/"/>
    
    
      <category term="Nginx" scheme="http://www.wanqhblog.top/tags/Nginx/"/>
    
      <category term="FastDFS" scheme="http://www.wanqhblog.top/tags/FastDFS/"/>
    
  </entry>
  
  <entry>
    <title>关于SpringBoot上传图片的几种方式</title>
    <link href="http://www.wanqhblog.top/2017/12/28/%E5%85%B3%E4%BA%8ESpringBoot%E4%B8%8A%E4%BC%A0%E5%9B%BE%E7%89%87%E7%9A%84%E5%87%A0%E7%A7%8D%E6%96%B9%E5%BC%8F/"/>
    <id>http://www.wanqhblog.top/2017/12/28/关于SpringBoot上传图片的几种方式/</id>
    <published>2017-12-28T12:30:59.000Z</published>
    <updated>2017-12-28T08:37:36.608Z</updated>
    
    <content type="html"><![CDATA[<p>网站上传图片、文件等，最常见的就是直接上传到服务器的webapp目录下，或者直接上传服务的一个指定的文件夹下面。这种方式对于简单的单机应用确实是很方便、简单，出现的问题也会比较少。但是对于分布式项目，直接上传到项目路径的方式显然是不可靠的，而且随着业务量的增加，文件也会增加，对服务器的压力自然就增加了。这里简单的介绍自己所了解的几种方式保存文件。</p>
<ol>
<li>直接上传到指定的服务器路径；</li>
<li>上传到第三方内容存储器，这里介绍将图片保存到七牛云</li>
<li>自己搭建文件存储服务器，如：FastDFS<h2 id="最简单的上传"><a href="#最简单的上传" class="headerlink" title="最简单的上传"></a>最简单的上传</h2>首先说明，该项目结构是SpringBoot+mybatis。因为项目使用jar形式打包，所以这里将图片保存到一个指定的目录下。<a id="more"></a><br>添加WebAppConfig配置类<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Configuration</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WebAppConfig</span> <span class="keyword">extends</span> <span class="title">WebMvcConfigurerAdapter</span></span>&#123;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line"><span class="comment">     * 在配置文件中配置的文件保存路径</span></div><div class="line"><span class="comment">     */</span></div><div class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;img.location&#125;"</span>)</div><div class="line">    <span class="keyword">private</span> String location;</div><div class="line"></div><div class="line">    <span class="meta">@Bean</span></div><div class="line">    <span class="function"><span class="keyword">public</span> MultipartConfigElement <span class="title">multipartConfigElement</span><span class="params">()</span></span>&#123;</div><div class="line">        MultipartConfigFactory factory = <span class="keyword">new</span> MultipartConfigFactory();</div><div class="line">        <span class="comment">//文件最大KB,MB</span></div><div class="line">        factory.setMaxFileSize(<span class="string">"2MB"</span>);</div><div class="line">        <span class="comment">//设置总上传数据总大小</span></div><div class="line">        factory.setMaxRequestSize(<span class="string">"10MB"</span>);</div><div class="line">        <span class="keyword">return</span> factory.createMultipartConfig();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ol>
<p>文件上传的方法,这个方法有些参数可能需要做简单的修改，大致就是文件先做文件保存路径的处理，然后保存文件到该路径，最后返回文件上传信息<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@PutMapping</span>(<span class="string">"/article/img/upload"</span>)</div><div class="line">   <span class="function"><span class="keyword">public</span> MarkDVo <span class="title">uploadImg</span><span class="params">(@RequestParam(<span class="string">"editormd-image-file"</span>)</span> MultipartFile multipartFile)  </span>&#123;</div><div class="line">       <span class="keyword">if</span> (multipartFile.isEmpty() || StringUtils.isBlank(multipartFile.getOriginalFilename())) &#123;</div><div class="line">          <span class="keyword">throw</span> <span class="keyword">new</span> BusinessException(ResultEnum.IMG_NOT_EMPTY);</div><div class="line">       &#125;</div><div class="line">       String contentType = multipartFile.getContentType();</div><div class="line">       <span class="keyword">if</span> (!contentType.contains(<span class="string">""</span>)) &#123;</div><div class="line">           <span class="keyword">throw</span> <span class="keyword">new</span> BusinessException(ResultEnum.IMG_FORMAT_ERROR);</div><div class="line">       &#125;</div><div class="line">       String root_fileName = multipartFile.getOriginalFilename();</div><div class="line">       logger.info(<span class="string">"上传图片:name=&#123;&#125;,type=&#123;&#125;"</span>, root_fileName, contentType);</div><div class="line">       <span class="comment">//处理图片</span></div><div class="line">       User currentUser = userService.getCurrentUser();</div><div class="line">       <span class="comment">//获取路径</span></div><div class="line">       String return_path = ImageUtil.getFilePath(currentUser);</div><div class="line">       String filePath = location + return_path;</div><div class="line">       logger.info(<span class="string">"图片保存路径=&#123;&#125;"</span>, filePath);</div><div class="line">       String file_name = <span class="keyword">null</span>;</div><div class="line">       <span class="keyword">try</span> &#123;</div><div class="line">           file_name = ImageUtil.saveImg(multipartFile, filePath);</div><div class="line">           MarkDVo markDVo = <span class="keyword">new</span> MarkDVo();</div><div class="line">           markDVo.setSuccess(<span class="number">0</span>);</div><div class="line">           <span class="keyword">if</span>(StringUtils.isNotBlank(file_name))&#123;</div><div class="line">               markDVo.setSuccess(<span class="number">1</span>);</div><div class="line">               markDVo.setMessage(<span class="string">"上传成功"</span>);</div><div class="line">               markDVo.setUrl(return_path+File.separator+file_name);</div><div class="line">               markDVo.setCallback(callback);</div><div class="line">           &#125;</div><div class="line">           logger.info(<span class="string">"返回值：&#123;&#125;"</span>,markDVo);</div><div class="line">           <span class="keyword">return</span> markDVo;</div><div class="line">       &#125; <span class="keyword">catch</span> (IOException e) &#123;</div><div class="line">           <span class="keyword">throw</span> <span class="keyword">new</span> BusinessException(ResultEnum.SAVE_IMG_ERROE);</div><div class="line">       &#125;</div><div class="line">   &#125;</div></pre></td></tr></table></figure></p>
<p>文件保存类<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment">   * 保存文件，直接以multipartFile形式</span></div><div class="line"><span class="comment">   * <span class="doctag">@param</span> multipartFile</span></div><div class="line"><span class="comment">   * <span class="doctag">@param</span> path 文件保存绝对路径</span></div><div class="line"><span class="comment">   * <span class="doctag">@return</span> 返回文件名</span></div><div class="line"><span class="comment">   * <span class="doctag">@throws</span> IOException</span></div><div class="line"><span class="comment">   */</span></div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">saveImg</span><span class="params">(MultipartFile multipartFile,String path)</span> <span class="keyword">throws</span> IOException </span>&#123;</div><div class="line">      File file = <span class="keyword">new</span> File(path);</div><div class="line">      <span class="keyword">if</span> (!file.exists()) &#123;</div><div class="line">          file.mkdirs();</div><div class="line">      &#125;</div><div class="line">      FileInputStream fileInputStream = (FileInputStream) multipartFile.getInputStream();</div><div class="line">      String fileName = Constants.getUUID() + <span class="string">".png"</span>;</div><div class="line">      BufferedOutputStream bos = <span class="keyword">new</span> BufferedOutputStream(<span class="keyword">new</span> FileOutputStream(path + File.separator + fileName));</div><div class="line">      <span class="keyword">byte</span>[] bs = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>];</div><div class="line">      <span class="keyword">int</span> len;</div><div class="line">      <span class="keyword">while</span> ((len = fileInputStream.read(bs)) != -<span class="number">1</span>) &#123;</div><div class="line">          bos.write(bs, <span class="number">0</span>, len);</div><div class="line">      &#125;</div><div class="line">      bos.flush();</div><div class="line">      bos.close();</div><div class="line">      <span class="keyword">return</span> fileName;</div><div class="line">  &#125;</div></pre></td></tr></table></figure></p>
<p>配置文件保存路径<br><img src="http://oy09glbzm.bkt.clouddn.com/17-12-28/13570974.jpg?imageView2/0/q/100|watermark/2/text/d2FucWhibG9nLnRvcA==/font/5a6L5L2T/fontsize/300/fill/I0Y2MEIyOA==/dissolve/100/gravity/SouthEast/dx/10/dy/10" alt=""><br>测试：直接使用postman上传<br><img src="http://oy09glbzm.bkt.clouddn.com/17-12-28/33998744.jpg?imageView2/0/q/100|watermark/2/text/d2FucWhibG9nLnRvcA==/font/5a6L5L2T/fontsize/300/fill/I0Y2MEIyOA==/dissolve/100/gravity/SouthEast/dx/10/dy/10" alt=""><br><img src="http://oy09glbzm.bkt.clouddn.com/17-12-28/48469105.jpg?imageView2/0/q/100|watermark/2/text/d2FucWhibG9nLnRvcA==/font/5a6L5L2T/fontsize/300/fill/I0Y2MEIyOA==/dissolve/100/gravity/SouthEast/dx/10/dy/10" alt=""><br>下面需要访问预览该上传的图片<br>在配置文件中添加对静态资源的配置。SpringBoot对静态的的处理，<a href="http://blog.csdn.net/zsl129/article/details/52906762" target="_blank" rel="external">Springboot 之 静态资源路径配置</a><br><img src="http://oy09glbzm.bkt.clouddn.com/17-12-28/31217645.jpg?imageView2/0/q/100|watermark/2/text/d2FucWhibG9nLnRvcA==/font/5a6L5L2T/fontsize/300/fill/I0Y2MEIyOA==/dissolve/100/gravity/SouthEast/dx/10/dy/10" alt=""><br>然后在浏览器链接栏输入：此处应该忽略图片<br><img src="http://oy09glbzm.bkt.clouddn.com/17-12-28/45678677.jpg?imageView2/0/q/100|watermark/2/text/d2FucWhibG9nLnRvcA==/font/5a6L5L2T/fontsize/300/fill/I0Y2MEIyOA==/dissolve/100/gravity/SouthEast/dx/10/dy/10" alt=""></p>
<h2 id="上传到七牛云"><a href="#上传到七牛云" class="headerlink" title="上传到七牛云"></a>上传到七牛云</h2><p>这里首先要在七牛云中注册一个账号，并开通对象存储空间，免费用户有10G的存储空间。教程：<a href="http://jiantuku.com/help/faq.html?src=settings_head" target="_blank" rel="external">http://jiantuku.com/help/faq.html?src=settings_head</a></p>
<p>然后在自己的项目中搭建环境：使用maven导包<br><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&lt;dependency&gt;</div><div class="line">    &lt;groupId&gt;com.qiniu&lt;/groupId&gt;</div><div class="line">    &lt;artifactId&gt;qiniu-java-sdk&lt;/artifactId&gt;</div><div class="line">    &lt;version&gt;[7.2.0, 7.2.99]&lt;/version&gt;</div><div class="line">&lt;/dependency&gt;</div></pre></td></tr></table></figure></p>
<p>然后再刚才找到刚才创建密钥，复制出来保存保存在项目资源文件中<br><img src="http://oy09glbzm.bkt.clouddn.com/17-12-28/69622466.jpg?imageView2/0/q/100|watermark/2/text/d2FucWhibG9nLnRvcA==/font/5a6L5L2T/fontsize/300/fill/I0Y2MEIyOA==/dissolve/100/gravity/SouthEast/dx/10/dy/10" alt=""><br>这里的bucket就是上面的存储空间名称，然后path是域名。<br><img src="http://oy09glbzm.bkt.clouddn.com/17-12-28/66830677.jpg?imageView2/0/q/100|watermark/2/text/d2FucWhibG9nLnRvcA==/font/5a6L5L2T/fontsize/300/fill/I0Y2MEIyOA==/dissolve/100/gravity/SouthEast/dx/10/dy/10" alt=""><br>上传工具类：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Component</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">QiniuUtil</span></span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Logger logger = LoggerFactory.getLogger(QiniuUtil.class);</div><div class="line"></div><div class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;qiniu.accessKey&#125;"</span>)</div><div class="line">    <span class="keyword">private</span> String accessKey;</div><div class="line"></div><div class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;qiniu.secretKey&#125;"</span>)</div><div class="line">    <span class="keyword">private</span> String secretKey;</div><div class="line"></div><div class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;qiniu.bucket&#125;"</span>)</div><div class="line">    <span class="keyword">private</span> String bucket;</div><div class="line"></div><div class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;qiniu.path&#125;"</span>)</div><div class="line">    <span class="keyword">private</span> String path;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line"><span class="comment">     * 将图片上传到七牛云</span></div><div class="line"><span class="comment">     * <span class="doctag">@param</span> file</span></div><div class="line"><span class="comment">     * <span class="doctag">@param</span> key 保存在空间中的名字，如果为空会使用文件的hash值为文件名</span></div><div class="line"><span class="comment">     * <span class="doctag">@return</span></span></div><div class="line"><span class="comment">     */</span></div><div class="line">    <span class="function"><span class="keyword">public</span>  String <span class="title">uploadImg</span><span class="params">(FileInputStream file, String key)</span> </span>&#123;</div><div class="line">        <span class="comment">//构造一个带指定Zone对象的配置类</span></div><div class="line">        Configuration cfg = <span class="keyword">new</span> Configuration(Zone.zone1());</div><div class="line"><span class="comment">//...其他参数参考类注释</span></div><div class="line">        UploadManager uploadManager = <span class="keyword">new</span> UploadManager(cfg);</div><div class="line"><span class="comment">//...生成上传凭证，然后准备上传</span></div><div class="line"><span class="comment">//        String bucket = "oy09glbzm.bkt.clouddn.com";</span></div><div class="line">        <span class="comment">//默认不指定key的情况下，以文件内容的hash值作为文件名</span></div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            Auth auth = Auth.create(accessKey, secretKey);</div><div class="line">            String upToken = auth.uploadToken(bucket);</div><div class="line">            <span class="keyword">try</span> &#123;</div><div class="line">                Response response = uploadManager.put(file, key, upToken, <span class="keyword">null</span>, <span class="keyword">null</span>);</div><div class="line">                <span class="comment">//解析上传成功的结果</span></div><div class="line">                DefaultPutRet putRet = JSON.parseObject(response.bodyString(), DefaultPutRet.class);</div><div class="line"><span class="comment">//                DefaultPutRet putRet = new Gson().fromJson(response.bodyString(), DefaultPutRet.class);</span></div><div class="line"><span class="comment">//                System.out.println(putRet.key);</span></div><div class="line"><span class="comment">//                System.out.println(putRet.hash);</span></div><div class="line">                String return_path = path+<span class="string">"/"</span>+putRet.key;</div><div class="line">                logger.info(<span class="string">"保存地址=&#123;&#125;"</span>,return_path);</div><div class="line">                <span class="keyword">return</span> return_path;</div><div class="line">            &#125; <span class="keyword">catch</span> (QiniuException ex) &#123;</div><div class="line">                Response r = ex.response;</div><div class="line">                System.err.println(r.toString());</div><div class="line">                <span class="keyword">try</span> &#123;</div><div class="line">                    System.err.println(r.bodyString());</div><div class="line">                &#125; <span class="keyword">catch</span> (QiniuException ex2) &#123;</div><div class="line">                    <span class="comment">//ignore</span></div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> <span class="string">""</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>上传接口方法<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"><span class="comment">   * 上传文件到七牛云存储</span></div><div class="line"><span class="comment">   * <span class="doctag">@param</span> multipartFile</span></div><div class="line"><span class="comment">   * <span class="doctag">@return</span></span></div><div class="line"><span class="comment">   * <span class="doctag">@throws</span> IOException</span></div><div class="line"><span class="comment">   */</span></div><div class="line">  <span class="meta">@PutMapping</span>(<span class="string">"/article/img/qiniu"</span>)</div><div class="line">  <span class="function"><span class="keyword">public</span> String <span class="title">uploadImgQiniu</span><span class="params">(@RequestParam(<span class="string">"editormd-image-file"</span>)</span> MultipartFile multipartFile) <span class="keyword">throws</span> IOException </span>&#123;</div><div class="line">      FileInputStream inputStream = (FileInputStream) multipartFile.getInputStream();</div><div class="line">      User currentUser = userService.getCurrentUser();</div><div class="line">      String path = qiniuUtil.uploadImg(inputStream, currentUser.getUsername()+<span class="string">"_"</span>+Constants.getUUID());</div><div class="line">      <span class="keyword">return</span> path;</div><div class="line">  &#125;</div></pre></td></tr></table></figure></p>
<p>测试<br><img src="http://oy09glbzm.bkt.clouddn.com/17-12-28/76790561.jpg?imageView2/0/q/100|watermark/2/text/d2FucWhibG9nLnRvcA==/font/5a6L5L2T/fontsize/300/fill/I0Y2MEIyOA==/dissolve/100/gravity/SouthEast/dx/10/dy/10" alt=""><br><img src="http://oy09glbzm.bkt.clouddn.com/17-12-28/19209895.jpg?imageView2/0/q/100|watermark/2/text/d2FucWhibG9nLnRvcA==/font/5a6L5L2T/fontsize/300/fill/I0Y2MEIyOA==/dissolve/100/gravity/SouthEast/dx/10/dy/10" alt=""></p>
<h2 id="上传文件到FastDFS"><a href="#上传文件到FastDFS" class="headerlink" title="上传文件到FastDFS"></a>上传文件到FastDFS</h2><p>首先需要搭建FastDFS服务器，这里就不介绍了。传送门：<a href="http://www.wanqhblog.top/2017/12/27/FastDFS%E7%B3%BB%E7%BB%9F%E7%9A%84%E6%90%AD%E5%BB%BA/">Linux下FastDFS系统的搭建</a><br>依赖<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">&lt;!--FastDFS存储图片 start--&gt;</div><div class="line"> &lt;dependency&gt;</div><div class="line">     &lt;groupId&gt;com.github.tobato&lt;/groupId&gt;</div><div class="line">     &lt;artifactId&gt;fastdfs-client&lt;/artifactId&gt;</div><div class="line">     &lt;version&gt;1.25.4-RELEASE&lt;/version&gt;</div><div class="line"> &lt;/dependency&gt;</div><div class="line"> &lt;!--FastDFS存储图片 end--&gt;</div></pre></td></tr></table></figure></p>
<p>添加配置信息</p>
<p><img src="http://oy09glbzm.bkt.clouddn.com/17-12-28/71671941.jpg?imageView2/0/q/100|watermark/2/text/d2FucWhibG9nLnRvcA==/font/5a6L5L2T/fontsize/300/fill/I0Y2MEIyOA==/dissolve/100/gravity/SouthEast/dx/10/dy/10" alt=""></p>
<p>FastDFS配置类<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Configuration</span></div><div class="line"><span class="meta">@ComponentScan</span>(value = <span class="string">"com.github.tobato.fastdfs.service"</span>)</div><div class="line"><span class="meta">@Import</span>(FdfsClientConfig.class)</div><div class="line"><span class="meta">@EnableMBeanExport</span>(registration = RegistrationPolicy.IGNORE_EXISTING)</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FastDfsConfig</span> </span>&#123;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>这里对于FastDFS文件的操作只处理上传，上传文件类：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">  <span class="meta">@Autowired</span></div><div class="line">  <span class="keyword">private</span> FastFileStorageClient storageClient;</div><div class="line"></div><div class="line">  <span class="meta">@Autowired</span></div><div class="line">  <span class="keyword">private</span> FdfsWebServer fdfsWebServer;</div><div class="line"></div><div class="line"><span class="meta">@PutMapping</span>(<span class="string">"/article/img/fdfs"</span>)</div><div class="line">  <span class="function"><span class="keyword">public</span> String <span class="title">uploadImgfdfs</span><span class="params">(@RequestParam(value = <span class="string">"editormd-image-file"</span>)</span> MultipartFile multipartFile) <span class="keyword">throws</span> IOException </span>&#123;</div><div class="line">      StorePath storePath= storageClient.uploadFile(multipartFile.getInputStream(), multipartFile.getSize(), <span class="string">"png"</span>, <span class="keyword">null</span>);</div><div class="line">      String path = storePath.getFullPath();</div><div class="line">      logger.info(<span class="string">"保存路径=&#123;&#125;"</span>,path);</div><div class="line">      <span class="keyword">return</span> path;</div><div class="line">  &#125;</div></pre></td></tr></table></figure></p>
<p>测试：<br><img src="http://oy09glbzm.bkt.clouddn.com/17-12-28/23800686.jpg" alt=""></p>
<hr>
<p>参考：</p>
<ul>
<li><a href="http://blog.csdn.net/zsl129/article/details/52906762" target="_blank" rel="external">Springboot 之 静态资源路径配置</a></li>
<li><a href="https://www.jianshu.com/p/fcc7dc5f8be0" target="_blank" rel="external">Springboot 之 多文件上传-知识林</a></li>
<li><a href="http://www.bijishequ.com/detail/527312" target="_blank" rel="external">springboot和fastdfs实现文件ajax上传</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;网站上传图片、文件等，最常见的就是直接上传到服务器的webapp目录下，或者直接上传服务的一个指定的文件夹下面。这种方式对于简单的单机应用确实是很方便、简单，出现的问题也会比较少。但是对于分布式项目，直接上传到项目路径的方式显然是不可靠的，而且随着业务量的增加，文件也会增加，对服务器的压力自然就增加了。这里简单的介绍自己所了解的几种方式保存文件。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;直接上传到指定的服务器路径；&lt;/li&gt;
&lt;li&gt;上传到第三方内容存储器，这里介绍将图片保存到七牛云&lt;/li&gt;
&lt;li&gt;自己搭建文件存储服务器，如：FastDFS&lt;h2 id=&quot;最简单的上传&quot;&gt;&lt;a href=&quot;#最简单的上传&quot; class=&quot;headerlink&quot; title=&quot;最简单的上传&quot;&gt;&lt;/a&gt;最简单的上传&lt;/h2&gt;首先说明，该项目结构是SpringBoot+mybatis。因为项目使用jar形式打包，所以这里将图片保存到一个指定的目录下。
    
    </summary>
    
      <category term="SpringBoot" scheme="http://www.wanqhblog.top/categories/SpringBoot/"/>
    
    
      <category term="图片上传" scheme="http://www.wanqhblog.top/tags/%E5%9B%BE%E7%89%87%E4%B8%8A%E4%BC%A0/"/>
    
      <category term="FastDFS" scheme="http://www.wanqhblog.top/tags/FastDFS/"/>
    
      <category term="七牛云" scheme="http://www.wanqhblog.top/tags/%E4%B8%83%E7%89%9B%E4%BA%91/"/>
    
  </entry>
  
  <entry>
    <title>Linux下FastDFS系统的搭建</title>
    <link href="http://www.wanqhblog.top/2017/12/27/FastDFS%E7%B3%BB%E7%BB%9F%E7%9A%84%E6%90%AD%E5%BB%BA/"/>
    <id>http://www.wanqhblog.top/2017/12/27/FastDFS系统的搭建/</id>
    <published>2017-12-27T03:41:58.000Z</published>
    <updated>2017-12-28T03:36:40.601Z</updated>
    
    <content type="html"><![CDATA[<p>FastDFS是由淘宝的余庆先生所开发，是一个轻量级、高性能的开源分布式文件系统，用纯C语言开发，包括文件存储、文件同步、文件访问（上传、下载）、存取负载均衡、在线扩容、相同内容只存储一份等功能，适合有大容量存储需求的应用或系统。做分布式系统开发时，其中要解决的一个问题就是图片、音视频、文件共享的问题，分布式文件系统正好可以解决这个需求。同类的分布式文件系统有谷歌的GFS、HDFS（Hadoop）、TFS（淘宝）等。 <a id="more"></a></p>
<p>源码开放下载地址：<a href="https://github.com/happyfish100" target="_blank" rel="external">https://github.com/happyfish100 </a><br>早期源码开放下载地址：<a href="https://sourceforge.net/projects/fastdfs/files/" target="_blank" rel="external">https://sourceforge.net/projects/fastdfs/files/ </a><br>官网论坛：<a href="http://bbs.chinaunix.net/forum-240-1.html" target="_blank" rel="external">http://bbs.chinaunix.net/forum-240-1.html</a></p>
<h2 id="术语"><a href="#术语" class="headerlink" title="术语"></a>术语</h2><ul>
<li><font color="red">Tracker Server：</font>跟踪服务器，主要做调度工作，在访问上起负载均衡的作用。记录storage server的状态，是连接Client和Storage server的枢纽。</li>
<li><font color="red">Storage Server：</font>存储服务器，文件和meta data都保存到存储服务器上</li>
<li><font color="red"> group：</font>组，也可称为卷。同组内服务器上的文件是完全相同的<br>文件标识：包括两部分：组名和文件名（包含路径）</li>
<li><font color="red">meta data：</font>文件相关属性，键值对（Key Value Pair）方式，如：width=1024,heigth=768<h2 id="FastDFS结构"><a href="#FastDFS结构" class="headerlink" title="FastDFS结构"></a>FastDFS结构</h2><h3 id="系统架构图"><a href="#系统架构图" class="headerlink" title="系统架构图"></a>系统架构图</h3><img src="http://oy09glbzm.bkt.clouddn.com/17-12-27/68974025.jpg?imageView2/0/q/100|watermark/2/text/d2FucWhibG9nLnRvcA==/font/5a6L5L2T/fontsize/500/fill/I0VGRUZFRg==/dissolve/100/gravity/SouthEast/dx/10/dy/10" alt=""><br>部署结构<br><img src="http://oy09glbzm.bkt.clouddn.com/17-12-27/61576190.jpg?imageView2/0/q/100|watermark/2/text/d2FucWhibG9nLnRvcA==/font/5a6L5L2T/fontsize/500/fill/I0VGRUZFRg==/dissolve/100/gravity/SouthEast/dx/10/dy/10" alt=""><h3 id="文件上传下载"><a href="#文件上传下载" class="headerlink" title="文件上传下载"></a>文件上传下载</h3><strong>上传流程</strong><br><img src="http://oy09glbzm.bkt.clouddn.com/17-12-27/23619298.jpg?imageView2/0/q/100|watermark/2/text/d2FucWhibG9nLnRvcA==/font/5a6L5L2T/fontsize/500/fill/I0VGRUZFRg==/dissolve/100/gravity/SouthEast/dx/10/dy/10" alt=""><br><strong>下载流程</strong><br><img src="http://oy09glbzm.bkt.clouddn.com/17-12-27/82524766.jpg?imageView2/0/q/100|watermark/2/text/d2FucWhibG9nLnRvcA==/font/5a6L5L2T/fontsize/500/fill/I0VGRUZFRg==/dissolve/100/gravity/SouthEast/dx/10/dy/10" alt=""><h2 id="系统的部署"><a href="#系统的部署" class="headerlink" title="系统的部署"></a>系统的部署</h2><h3 id="环境介绍"><a href="#环境介绍" class="headerlink" title="环境介绍"></a>环境介绍</h3>操作系统：centerOS 7.3 需要有gcc,安装命令<br><code>yum -y install gcc gcc+ gcc-c++ openssl openssl-devel pcre pcre-devel</code><br>FastDFS ：5.11<h3 id="安装libfastcommon（公共代码）"><a href="#安装libfastcommon（公共代码）" class="headerlink" title="安装libfastcommon（公共代码）"></a>安装libfastcommon（公共代码）</h3>下载zip包<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">wget https://github.com/happyfish100/libfastcommon/archive/master.zip</div></pre></td></tr></table></figure>
</li>
</ul>
<p>解压，如果解压出现<code>-bash: unzip: command not found</code>，说明系统没有安装unzip和zip，使用<code>yum install -y unzip zip</code>安装即可<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">unzip master.zip</div></pre></td></tr></table></figure></p>
<p>编译安装<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">./make.sh</div><div class="line"></div><div class="line">./make.sh install</div></pre></td></tr></table></figure></p>
<p>查看此库文件是否存在，存在则表示安装成功<br><code>ls -l /usr/lib64/libfastcommon.so</code></p>
<h3 id="安装FastDFS"><a href="#安装FastDFS" class="headerlink" title="安装FastDFS"></a>安装FastDFS</h3><p>同样需要下载解压和编译安装<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">wget https://github.com/happyfish100/fastdfs/archive/V5.11.zip</div><div class="line"></div><div class="line">unzip V5.11.zip</div><div class="line"></div><div class="line">./make.sh </div><div class="line"></div><div class="line">./make.sh install</div></pre></td></tr></table></figure></p>
<p>查看fdfs的相关命令,fastDFS命令目录：/usr/bin<br><img src="http://oy09glbzm.bkt.clouddn.com/17-12-27/4190816.jpg?imageView2/0/q/100|watermark/2/text/d2FucWhibG9nLnRvcA==/font/5a6L5L2T/fontsize/500/fill/I0VGRUZFRg==/dissolve/100/gravity/SouthEast/dx/10/dy/10" alt=""></p>
<h2 id="配置文件介绍"><a href="#配置文件介绍" class="headerlink" title="配置文件介绍"></a>配置文件介绍</h2><p>FastDFS的配置文件在/etc/fdfs下面，默认都是以.sample为后缀的，这个后缀要去掉，最好就是先复制一份出来。配置文件大部分是保持默认的，要修改的地方不多。</p>
<h3 id="tracker-conf配置介绍"><a href="#tracker-conf配置介绍" class="headerlink" title="tracker.conf配置介绍"></a>tracker.conf配置介绍</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># ===========================基本配置====================================</span></div><div class="line">	disabled=<span class="literal">false</span></div><div class="line">	<span class="comment">#配置tracker.conf这个配置文件是否生效，因为在启动fastdfs服务端进程时需要指定配置文件，所以需要使次配置文件生效。false是生效，true是让此文件不生效。</span></div><div class="line">	bind_addr=</div><div class="line">	<span class="comment">#程序的监听地址，如果不设定则监听所有地址</span></div><div class="line">	port=22122</div><div class="line">	<span class="comment">#tracker监听的端口</span></div><div class="line">	connect_timeout=30</div><div class="line">	<span class="comment">#连接超时时间，针对socket套接字函数connect，默认为30秒</span></div><div class="line">	network_timeout=60</div><div class="line">	<span class="comment">#网络通讯超时（秒）</span></div><div class="line">	base_path=/home/yuqing/fastdfs</div><div class="line">	<span class="comment">#Tracker数据/日志目录地址，这里一般要修改的，如：/opt/fdfs</span></div><div class="line">	max_connections=256</div><div class="line">	<span class="comment">#允许的最大连接数，这里要根据需求调整.如设置成2048.</span></div><div class="line">	accept_threads=1</div><div class="line">	<span class="comment">#接收数据的线程数</span></div><div class="line">	work_threads=4</div><div class="line">	<span class="comment">#工作线程数，一般为cpu个数，当然CPU核数太多的话可以稍小一点。如我们是12CCPU，这里设置为8.</span></div><div class="line">	min_buff_size = 8KB</div><div class="line">	<span class="comment">#接收/发送数据的buff大小，必须大于8KB</span></div><div class="line">	max_buff_size = 128KB</div><div class="line">	<span class="comment">#接收/发送数据的buff大小必须小于128KB</span></div><div class="line">	store_lookup=2</div><div class="line">	<span class="comment">#在存储文件时选择group的策略也就是文件上传选取group的规则，0:轮训策略 1:指定某一个组 2:负载均衡，选择空闲空间最大的group。</span></div><div class="line">	store_group=group2</div><div class="line">	<span class="comment">#如果上面store_lookup=1，这里就起作用了，这里就要指定某一个组来存储上传的文件了。（一般store_lookup=1是由于旧的组已经没有空间了，因为下面有规则设置，所以就要新添加的机器就要放到新组里面，所以再上传就要传到新组里面。）</span></div><div class="line">	store_server=0</div><div class="line">	<span class="comment"># 选择哪个storage server 进行上传操作一个文件被上传后，这个storage server就相当于这个文件的storage server源，会对同组的storage server推送这个文件达到同步效果</span></div><div class="line">	<span class="comment"># 0: 轮询方式（默认）</span></div><div class="line">	<span class="comment"># 1: 根据ip 地址进行排序选择第一个服务器（IP地址最小者）</span></div><div class="line">	<span class="comment"># 2: 根据优先级进行排序（上传优先级由storage server来设置，参数名为upload_priority），优先级值越小优先级越高。</span></div><div class="line">	store_path=0</div><div class="line">	<span class="comment">#选择文件上传到storage中的哪个(目录/挂载点),storage可以有多个存放文件的base path 0:轮训策略 2:负载均衡，选择空闲空间最大的。我们线上选择的是2，让其选择空闲空间最大的去存放。</span></div><div class="line">	download_server=0</div><div class="line">	<span class="comment"># 选择哪个 storage server 作为下载服务器。</span></div><div class="line">	<span class="comment"># 0: 轮询方式，可以下载当前文件的任一storage server</span></div><div class="line">	<span class="comment"># 1: 哪个为源storage server就用哪一个,就是之前上传到哪个storage server服务器就是哪个了</span></div><div class="line">	reserved_storage_space = 10%</div><div class="line">	<span class="comment">#系统预留空间，当一个group中的任何storage的剩余空间小于定义的值，整个group就不能上传文件了（V4开始支持百分比方式），如：10G（字节数可以是GB,MB,KB,B）或者10%。</span></div><div class="line">	log_level=info</div><div class="line">	<span class="comment">#日志信息级别</span></div><div class="line">	run_by_group=</div><div class="line">	<span class="comment">#进程以那个用户组运行，不指定默认是当前用户组</span></div><div class="line">	run_by_user=</div><div class="line">	<span class="comment">#进程以那个用户运行，不指定默认是当前用户</span></div><div class="line">	allow_hosts=*</div><div class="line">	<span class="comment"># 可以连接到此 tracker server 的ip范围，默认是允许所有（对所有类型的连接都有影响，包括客户端，storage server）</span></div><div class="line">	<span class="comment"># for example:</span></div><div class="line">	<span class="comment"># allow_hosts=10.0.1.[1-15,20]</span></div><div class="line">	<span class="comment"># allow_hosts=host[01-08,20-25].domain.com</span></div><div class="line">	<span class="comment"># allow_hosts=192.168.5.64/26</span></div><div class="line">	sync_log_buff_interval = 10</div><div class="line">	<span class="comment">#同步或刷新日志信息到硬盘的时间间隔，单位为秒。注意：tracker server的日志不是时时写硬盘的，而是先写内存。</span></div><div class="line">	check_active_interval = 120</div><div class="line">	<span class="comment">#检测storage服务器的间隔时间，storage定期主动向tracker发送心跳，如果在指定的时间没收到信号，tracker认为storage故障，默认120s</span></div><div class="line">	thread_stack_size = 64KB</div><div class="line">	<span class="comment">#线程栈的大小。FastDFS server端采用了线程方式。线程栈越大，一个线程占用的系统资源就越多。如果要启动更多的线程可以适当降低本参数值。</span></div><div class="line">	storage_ip_changed_auto_adjust = <span class="literal">true</span></div><div class="line">	<span class="comment">#这个参数控制当storage server IP地址改变时，集群是否自动调整。注：只有在storage server进程重启时才完成自动调整。</span></div><div class="line">	<span class="comment"># ===========================同步======================================</span></div><div class="line">	storage_sync_file_max_delay = 86400</div><div class="line">	<span class="comment"># V2.0引入的参数。存储服务器之间同步文件的最大延迟时间，缺省为1天。根据实际情况进行调整。</span></div><div class="line">	storage_sync_file_max_time = 300</div><div class="line">	<span class="comment"># V2.0引入的参数。存储服务器同步一个文件需要消耗的最大时间，缺省为300s，即5分钟。</span></div><div class="line">	<span class="comment"># 注：本参数并不影响文件同步过程。本参数仅在下载文件时，作为判断当前文件是否被同步完成的一个阀值。</span></div><div class="line">	<span class="comment"># ===========================trunk 和 slot============================</span></div><div class="line">	use_trunk_file = <span class="literal">false</span> </div><div class="line">	<span class="comment"># V3.0引入的参数。是否使用小文件合并存储特性，缺省是关闭的。</span></div><div class="line">	slot_min_size = 256</div><div class="line">	<span class="comment">#V3.0引入的参数。trunk file分配的最小字节数。比如文件只有16个字节，系统也会分配slot_min_size个字节。</span></div><div class="line">	slot_max_size = 16MB</div><div class="line">	<span class="comment">#V3.0引入的参数。只有文件大小&lt;=这个参数值的文件，才会合并存储。如果一个文件的大小大于这个参数值，将直接保存到一个文件中（即不采用合并存储方式）。</span></div><div class="line">	trunk_file_size = 64MB</div><div class="line">	<span class="comment">#V3.0引入的参数。合并存储的trunk file大小，至少4MB，缺省值是64MB。不建议设置得过大。</span></div><div class="line">	trunk_create_file_advance = <span class="literal">false</span></div><div class="line">	<span class="comment">#是否开启创建trunk file。只有当这个参数为true，下面3个以trunk_create_file_打头的参数才有效。默认我们开启trunk合并。</span></div><div class="line">	trunk_create_file_time_base = 02:00</div><div class="line">	<span class="comment"># 提前创建trunk file的起始时间点（基准时间），02:00表示第一次创建的时间点是凌晨2点  </span></div><div class="line">	trunk_create_file_interval = 86400</div><div class="line">	<span class="comment">#创建trunk file的时间间隔，单位为秒。如果每天只提前创建一次，则设置为86400  </span></div><div class="line">	trunk_create_file_space_threshold = 20G</div><div class="line">	<span class="comment"># 提前创建trunk file时，需要达到的空闲trunk大小，比如本参数为20G，而当前空闲trunk为4GB，那么只需要创建16GB的trunk file即可。  </span></div><div class="line">	trunk_init_check_occupying = <span class="literal">false</span></div><div class="line">	<span class="comment">#trunk初始化时，是否检查可用空间是否被占用</span></div><div class="line">	trunk_init_reload_from_binlog = <span class="literal">false</span></div><div class="line">	<span class="comment">#是否无条件从trunk binlog中加载trunk可用空间信息，FastDFS缺省是从快照文件storage_trunk.dat中加载trunk可用空间，该文件的第一行记录的是trunk binlog的offset，然后从binlog的offset开始加载</span></div><div class="line">	trunk_compress_binlog_min_interval = 0</div><div class="line">	<span class="comment">#压缩trunk binlog 的最小时间间隔，单位：秒。默认值为0，0代表不压缩。FastDFS会在trunk初始化或者被销毁的时候压缩trunk binlog文件，如果设置的话建议设置成86400，一天设置一次。</span></div><div class="line">	<span class="comment"># ===========================其他设置============================</span></div><div class="line">	use_storage_id = <span class="literal">false</span></div><div class="line">	<span class="comment">#是否使用storage id替换ip作为storage server标识，默认为false</span></div><div class="line">	storage_ids_filename = storage_ids.conf</div><div class="line">	<span class="comment">#在文件中设置组名、server ID和对应的IP地址，参见源码目录下的配置示例：storage_ids.conf</span></div><div class="line">	id_type_in_filename = ip</div><div class="line">	<span class="comment">#存储服务器的文件名中的id类型，取值如下</span></div><div class="line">	<span class="comment"># IP：存储服务器的IP地址</span></div><div class="line">	<span class="comment"># id：被存储服务器的服务器标识</span></div><div class="line">	<span class="comment"># 只有当use_storage_id设置为true时此参数是有效的，默认值是IP</span></div><div class="line">	store_slave_file_use_link = <span class="literal">false</span></div><div class="line">	<span class="comment">#存储从文件是否采用symbol link（符号链接）方式。如果设置为true，一个从文件将占用两个文件：原始文件及指向它的符号链接。</span></div><div class="line">	rotate_error_log = <span class="literal">false</span></div><div class="line">	<span class="comment">#是否定期轮转error log，目前仅支持一天轮转一次</span></div><div class="line">	error_log_rotate_time=00:00</div><div class="line">	<span class="comment">#error log定期轮转的时间点，只有当rotate_error_log设置为true时有效</span></div><div class="line">	rotate_error_log_size = 0</div><div class="line">	<span class="comment">#error log按大小轮转，设置为0表示不按文件大小轮转，否则当error log达到该大小，就会轮转到新文件中</span></div><div class="line">	log_file_keep_days = 0</div><div class="line">	<span class="comment">#保留日志文件0表示不删除旧日志文件，默认值为0</span></div><div class="line">	use_connection_pool = <span class="literal">false</span></div><div class="line">	<span class="comment">#是否使用连接池</span></div><div class="line">	connection_pool_max_idle_time = 3600</div><div class="line">	<span class="comment">#连接的空闲时间超过这个时间将被关闭，单位：秒</span></div><div class="line">	<span class="comment"># ===========================HTTP 相关=================================</span></div><div class="line">	http.server_port=8080</div><div class="line">	<span class="comment">#tracker server上的HTTP服务器端口号</span></div><div class="line">	http.check_alive_interval=30</div><div class="line">	<span class="comment"># 检查storage http server存活的间隔时间，单位为秒</span></div><div class="line">	http.check_alive_type=tcp</div><div class="line">	<span class="comment">#检查存储HTTP服务器的活动类型，值为：tcp：仅连接到具有HTTP端口的存储服务器，不要求和获取响应http：storage check alive url必须返回http状态200默认值为tcp</span></div><div class="line">	http.check_alive_uri=/status.html</div><div class="line">	<span class="comment">#检查storage http server是否alive的uri/url</span></div></pre></td></tr></table></figure>
<blockquote>
<p>上面有很大一部分提到了trunk合并，一般我们是默认不合并的，小文件就是存储到目录里面。下面两篇链接讲的比较详细和专业：<br><a href="http://blog.csdn.net/hfty290/article/details/42026215" target="_blank" rel="external">http://blog.csdn.net/hfty290/article/details/42026215</a><br><a href="http://blog.csdn.net/liuaigui/article/details/9981135" target="_blank" rel="external">http://blog.csdn.net/liuaigui/article/details/9981135</a></p>
<h3 id="storage-conf配置文件介绍"><a href="#storage-conf配置文件介绍" class="headerlink" title="storage.conf配置文件介绍"></a>storage.conf配置文件介绍</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div></pre></td><td class="code"><pre><div class="line">disabled=<span class="literal">false</span></div><div class="line"><span class="comment">#是否启用禁用配置文件，false是不启用禁用，true是启动禁用。</span></div><div class="line">group_name=group1</div><div class="line"><span class="comment">#本storage server所属组名</span></div><div class="line">bind_addr=</div><div class="line"><span class="comment">#绑定IP，默认就是监听在0.0.0.0上面</span></div><div class="line">client_bind=<span class="literal">true</span></div><div class="line"><span class="comment">#bind_addr通常是针对server的。当指定bind_addr时，本参数才有效。本storage server作为client连接其他服务器（如tracker server、其他storage server），是否绑定bind_addr。true：绑定bind_addr所指定的IP。false：绑定本机的任意IP</span></div><div class="line">port=23000</div><div class="line"><span class="comment">#storage server服务端口</span></div><div class="line">connect_timeout=30</div><div class="line"><span class="comment">#连接超时(秒)，默认值 30s</span></div><div class="line">network_timeout=60</div><div class="line"><span class="comment">#网络超时(秒)，默认值 60s</span></div><div class="line">heart_beat_interval=30</div><div class="line"><span class="comment">#心跳间隔时间，单位为秒 (这里是指主动向tracker server 发送心跳)</span></div><div class="line">stat_report_interval=60</div><div class="line"><span class="comment">#storage server向tracker server报告磁盘剩余空间的时间间隔，单位为秒。</span></div><div class="line">base_path=/home/yuqing/fastdfs</div><div class="line"><span class="comment"># base_path目录地址,根目录必须存在子目录会自动生成。注 :这里不是上传的文件存放的地址,之前是的,在某个版本后更改了</span></div><div class="line">max_connections=256</div><div class="line"><span class="comment">#最大连接数，根据需求可以调大，如设置成2048.</span></div><div class="line">buff_size = 256KB</div><div class="line"><span class="comment">#接收/发送数据的buff大小，必须大于8KB，如这里可以设置成2048KB，设置的大一点。</span></div><div class="line">accept_threads=1</div><div class="line"><span class="comment">#接收数据的线程数</span></div><div class="line">work_threads=4</div><div class="line"><span class="comment">#接收数据的线程数，可以是CPU的核数或者比CPU核数小。</span></div><div class="line">disk_rw_separated = <span class="literal">true</span></div><div class="line"><span class="comment">#磁盘IO读写是否分离，缺省是分离的。磁盘读/写分离为false则为混合读写，如果为true则为分离读写的。默认值为V2.00以后为true。</span></div><div class="line">disk_reader_threads = 1</div><div class="line"><span class="comment"># 针对单个存储路径的读线程数，缺省值为1。我们这里设置为4.</span></div><div class="line"><span class="comment"># 读写分离时，系统中的读线程数 = disk_reader_threads * store_path_count</span></div><div class="line"><span class="comment"># 读写混合时，系统中的读写线程数 = (disk_reader_threads + disk_writer_threads) * store_path_count</span></div><div class="line">disk_writer_threads = 1</div><div class="line"><span class="comment"># 针对单个存储路径的写线程数，缺省值为1。我们这里设置为4.</span></div><div class="line"><span class="comment"># 读写分离时，系统中的写线程数 = disk_writer_threads * store_path_count</span></div><div class="line"><span class="comment"># 读写混合时，系统中的读写线程数 = (disk_reader_threads + disk_writer_threads) * store_path_count</span></div><div class="line">sync_wait_msec=50</div><div class="line"><span class="comment"># 同步文件时，如果从binlog中没有读到要同步的文件，休眠N毫秒后重新读取。0表示不休眠，立即再次尝试读取。如果没特别需求，默认值50毫秒就可以了。</span></div><div class="line"><span class="comment"># 出于CPU消耗考虑，不建议设置为0。如何希望同步尽可能快一些，可以将本参数设置得小一些，比如设置为10ms</span></div><div class="line">sync_interval=0</div><div class="line"><span class="comment">#同步完一个文件后间隔多少毫秒同步下一个文件，0表示不休息直接同步</span></div><div class="line">sync_start_time=00:00</div><div class="line">sync_end_time=23:59</div><div class="line"><span class="comment">#上面两段表示这段时间内同步文件，也就是说全天都在同步数据。第一条是开始时间段，第二条是结束时间段。</span></div><div class="line">write_mark_file_freq=500</div><div class="line"><span class="comment">#同步完多少文件后写mark标记，什么是mak标记等下面搭建的时候会文件举例。</span></div><div class="line">store_path_count=1</div><div class="line"><span class="comment">#storage在存储文件时支持多路径，默认只设置一个，通俗的将也就是你要挂载几个存储盘，你这里就设置对应的磁盘数，比如12块盘当store，这里就设置为12.</span></div><div class="line">store_path0=/home/yuqing/fastdfs</div><div class="line"><span class="comment">#逐一配置store_path个路径，索引号基于0。注意配置方法后面有0,1,2 ......，需要配置0到store_path - 1。如果不配置base_path0，那边它就和base_path对应的路径一样。</span></div><div class="line"><span class="comment">#如下面的配置（这里是两块盘，所以store_path_count=2）：</span></div><div class="line"><span class="comment">#store_path0=/data01/fastdfs </span></div><div class="line"><span class="comment">#store_path1=/data02/fastdfs </span></div><div class="line">subdir_count_per_path=256</div><div class="line"><span class="comment"># FastDFS存储文件时，采用了两级目录。如果本参数只为N（如：256），那么storage server在初次运行时，会自动创建 N * N 个存放文件的子目录。</span></div><div class="line">tracker_server=192.168.209.121:22122</div><div class="line"><span class="comment">#tracker_server 的列表要写端口(是主动连接tracker_server)有多个tracker server时，每个tracker server写一行，如下面：</span></div><div class="line"><span class="comment">#192.168.1.103:22122</span></div><div class="line"><span class="comment">#192.168.1.104:22122</span></div><div class="line">log_level=info</div><div class="line"><span class="comment">#日志级别,我们这里设置为了warn。</span></div><div class="line">run_by_group=</div><div class="line"><span class="comment">#指定运行该程序的用户组，不设置就默认为当前启动程序的用户组。</span></div><div class="line">run_by_user=</div><div class="line"><span class="comment">#指定运行该程序的用户，不设置就默认为当前启动程序的用户。</span></div><div class="line">allow_hosts=*</div><div class="line"><span class="comment">#默认是允许所有主机连接</span></div><div class="line">file_distribute_path_mode=0</div><div class="line"><span class="comment"># 0: 轮流存放，在一个目录下存储设置的文件数后（参数file_distribute_rotate_count中设置文件数），使用下一个目录进行存储。</span></div><div class="line"><span class="comment"># 1: 随机存储，根据文件名对应的hash code来分散存储。</span></div><div class="line">file_distribute_rotate_count=100</div><div class="line"><span class="comment"># 当上面的参数file_distribute_path_mode配置为0（轮流存放方式）时，本参数有效。</span></div><div class="line"><span class="comment"># 当一个目录下的文件存放的文件数达到本参数值时，后续上传的文件存储到下一个目录中。</span></div><div class="line">fsync_after_written_bytes=0</div><div class="line"><span class="comment">#写大文件时调用fsync到磁盘，0：永远不要调用fsync。other：写多少字节后开始同步，当写入字节&gt; =这个字节时调用fsync。默认值为0（从不调用fsync）</span></div><div class="line">sync_log_buff_interval=10</div><div class="line"><span class="comment"># 同步或刷新日志信息到硬盘的时间间隔，单位为秒。注意：storage server 的日志信息不是时时写硬盘的，而是先写内存。</span></div><div class="line">sync_binlog_buff_interval=10</div><div class="line"><span class="comment">#同步binglog（更新操作日志）到硬盘的时间间隔，单位为秒。本参数会影响新上传文件同步延迟时间</span></div><div class="line">sync_stat_file_interval=300</div><div class="line"><span class="comment"># 把storage的stat文件同步到磁盘的时间间隔，单位为秒。注：如果stat文件内容没有变化，不会进行同步</span></div><div class="line">thread_stack_size=512KB</div><div class="line"><span class="comment"># 线程栈的大小。FastDFS server端采用了线程方式。应该大于等于512KB。</span></div><div class="line">upload_priority=10</div><div class="line"><span class="comment">#本storage server作为源服务器，上传文件的优先级，可以为负数。值越小，优先级越高。里就和 tracker.conf 中store_server= 2时的配置相对应了。</span></div><div class="line">if_alias_prefix=</div><div class="line"><span class="comment">#网卡别名，用ifconfig -a可以看到很多本机的网卡别名，类似eth0,eth0:0等等。多个网卡别名使用逗号分割，默认为空，让系统自动选择。</span></div><div class="line">check_file_duplicate=0</div><div class="line"><span class="comment"># 是否检测上传文件已经存在。如果已经存在，则不存文件内容，建立一个符号链接以节省磁盘空间。 这个应用要配合FastDHT 使用，所以打开前要先安装FastDHT。1或yes 是检测，0或no 是不检测</span></div><div class="line">file_signature_method=<span class="built_in">hash</span></div><div class="line"><span class="comment">#文件签名方法用于检查文件重复，hash：四个32位哈希码。md5：MD5签名。默认值是V4.01之后的哈希</span></div><div class="line">key_namespace=FastDFS</div><div class="line"><span class="comment">#当参数check_file_duplicate设定为1 或 yes时(true/on也是可以的)，在FastDHT中的命名空间。</span></div><div class="line">keep_alive=0</div><div class="line"><span class="comment"># 与FastDHT servers 的连接方式 (是否为持久连接) ，默认是0（短连接方式）。可以考虑使用长连接，这要看FastDHT server的连接数是否够用。</span></div><div class="line">use_access_log = <span class="literal">false</span></div><div class="line"><span class="comment">#是否记录访问日志</span></div><div class="line">rotate_access_log = <span class="literal">false</span></div><div class="line"><span class="comment"># 是否定期轮转access log，目前仅支持一天轮转一次</span></div><div class="line">access_log_rotate_time=00:00</div><div class="line"><span class="comment"># access log定期轮转的时间点，只有当rotate_access_log设置为true时有效</span></div><div class="line">rotate_error_log = <span class="literal">false</span></div><div class="line"><span class="comment">#是否定期轮转error log，目前仅支持一天轮转一次</span></div><div class="line">error_log_rotate_time=00:00</div><div class="line"><span class="comment"># error log定期轮转的时间点，只有当rotate_error_log设置为true时有效</span></div><div class="line">rotate_access_log_size = 0</div><div class="line"><span class="comment"># access log按文件大小轮转，设置为0表示不按文件大小轮转，否则当access log达到该大小，就会轮转到新文件中</span></div><div class="line">rotate_error_log_size = 0</div><div class="line"><span class="comment"># error log按文件大小轮转，设置为0表示不按文件大小轮转，否则当error log达到该大小，就会轮转到新文件中</span></div><div class="line">log_file_keep_days = 0</div><div class="line"><span class="comment">#保留日志文件的日期0表示不删除旧的日志文件</span></div><div class="line">file_sync_skip_invalid_record=<span class="literal">false</span></div><div class="line"><span class="comment">#文件同步的时候，是否忽略无效的binlog记录</span></div><div class="line">use_connection_pool = <span class="literal">false</span></div><div class="line"><span class="comment"># 是否使用连接池</span></div><div class="line">connection_pool_max_idle_time = 3600</div><div class="line"><span class="comment"># 连接的空闲时间超过这个时间将被关闭，单位：秒</span></div><div class="line">http.domain_name=</div><div class="line"><span class="comment">#如果domain_name为空，请使用此存储服务器的IP地址，否则此域名将在由跟踪服务器重定向的URL中出现</span></div><div class="line">http.server_port=8888</div><div class="line"><span class="comment">#该存储服务器上的Web服务器的端口</span></div></pre></td></tr></table></figure>
</blockquote>
<h3 id="client-conf配置文件介绍"><a href="#client-conf配置文件介绍" class="headerlink" title="client.conf配置文件介绍"></a>client.conf配置文件介绍</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line">connect_timeout=30</div><div class="line"><span class="comment">#连接的超时时间</span></div><div class="line">network_timeout=60</div><div class="line"><span class="comment">#网络超时(秒)，默认值 60s</span></div><div class="line">base_path=/home/yuqing/fastdfs</div><div class="line"><span class="comment">#存储日志文件的基本路径，如/opt/fastdfs</span></div><div class="line">tracker_server=192.168.0.197:22122</div><div class="line"><span class="comment">#tracker server的列表，多个的话就是多行，如：</span></div><div class="line"><span class="comment">#192.168.1.103:22122</span></div><div class="line"><span class="comment">#192.168.1.104:22122</span></div><div class="line">log_level=info</div><div class="line"><span class="comment">#日志级别</span></div><div class="line">use_connection_pool = <span class="literal">false</span></div><div class="line"><span class="comment">#是否使用连接池</span></div><div class="line">connection_pool_max_idle_time = 3600</div><div class="line"><span class="comment">#连接的空闲时间超过这个时间将被关闭，单位：秒</span></div><div class="line">load_fdfs_parameters_from_tracker=<span class="literal">false</span></div><div class="line"><span class="comment">#是否加载来自跟踪服务器的FastDFS参数，默认值为false。这里可以设置为true。</span></div><div class="line">use_storage_id = <span class="literal">false</span></div><div class="line"><span class="comment">#是否使用storage id替换ip作为storage server标识，默认为false</span></div><div class="line">storage_ids_filename = storage_ids.conf</div><div class="line"><span class="comment">#在文件中设置组名、server ID和对应的IP地址，参见源码目录下的配置示例：storage_ids.conf</span></div><div class="line">http.tracker_server_port=80</div><div class="line"><span class="comment">#HTTP设置，tracker server上的HTTP服务器端口号</span></div></pre></td></tr></table></figure>
<h3 id="配置启动Tracker"><a href="#配置启动Tracker" class="headerlink" title="配置启动Tracker"></a>配置启动Tracker</h3><p>首先创建数据目录，并修改tracker.conf配置文件<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">mkdir  /data/fastdfs/tracker</div></pre></td></tr></table></figure></p>
<p>修改配置文件<br><code>vim /etc/fdfs/tracker.conf</code><br><img src="http://oy09glbzm.bkt.clouddn.com/17-12-27/80552480.jpg?imageView2/0/q/100|watermark/2/text/d2FucWhibG9nLnRvcA==/font/5a6L5L2T/fontsize/500/fill/I0VGRUZFRg==/dissolve/100/gravity/SouthEast/dx/10/dy/10" alt=""><br>启动tracker<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">cd /usr/bin/</div><div class="line"></div><div class="line">fdfs_trackerd /etc/fdfs/tracker.conf restart</div></pre></td></tr></table></figure></p>
<p>查看启动结果，tracker的默认端口为 22122<br><img src="http://oy09glbzm.bkt.clouddn.com/17-12-27/15145051.jpg" alt=""></p>
<h3 id="配置启动storage"><a href="#配置启动storage" class="headerlink" title="配置启动storage"></a>配置启动storage</h3><p>按照前面的介绍，storage应该安装在其他服务器节点上，并且可以添加多个groups。这里为了方便，直接跟Tracker在同一台服务器，并且就不安装多个了。<br>修storage.conf配置文件<br><img src="http://oy09glbzm.bkt.clouddn.com/17-12-27/63365541.jpg" alt=""><br><img src="http://oy09glbzm.bkt.clouddn.com/17-12-27/12855148.jpg" alt=""><br>启动stroge<br><img src="http://oy09glbzm.bkt.clouddn.com/17-12-27/58576437.jpg" alt=""></p>
<h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><p>直接下载官方的测试demo：<a href="https://github.com/happyfish100/fastdfs-client-java" target="_blank" rel="external">https://github.com/happyfish100/fastdfs-client-java</a><br>这里使用idea运行项目，新建fastDFS.conf<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">connect_timeout = <span class="number">2</span></div><div class="line">network_timeout = <span class="number">20</span></div><div class="line">#tracker服务器地址，如果有多个tracker可以配置多个tracker_server</div><div class="line">tracker_server=<span class="number">192.168</span>.18.129:<span class="number">22122</span></div></pre></td></tr></table></figure></p>
<p>需要运行的类，先添加两个参数：一个是配置文件，一个是要上传文件。<br><img src="http://oy09glbzm.bkt.clouddn.com/17-12-27/33260434.jpg?imageView2/0/q/100|watermark/2/text/d2FucWhibG9nLnRvcA==/font/5a6L5L2T/fontsize/500/fill/I0VGRUZFRg==/dissolve/100/gravity/SouthEast/dx/10/dy/10" alt=""></p>
<p><img src="http://oy09glbzm.bkt.clouddn.com/17-12-27/87962066.jpg?imageView2/0/q/100|watermark/2/text/d2FucWhibG9nLnRvcA==/font/5a6L5L2T/fontsize/500/fill/I0VGRUZFRg==/dissolve/100/gravity/SouthEast/dx/10/dy/10" alt=""></p>
<p><img src="http://oy09glbzm.bkt.clouddn.com/17-12-27/22721002.jpg?imageView2/0/q/100|watermark/2/text/d2FucWhibG9nLnRvcA==/font/5a6L5L2T/fontsize/500/fill/I0VGRUZFRg==/dissolve/100/gravity/SouthEast/dx/10/dy/10" alt=""><br>点击运行即可，运行结果</p>
<h2 id=""><a href="#" class="headerlink" title=""></a><img src="http://oy09glbzm.bkt.clouddn.com/17-12-27/58813378.jpg?imageView2/0/q/100|watermark/2/text/d2FucWhibG9nLnRvcA==/font/5a6L5L2T/fontsize/500/fill/I0VGRUZFRg==/dissolve/100/gravity/SouthEast/dx/10/dy/10" alt=""></h2><p>参考:</p>
<ul>
<li><a href="http://www.51niux.com/?id=137" target="_blank" rel="external">FastDFS之基础知识</a></li>
<li><a href="https://www.jianshu.com/p/1c71ae024e5e" target="_blank" rel="external">FASTDFS</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;FastDFS是由淘宝的余庆先生所开发，是一个轻量级、高性能的开源分布式文件系统，用纯C语言开发，包括文件存储、文件同步、文件访问（上传、下载）、存取负载均衡、在线扩容、相同内容只存储一份等功能，适合有大容量存储需求的应用或系统。做分布式系统开发时，其中要解决的一个问题就是图片、音视频、文件共享的问题，分布式文件系统正好可以解决这个需求。同类的分布式文件系统有谷歌的GFS、HDFS（Hadoop）、TFS（淘宝）等。
    
    </summary>
    
      <category term="FastDFS" scheme="http://www.wanqhblog.top/categories/FastDFS/"/>
    
    
      <category term="分布式文件系统" scheme="http://www.wanqhblog.top/tags/%E5%88%86%E5%B8%83%E5%BC%8F%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F/"/>
    
  </entry>
  
  <entry>
    <title>SpringBoot使用Redis做缓存</title>
    <link href="http://www.wanqhblog.top/2017/12/26/SpringBoot%E4%BD%BF%E7%94%A8Redis%E5%81%9A%E7%BC%93%E5%AD%98/"/>
    <id>http://www.wanqhblog.top/2017/12/26/SpringBoot使用Redis做缓存/</id>
    <published>2017-12-26T15:26:40.000Z</published>
    <updated>2017-12-27T03:30:02.132Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>随着时间的积累，应用的使用用户不断增加，数据规模也越来越大，往往数据库查询操作会成为影响用户使用体验的瓶颈，此时使用缓存往往是解决这一问题非常好的手段之一。Spring 3开始提供了强大的基于注解的缓存支持，可以通过注解配置方式低侵入的给原有Spring应用增加缓存功能，提高数据访问性能。<br>在Spring Boot中对于缓存的支持，提供了一系列的自动化配置，使我们可以非常方便的使用缓存。<br><a id="more"></a></p>
</blockquote>
<h2 id="缓存工具简单比较"><a href="#缓存工具简单比较" class="headerlink" title="缓存工具简单比较"></a>缓存工具简单比较</h2><p>实现缓存有多种方式：EhCache、MemCached、Redis等</p>
<ol>
<li>EhCache：纯Java进程内缓存框架，配置简单、结构清晰、功能强大。开始接触javaweb的时候，不管是使用hibernate还是mybatis，这个应该是最常见的缓存的工具；经常会用作二级缓存。百度百科上的特点：</li>
</ol>
<p><img src="http://oy09glbzm.bkt.clouddn.com/17-12-26/79766332.jpg" alt=""></p>
<ol>
<li>MemCached：一个自由开源的，高性能的分布式对象缓存；使用key-value存储系统。特点：    <ul>
<li>协议简单</li>
<li>基于libevent的事件处理</li>
<li>内置内存存储方式</li>
<li>memcached不互相通信的分布式</li>
</ul>
</li>
<li>Redis：NoSql数据库，不仅仅支持k/v存储，同时还提供list、set、hash的数据结构的存储。具体学习材料可以进官网，传送门：<a href="http://www.redis.cn/" target="_blank" rel="external">http://www.redis.cn/</a><h2 id="Redis缓存介绍"><a href="#Redis缓存介绍" class="headerlink" title="Redis缓存介绍"></a>Redis缓存介绍</h2>本文的项目主要是SpringBoot+mybatis+redis+mysql。使用redis做缓存可以有几种实现方式：</li>
<li>直接将redis作为mybatis的二级缓存；</li>
<li>通过注解方式给项目添加缓存；</li>
<li>手动调用jedis。这种方式不推荐。。。<h2 id="环境的搭建"><a href="#环境的搭建" class="headerlink" title="环境的搭建"></a>环境的搭建</h2>在SpringBoot中已经有对于缓存的支持，只需要做简单的配置添加即可。<br>pom.xml文件<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"> <span class="comment">&lt;!--redis--&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-data-redis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line"><span class="comment">&lt;!--缓存--&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-cache<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div></pre></td></tr></table></figure>
</li>
</ol>
<p>添加redis的配置,这列使用的是yml的配置<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"># redis配置</div><div class="line">  redis:</div><div class="line">    #数据库索引，默认为0</div><div class="line">    database: <span class="number">0</span></div><div class="line">    #服务器地址</div><div class="line">    host: localhost</div><div class="line">    #端口</div><div class="line">    port: <span class="number">6379</span></div><div class="line">    #密码（默认为空）</div><div class="line">    password:</div><div class="line">    pool:</div><div class="line">      #连接池最大连接数（使用负值表示没有限制）</div><div class="line">      max-active: <span class="number">8</span></div><div class="line">      #连接池最大阻塞等待时间（使用负值表示没有限制）</div><div class="line">      max-wait: -<span class="number">1</span></div><div class="line">      # 连接池中的最大空闲连接</div><div class="line">      max-idle: <span class="number">8</span></div><div class="line">      # 连接池中的最小空闲连接</div><div class="line">      min-idle: <span class="number">0</span></div><div class="line">    # 连接超时时间（毫秒）</div><div class="line">    timeout: <span class="number">5000</span></div></pre></td></tr></table></figure></p>
<h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><h3 id="使用注解配置缓存"><a href="#使用注解配置缓存" class="headerlink" title="使用注解配置缓存"></a>使用注解配置缓存</h3><p>这种方式比较简单，在相应的service中添加Cache注解就可以，项目代码，mybatis的配置文件以及mapper文件省略，<br>test实体类：这里使用了lombok的<code>@Data</code>注解<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Data</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> <span class="keyword">implements</span> <span class="title">Serializable</span></span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> String id;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> String name;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> String remake;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>service类：这里的注解使用就是在service类中使用<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Service</span></div><div class="line"><span class="meta">@CacheConfig</span>(cacheNames = <span class="string">"test"</span>)</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestService</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="meta">@Autowired</span></div><div class="line">    <span class="keyword">private</span> TestMapper testMapper;</div><div class="line"></div><div class="line">    <span class="meta">@Cacheable</span>(key = <span class="string">"#p0"</span>)</div><div class="line">    <span class="function"><span class="keyword">public</span> Test <span class="title">get</span><span class="params">(String id)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> testMapper.get(id);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@CachePut</span>(key = <span class="string">"#p0.id"</span>)</div><div class="line">    <span class="function"><span class="keyword">public</span> Test <span class="title">insert</span><span class="params">(Test test)</span> </span>&#123;</div><div class="line">        testMapper.insert(test);</div><div class="line">        <span class="keyword">return</span> test;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@CachePut</span>(key = <span class="string">"#p0.id"</span>)</div><div class="line">    <span class="function"><span class="keyword">public</span> Test <span class="title">update</span><span class="params">(Test test)</span> </span>&#123;</div><div class="line">        testMapper.update(test);</div><div class="line">        <span class="keyword">return</span> test;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>测试类：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@RunWith</span>(SpringRunner.class)</div><div class="line"><span class="meta">@SpringBootTest</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestServiceTest</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Logger logger = LoggerFactory.getLogger(TestServiceTest.class);</div><div class="line">    <span class="meta">@Autowired</span></div><div class="line">    <span class="keyword">private</span> TestService testService;</div><div class="line"></div><div class="line">    <span class="meta">@Test</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">get</span><span class="params">()</span> </span>&#123;</div><div class="line">        com.wqh.blog.domain.Test test = testService.get(<span class="string">"d8e875c8-9425-485b-9665-f5dda1e788bf"</span>);</div><div class="line">        logger.info(<span class="string">"======"</span>+test+<span class="string">"============="</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Test</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">insert</span><span class="params">()</span> </span>&#123;</div><div class="line">        com.wqh.blog.domain.Test test = <span class="keyword">new</span> com.wqh.blog.domain.Test();</div><div class="line">        test.setId(UUID.randomUUID().toString());</div><div class="line">        test.setName(<span class="string">"redis"</span>);</div><div class="line">        test.setRemake(<span class="string">"hhhhhhhhhhhhhhhhhhhhhhh"</span>);</div><div class="line">        testService.insert(test);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Test</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">update</span><span class="params">()</span> </span>&#123;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>首先运行，插入方法，然后使用RedisClient查看，可以发现已经有数据。然后调用get方法，控制台并没有打印sql语句，配置成功<br><img src="http://oy09glbzm.bkt.clouddn.com/17-12-26/36759880.jpg" alt=""></p>
<h4 id="Cache注解"><a href="#Cache注解" class="headerlink" title="Cache注解"></a>Cache注解</h4><p>这里直接引用程序员DD大神博客的内容：</p>
<ul>
<li><font color="red">@CacheConfig：</font>主要用于配置该类中会用到的一些共用的缓存配置。在这里@CacheConfig(cacheNames = “test”)：配置了该数据访问对象中返回的内容将存储于名为test的缓存对象中，我们也可以不使用该注解，直接通过@Cacheable自己配置缓存集的名字来定义。</li>
<li><font color="red">@Cacheable：</font>配置了get函数的返回值将被加入缓存。同时在查询时，会先从缓存中获取，若不存在才再发起对数据库的访问。该注解主要有下面几个参数：        <ul>
<li><font color="red">value、cacheNames：</font>两个等同的参数（cacheNames为Spring 4新增，作为value的别名），用于指定缓存存储的集合名。由于Spring 4中新增了@CacheConfig，因此在Spring 3中原本必须有的value属性，也成为非必需项了</li>
<li><font color="red">key：</font>缓存对象存储在Map集合中的key值，非必需，缺省按照函数的所有参数组合作为key值，若自己配置需使用SpEL表达式，比如：@Cacheable(key = “#p0”)：使用函数第一个参数作为缓存的key值，更多关于SpEL表达式的详细内容可参考官方文档</li>
<li><font color="red">condition：</font>缓存对象的条件，非必需，也需使用SpEL表达式，只有满足表达式条件的内容才会被缓存，比如：@Cacheable(key = “#p0”, condition = “#p0.length() &lt; 3”)，表示只有当第一个参数的长度小于3的时候才会被缓存，若做此配置上面的AAA用户就不会被缓存，读者可自行实验尝试。</li>
<li><font color="red">unless：</font>另外一个缓存条件参数，非必需，需使用SpEL表达式。它不同于condition参数的地方在于它的判断时机，该条件是在函数被调用之后才做判断的，所以它可以通过对result进行判断。</li>
<li><font color="red">keyGenerator：</font>用于指定key生成器，非必需。若需要指定一个自定义的key生成器，我们需要去实现org.springframework.cache.interceptor.KeyGenerator接口，并使用该参数来指定。需要注意的是：该参数与key是互斥的</li>
<li><font color="red">cacheManager：</font>用于指定使用哪个缓存管理器，非必需。只有当有多个时才需要使用</li>
<li><font color="red">cacheResolver：</font>用于指定使用那个缓存解析器，非必需。需通过org.springframework.cache.interceptor.CacheResolver接口来实现自己的缓存解析器，并用该参数指定。</li>
</ul>
</li>
<li><font color="red">@CachePut：</font>配置于函数上，能够根据参数定义条件来进行缓存，它与@Cacheable不同的是，它每次都会真是调用函数，所以主要用于数据新增和修改操作上。它的参数与@Cacheable类似，具体功能可参考上面对@Cacheable参数的解析</li>
<li><font color="red">@CacheEvict：</font>配置于函数上，通常用在删除方法上，用来从缓存中移除相应数据。除了同@Cacheable一样的参数之外，它还有下面两个参数：<ul>
<li><font color="red">allEntries：</font>非必需，默认为false。当为true时，会移除所有数据</li>
<li><font color="red">beforeInvocation：</font>非必需，默认为false，会在调用方法之后移除数据。当为true时，会在调用方法之前移除数据。</li>
</ul>
</li>
</ul>
<h3 id="使用redis做mybatis的二级缓存"><a href="#使用redis做mybatis的二级缓存" class="headerlink" title="使用redis做mybatis的二级缓存"></a>使用redis做mybatis的二级缓存</h3><p>在mybatis中有一级缓存、二级缓存</p>
<ol>
<li>一级缓存：该缓存是基于SqlSession的，mybatis默认开启一级缓存。</li>
<li>二级缓存：该缓存是Mapper级别的，默认没有开启二级缓存，需要在配置文件中开启：<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">&lt;!-- 开启二级缓存，默认是<span class="keyword">false</span> --&gt;</div><div class="line">&lt;setting name=<span class="string">"cacheEnabled"</span> value=<span class="string">"true"</span>/&gt;</div></pre></td></tr></table></figure>
</li>
</ol>
<p>依赖跟前面一样，使用redis做二级缓存，主要是要实现<code>org.apache.ibatis.cache</code>包下的<code>Cache</code>接口<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RedisCache</span> <span class="keyword">implements</span> <span class="title">Cache</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Logger logger = LoggerFactory.getLogger(RedisCache.class);</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="keyword">final</span> ReadWriteLock readWriteLock = <span class="keyword">new</span> ReentrantReadWriteLock();</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String id;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> RedisTemplate redisTemplate;</div><div class="line">    <span class="comment">/**</span></div><div class="line"><span class="comment">     *    redis过期时间</span></div><div class="line"><span class="comment">     */</span></div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> EXPIRE_TIME_IN_MINUTES = <span class="number">300</span>;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">RedisCache</span><span class="params">(String id)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (id == <span class="keyword">null</span>) &#123;</div><div class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"Cache instances require an ID"</span>);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">this</span>.id = id;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getId</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> id;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line"><span class="comment">     * Put query result to redis</span></div><div class="line"><span class="comment">     * TimeUnit.HOURS 设置时间的类型：时、分、秒、毫秒</span></div><div class="line"><span class="comment">     * <span class="doctag">@param</span> key</span></div><div class="line"><span class="comment">     * <span class="doctag">@param</span> value</span></div><div class="line"><span class="comment">     */</span></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">putObject</span><span class="params">(Object key, Object value)</span> </span>&#123;</div><div class="line">        RedisTemplate redisTemplate = getRedisTemplate();</div><div class="line">        ValueOperations opsForValue = redisTemplate.opsForValue();</div><div class="line">        opsForValue.set(key, value, EXPIRE_TIME_IN_MINUTES, TimeUnit.HOURS);</div><div class="line">        logger.debug(<span class="string">"Put query result to redis"</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line"><span class="comment">     * Get cached query result from redis</span></div><div class="line"><span class="comment">     *</span></div><div class="line"><span class="comment">     * <span class="doctag">@param</span> key</span></div><div class="line"><span class="comment">     * <span class="doctag">@return</span></span></div><div class="line"><span class="comment">     */</span></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">getObject</span><span class="params">(Object key)</span> </span>&#123;</div><div class="line">        RedisTemplate redisTemplate = getRedisTemplate();</div><div class="line">        ValueOperations opsForValue = redisTemplate.opsForValue();</div><div class="line">        logger.debug(<span class="string">"Get cached query result from redis"</span>);</div><div class="line">        Object o = opsForValue.get(key);</div><div class="line">        <span class="keyword">return</span> o;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line"><span class="comment">     * Remove cached query result from redis</span></div><div class="line"><span class="comment">     *</span></div><div class="line"><span class="comment">     * <span class="doctag">@param</span> key</span></div><div class="line"><span class="comment">     * <span class="doctag">@return</span></span></div><div class="line"><span class="comment">     */</span></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="meta">@SuppressWarnings</span>(<span class="string">"unchecked"</span>)</div><div class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">removeObject</span><span class="params">(Object key)</span> </span>&#123;</div><div class="line">        RedisTemplate redisTemplate = getRedisTemplate();</div><div class="line">        redisTemplate.delete(key);</div><div class="line">        logger.debug(<span class="string">"Remove cached query result from redis"</span>);</div><div class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line"><span class="comment">     * Clears this cache instance</span></div><div class="line"><span class="comment">     */</span></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">clear</span><span class="params">()</span> </span>&#123;</div><div class="line">        RedisTemplate redisTemplate = getRedisTemplate();</div><div class="line">        redisTemplate.execute((RedisCallback) connection -&gt; &#123;</div><div class="line">            connection.flushDb();</div><div class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">        &#125;);</div><div class="line">        logger.debug(<span class="string">"Clear all the cached query result from redis"</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line"><span class="comment">     * This method is not used</span></div><div class="line"><span class="comment">     *</span></div><div class="line"><span class="comment">     * <span class="doctag">@return</span></span></div><div class="line"><span class="comment">     */</span></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getSize</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> ReadWriteLock <span class="title">getReadWriteLock</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> readWriteLock;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> RedisTemplate <span class="title">getRedisTemplate</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (redisTemplate == <span class="keyword">null</span>) &#123;</div><div class="line">            redisTemplate = SpringContextHolder.getBean(<span class="string">"cacheRedisTemplate"</span>);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> redisTemplate;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>自定义一个序列化接口<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RedisObjectSerializer</span> <span class="keyword">implements</span> <span class="title">RedisSerializer</span>&lt;<span class="title">Object</span>&gt; </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> Converter&lt;Object, <span class="keyword">byte</span>[]&gt; serializer = <span class="keyword">new</span> SerializingConverter();</div><div class="line">    <span class="keyword">private</span> Converter&lt;<span class="keyword">byte</span>[], Object&gt; deserializer = <span class="keyword">new</span> DeserializingConverter();</div><div class="line"></div><div class="line">    <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">byte</span>[] EMPTY_ARRAY = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">0</span>];</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="keyword">public</span> <span class="keyword">byte</span>[] serialize(Object object) <span class="keyword">throws</span> SerializationException &#123;</div><div class="line">        <span class="keyword">if</span> (object == <span class="keyword">null</span>) &#123;</div><div class="line">            <span class="keyword">return</span> EMPTY_ARRAY;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            <span class="keyword">return</span> serializer.convert(object);</div><div class="line">        &#125; <span class="keyword">catch</span> (Exception ex) &#123;</div><div class="line">            <span class="keyword">return</span> EMPTY_ARRAY;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">deserialize</span><span class="params">(<span class="keyword">byte</span>[] bytes)</span> <span class="keyword">throws</span> SerializationException </span>&#123;</div><div class="line">        <span class="keyword">if</span> (isEmpty(bytes)) &#123;</div><div class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            <span class="keyword">return</span> deserializer.convert(bytes);</div><div class="line">        &#125; <span class="keyword">catch</span> (Exception ex) &#123;</div><div class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> SerializationException(<span class="string">"Cannot deserialize"</span>, ex);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">isEmpty</span><span class="params">(<span class="keyword">byte</span>[] data)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> (data == <span class="keyword">null</span> || data.length == <span class="number">0</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>redis的配置类<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Configuration</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RedisConfig</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="meta">@Bean</span></div><div class="line">    <span class="function"><span class="keyword">public</span> JedisConnectionFactory <span class="title">jedisConnectionFactory</span><span class="params">()</span></span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> JedisConnectionFactory();</div><div class="line">    &#125;</div><div class="line"></div><div class="line"></div><div class="line">    <span class="meta">@Bean</span></div><div class="line">    <span class="function"><span class="keyword">public</span> RedisTemplate&lt;String,Object&gt; <span class="title">cacheRedisTemplate</span><span class="params">(RedisConnectionFactory redisConnectionFactory)</span></span>&#123;</div><div class="line">        RedisTemplate&lt;String,Object&gt; redisTemplate = <span class="keyword">new</span> RedisTemplate&lt;&gt;();</div><div class="line">        redisTemplate.setConnectionFactory(redisConnectionFactory);</div><div class="line"></div><div class="line"></div><div class="line">        Jackson2JsonRedisSerializer&lt;Object&gt; jackson2JsonRedisSerializer = <span class="keyword">new</span> Jackson2JsonRedisSerializer&lt;Object&gt;(Object.class);</div><div class="line">        ObjectMapper om = <span class="keyword">new</span> ObjectMapper();</div><div class="line">        om.setVisibility(PropertyAccessor.ALL, JsonAutoDetect.Visibility.ANY);</div><div class="line">        om.enableDefaultTyping(ObjectMapper.DefaultTyping.NON_FINAL);</div><div class="line">        jackson2JsonRedisSerializer.setObjectMapper(om);</div><div class="line"></div><div class="line">        <span class="comment">// 设置值（value）的序列化采用自定义的RedisObjectSerializer</span></div><div class="line">        redisTemplate.setValueSerializer(<span class="keyword">new</span> RedisObjectSerializer());</div><div class="line">        <span class="comment">// 设置键（key）的序列化采用jackson2JsonRedisSerializer</span></div><div class="line">        redisTemplate.setKeySerializer(jackson2JsonRedisSerializer);</div><div class="line"></div><div class="line">        redisTemplate.afterPropertiesSet();</div><div class="line">        <span class="keyword">return</span> redisTemplate;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>前面已经开启了二级缓存，现在需要修改Mapper.xml文件<br><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">&lt;!--表示开启基于redis的二级缓存--&gt;</div><div class="line">  &lt;cache type=<span class="string">"com.wqh.blog.config.cache.RedisCache"</span>&gt;</div><div class="line">      &lt;property name=<span class="string">"eviction"</span> value=<span class="string">"LRU"</span> /&gt;</div><div class="line">      &lt;property name=<span class="string">"flushInterval"</span> value=<span class="string">"6000000"</span> /&gt;</div><div class="line">      &lt;property name=<span class="string">"size"</span> value=<span class="string">"1024"</span> /&gt;</div><div class="line">      &lt;property name=<span class="string">"readOnly"</span> value=<span class="string">"false"</span> /&gt;</div><div class="line">  &lt;/cache&gt;</div></pre></td></tr></table></figure></p>
<p>另外在插入、修改和删除时需要添加<code>flushCache=&quot;true&quot;</code>。<br>缓存添加成功的话，使用RedisClient可以查看：<br><img src="http://oy09glbzm.bkt.clouddn.com/17-12-27/38131953.jpg" alt=""></p>
<h3 id="手动将数据添加到redis"><a href="#手动将数据添加到redis" class="headerlink" title="手动将数据添加到redis"></a>手动将数据添加到redis</h3><p>在上面的RedisConfig类中添加方法，比如我这里要将Test对象保存到redis:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Bean</span></div><div class="line">  <span class="function"><span class="keyword">public</span> RedisTemplate&lt;String,Test&gt; <span class="title">testRedisTemplate</span><span class="params">(RedisConnectionFactory redisConnectionFactory)</span></span>&#123;</div><div class="line">      RedisTemplate&lt;String,Test&gt; template = <span class="keyword">new</span> RedisTemplate&lt;String,Test&gt;();</div><div class="line">      template.setConnectionFactory(redisConnectionFactory);</div><div class="line">      <span class="comment">//直接使用Jedis提供的StringRedisSerializer</span></div><div class="line">      template.setKeySerializer(<span class="keyword">new</span> StringRedisSerializer());</div><div class="line"></div><div class="line">      Jackson2JsonRedisSerializer&lt;Test&gt; jackson2JsonRedisSerializer = <span class="keyword">new</span> Jackson2JsonRedisSerializer&lt;Test&gt;(Test.class);</div><div class="line">      ObjectMapper om = <span class="keyword">new</span> ObjectMapper();</div><div class="line">      om.setVisibility(PropertyAccessor.ALL, JsonAutoDetect.Visibility.ANY);</div><div class="line">      om.enableDefaultTyping(ObjectMapper.DefaultTyping.NON_FINAL);</div><div class="line">      jackson2JsonRedisSerializer.setObjectMapper(om);</div><div class="line"></div><div class="line">      <span class="comment">//使用jackson2JsonRedisSerializer序列化value</span></div><div class="line">      template.setValueSerializer(jackson2JsonRedisSerializer);</div><div class="line">      <span class="keyword">return</span> template;</div><div class="line">  &#125;</div></pre></td></tr></table></figure></p>
<p>测试类<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Autowired</span></div><div class="line"><span class="keyword">private</span> RedisTemplate&lt;String, com.wqh.blog.domain.Test&gt; testRedisTemplate;</div><div class="line"></div><div class="line"><span class="meta">@Test</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testRedis</span><span class="params">()</span> <span class="keyword">throws</span> Exception</span>&#123;</div><div class="line">	com.wqh.blog.domain.Test test = <span class="keyword">new</span> com.wqh.blog.domain.Test();</div><div class="line">	test.setId(UUID.randomUUID().toString());</div><div class="line">	test.setName(<span class="string">"redis"</span>);</div><div class="line">	test.setRemake(<span class="string">"hhhhhhhhhhhhhhhhhhhhhhh"</span>);</div><div class="line">	testRedisTemplate.opsForValue().set(test.getId(),test);</div><div class="line">	Assert.assertEquals(<span class="string">"redis"</span>,testRedisTemplate.opsForValue().get(test.getId()).getName());</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><p>前面使用注解方式添加缓存的功能，如果使用RedisClient查看数据的话，会发现数出现乱码现象，这主要是序列化问题。解决办法只要自定义一个redisTemplate的bean<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Bean</span></div><div class="line"><span class="function"><span class="keyword">public</span> RedisTemplate&lt;Object, Object&gt; <span class="title">redisTemplate</span><span class="params">()</span> </span>&#123;</div><div class="line">    RedisTemplate&lt;Object, Object&gt; redisTemplate = <span class="keyword">new</span> RedisTemplate&lt;&gt;();</div><div class="line">    redisTemplate.setConnectionFactory(jedisConnectionFactory());</div><div class="line">    <span class="comment">//key序列化方式,但是如果方法上有Long等非String类型的话，会报类型转换错误</span></div><div class="line">    <span class="comment">//Long类型不可以会出现异常信息;</span></div><div class="line">    RedisSerializer&lt;String&gt; redisSerializer = <span class="keyword">new</span> StringRedisSerializer();</div><div class="line">    redisTemplate.setKeySerializer(redisSerializer);</div><div class="line">    Jackson2JsonRedisSerializer jackson2JsonRedisSerializer = <span class="keyword">new</span> Jackson2JsonRedisSerializer(Object.class);</div><div class="line">    ObjectMapper om = <span class="keyword">new</span> ObjectMapper();</div><div class="line">    om.setVisibility(PropertyAccessor.ALL, JsonAutoDetect.Visibility.ANY);</div><div class="line">    om.enableDefaultTyping(ObjectMapper.DefaultTyping.NON_FINAL);</div><div class="line">    jackson2JsonRedisSerializer.setObjectMapper(om);</div><div class="line"></div><div class="line">    redisTemplate.setValueSerializer(jackson2JsonRedisSerializer);</div><div class="line">    redisTemplate.setHashValueSerializer(jackson2JsonRedisSerializer);</div><div class="line">    redisTemplate.afterPropertiesSet();</div><div class="line"></div><div class="line">    <span class="keyword">return</span> redisTemplate;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<hr>
<p>参考：</p>
<ul>
<li><p><a href="http://blog.didispace.com/springbootcache1/" target="_blank" rel="external">Spring Boot中的缓存支持（一）注解配置与EhCache使用</a></p>
</li>
<li><p><a href="http://blog.csdn.net/tianyaleixiaowu/article/details/70595073" target="_blank" rel="external">Springboot中使用redis，配置redis的key value生成策略</a></p>
</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;随着时间的积累，应用的使用用户不断增加，数据规模也越来越大，往往数据库查询操作会成为影响用户使用体验的瓶颈，此时使用缓存往往是解决这一问题非常好的手段之一。Spring 3开始提供了强大的基于注解的缓存支持，可以通过注解配置方式低侵入的给原有Spring应用增加缓存功能，提高数据访问性能。&lt;br&gt;在Spring Boot中对于缓存的支持，提供了一系列的自动化配置，使我们可以非常方便的使用缓存。&lt;br&gt;
    
    </summary>
    
      <category term="SpringBoot" scheme="http://www.wanqhblog.top/categories/SpringBoot/"/>
    
    
      <category term="SpringBoot" scheme="http://www.wanqhblog.top/tags/SpringBoot/"/>
    
      <category term="Redis" scheme="http://www.wanqhblog.top/tags/Redis/"/>
    
  </entry>
  
  <entry>
    <title>CentOS下Nginx的配置安装</title>
    <link href="http://www.wanqhblog.top/2017/11/25/CentOS%E4%B8%8BNginx%E7%9A%84%E9%85%8D%E7%BD%AE%E5%AE%89%E8%A3%85/"/>
    <id>http://www.wanqhblog.top/2017/11/25/CentOS下Nginx的配置安装/</id>
    <published>2017-11-25T01:15:26.000Z</published>
    <updated>2017-12-29T02:49:51.302Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>Nginx(“engine x”)是一款是由俄罗斯的程序设计师Igor Sysoev所开发高性能的 Web和 反向代理 服务器，也是一个 IMAP/POP3/SMTP 代理服务器。在高连接并发的情况下，Nginx是Apache服务器不错的替代品。<br>NGINX是一个免费的开源高性能的HTTP服务器和反向代理，以及一个IMAP / POP3代理服务器。NGINX以其高性能，稳定性，丰富的功能集，简单的配置和低资源消耗而闻名。<br>NGINX是为解决C10K问题而编写的一些服务器之一。与传统的服务器不同，NGINX不依赖线程来处理请求。相反，它使用了一个更具可扩展性的事件驱动（异步）体系结构。这种体系结构使用很小但更重要的是，在负载下可预测的内存量。即使您不希望同时处理数千个请求，您仍然可以从NGINX的高性能和小内存占用中受益。NGINX在所有方向都可以扩展：从最小的VPS一直到大型的服务器集群。<a id="more"></a></p>
<h2 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h2><p>nginx使用编译安装，所以需要确定系统已经安装编译工具以及库文件<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">yum -y install make zlib zlib-devel gcc-c++ libtool  openssl openssl-devel</div></pre></td></tr></table></figure></p>
</blockquote>
<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><h3 id="安装PCRE"><a href="#安装PCRE" class="headerlink" title="安装PCRE"></a>安装PCRE</h3><p>PCRE的作用是使nginx支持Rewrite功能。<a href="https://sourceforge.net/projects/pcre/files/" target="_blank" rel="external">https://sourceforge.net/projects/pcre/files/</a></p>
<ol>
<li><p>下载，保存目录<code>/usr/local/nginx</code></p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">[root@localhost nginx]# wget https://sourceforge.net/projects/pcre/files/pcre/8.41/pcre-8.41.tar.gz</div></pre></td></tr></table></figure>
</li>
<li><p>解压，解压之后进入目录</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">[root@localhost nginx]# tar -zvxf pcre-8.41.tar.gz </div><div class="line"></div><div class="line">[root@localhost nginx]# cd pcre-8.41/</div></pre></td></tr></table></figure>
</li>
<li><p>编译安装</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">[root@localhost pcre2-10.30]# ./configure </div><div class="line">[root@localhost pcre2-10.30]# make</div><div class="line">[root@localhost pcre2-10.30]# make install</div></pre></td></tr></table></figure>
</li>
<li><p>查看版本<br><img src="http://oy09glbzm.bkt.clouddn.com/17-12-29/3951804.jpg" alt=""></p>
<h3 id="安装nginx"><a href="#安装nginx" class="headerlink" title="安装nginx"></a>安装nginx</h3><p>如果nginx还需支持SSL则还需要安装http_ssl_module模块，这里就不介绍了。<br>下载，<a href="http://nginx.org/download/" target="_blank" rel="external">http://nginx.org/download/</a>选择对应的版本，这里使用1.9.0</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">[root@localhost nginx]# wget http://nginx.org/download/nginx-1.9.0.tar.gz</div></pre></td></tr></table></figure>
</li>
</ol>
<p>下载完成后，同样是要解压编译安装.<br><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">[root@localhost nginx]# tar -zvxf nginx-1.9.0.tar.gz </div><div class="line">[root@localhost nginx]# cd nginx-1.9.0/</div><div class="line">[root@localhost nginx-1.9.0]# ./configure --prefix=/usr/local/webserver/nginx --with-http_stub_status_module --with-pcre=/usr/local/nginx/pcre-8.41</div><div class="line">[root@localhost nginx-1.9.0]# make</div><div class="line">[root@localhost nginx-1.9.0]# make install</div></pre></td></tr></table></figure></p>
<p>查看nginx版本<br><img src="http://oy09glbzm.bkt.clouddn.com/17-12-29/14426767.jpg" alt=""><br>配置文件路径：<code>/usr/local/webserver/nginx/conf/nginx.conf</code>，使用vim编辑配置文件，添加location：</p>
<p><img src="http://oy09glbzm.bkt.clouddn.com/17-12-29/30992423.jpg?imageView2/0/q/75|watermark/2/text/d2FucWhibG9nLnRvcA==/font/5a6L5L2T/fontsize/300/fill/IzJDMUJFRQ==/dissolve/100/gravity/SouthEast/dx/10/dy/10" alt=""></p>
<h3 id="启动测试"><a href="#启动测试" class="headerlink" title="启动测试"></a>启动测试</h3><p>在测试之前先运行一个tomcat服务器，使用8080端口：<br><img src="http://oy09glbzm.bkt.clouddn.com/17-12-29/92166265.jpg?imageView2/0/q/75|watermark/2/text/d2FucWhibG9nLnRvcA==/font/5a6L5L2T/fontsize/300/fill/IzJDMUJFRQ==/dissolve/100/gravity/SouthEast/dx/10/dy/10" alt=""><br>然后启动nginx服务器：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">[root@localhost apache-tomcat-8.0.48]# /usr/local/webserver/nginx/sbin/nginx</div></pre></td></tr></table></figure></p>
<p><img src="http://oy09glbzm.bkt.clouddn.com/17-12-29/85044529.jpg?imageView2/0/q/75|watermark/2/text/d2FucWhibG9nLnRvcA==/font/5a6L5L2T/fontsize/300/fill/IzJDMUJFRQ==/dissolve/100/gravity/SouthEast/dx/10/dy/10" alt=""><br>上面我们配置了转发<code>/test</code>:</p>
<p><img src="http://oy09glbzm.bkt.clouddn.com/17-12-29/95715631.jpg?imageView2/0/q/75|watermark/2/text/d2FucWhibG9nLnRvcA==/font/5a6L5L2T/fontsize/300/fill/IzJDMUJFRQ==/dissolve/100/gravity/SouthEast/dx/10/dy/10" alt=""></p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;Nginx(“engine x”)是一款是由俄罗斯的程序设计师Igor Sysoev所开发高性能的 Web和 反向代理 服务器，也是一个 IMAP/POP3/SMTP 代理服务器。在高连接并发的情况下，Nginx是Apache服务器不错的替代品。&lt;br&gt;NGINX是一个免费的开源高性能的HTTP服务器和反向代理，以及一个IMAP / POP3代理服务器。NGINX以其高性能，稳定性，丰富的功能集，简单的配置和低资源消耗而闻名。&lt;br&gt;NGINX是为解决C10K问题而编写的一些服务器之一。与传统的服务器不同，NGINX不依赖线程来处理请求。相反，它使用了一个更具可扩展性的事件驱动（异步）体系结构。这种体系结构使用很小但更重要的是，在负载下可预测的内存量。即使您不希望同时处理数千个请求，您仍然可以从NGINX的高性能和小内存占用中受益。NGINX在所有方向都可以扩展：从最小的VPS一直到大型的服务器集群。
    
    </summary>
    
      <category term="Nginx" scheme="http://www.wanqhblog.top/categories/Nginx/"/>
    
    
      <category term="CentOS" scheme="http://www.wanqhblog.top/tags/CentOS/"/>
    
      <category term="Nginx" scheme="http://www.wanqhblog.top/tags/Nginx/"/>
    
  </entry>
  
  <entry>
    <title>SpringMVC使用websocket做消息推送</title>
    <link href="http://www.wanqhblog.top/2017/11/22/websocket/"/>
    <id>http://www.wanqhblog.top/2017/11/22/websocket/</id>
    <published>2017-11-22T12:13:57.000Z</published>
    <updated>2017-11-22T13:06:57.226Z</updated>
    
    <content type="html"><![CDATA[<h2 id="WebSocket"><a href="#WebSocket" class="headerlink" title="WebSocket"></a>WebSocket</h2><blockquote>
<p>WebSocket协议支持（在受控环境中运行不受信任的代码的）客户端与（选择加入该代码的通信的）远程主机之间进行全双工通信。用于此的安全模型是Web浏览器常用的基于原始的安全模式。 协议包括一个开放的握手以及随后的TCP层上的消息帧。 该技术的目标是为基于浏览器的、需要和服务器进行双向通信的（服务器不能依赖于打开多个HTTP连接（例如，使用XMLHttpRequest或<code>&lt;</code>iframe&gt;和长轮询））应用程序提供一种通信机制。</p>
</blockquote>
<h2 id="socket消息推送流程"><a href="#socket消息推送流程" class="headerlink" title="socket消息推送流程"></a>socket消息推送流程</h2><ol>
<li>后台创建socket服务<a id="more"></a>；</li>
<li>用户登录后与后台建立socket连接，默认使用websocket，如果浏览器不支持则使用scokjs连接；</li>
<li>建立连接后，服务端可以向用户推送信息；</li>
</ol>
<p>javaweb中，socket的实现方式有多种，这里使用Spring-webscoket的方式实现。</p>
<h2 id="demo"><a href="#demo" class="headerlink" title="demo"></a>demo</h2><h3 id="搭建环境"><a href="#搭建环境" class="headerlink" title="搭建环境"></a>搭建环境</h3><p>在SpringMVC的项目基础上，导入websocket的相关jar包。<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-websocket<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.1.9.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-messaging<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.1.9.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div></pre></td></tr></table></figure></p>
<h3 id="websocket服务端实现类"><a href="#websocket服务端实现类" class="headerlink" title="websocket服务端实现类"></a>websocket服务端实现类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="meta">@Configuration</span></div><div class="line"><span class="meta">@EnableWebMvc</span></div><div class="line"><span class="meta">@EnableWebSocket</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WebSocketConfig</span> <span class="keyword">extends</span> <span class="title">WebMvcConfigurerAdapter</span> <span class="keyword">implements</span> <span class="title">WebSocketConfigurer</span></span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Logger logger = LoggerFactory.getLogger(WebSocketConfig.class);</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">registerWebSocketHandlers</span><span class="params">(WebSocketHandlerRegistry registry)</span> </span>&#123;</div><div class="line">        System.out.println(<span class="string">"==========================注册socket"</span>);</div><div class="line">        <span class="comment">//注册websocket server实现类，"/webSocketServer"访问websocket的地址</span></div><div class="line">        registry.addHandler(msgSocketHandle(),</div><div class="line">                <span class="string">"/webSocketServer"</span>).</div><div class="line">                addInterceptors(<span class="keyword">new</span> WebSocketHandshakeInterceptor());</div><div class="line">        <span class="comment">//使用socketjs的注册方法</span></div><div class="line">        registry.addHandler(msgSocketHandle(),</div><div class="line">                <span class="string">"/sockjs/webSocketServer"</span>).</div><div class="line">                addInterceptors(<span class="keyword">new</span> WebSocketHandshakeInterceptor())</div><div class="line">                .withSockJS();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">	 <span class="comment">/**</span></div><div class="line"><span class="comment">     *</span></div><div class="line"><span class="comment">     * <span class="doctag">@return</span> 消息发送的Bean</span></div><div class="line"><span class="comment">     */</span></div><div class="line">    <span class="meta">@Bean</span>(name = <span class="string">"msgSocketHandle"</span>)</div><div class="line">    <span class="function"><span class="keyword">public</span> WebSocketHandler <span class="title">msgSocketHandle</span><span class="params">()</span></span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> MsgScoketHandle();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这里使用的config配置的形式注册bean和配置，所以需要在SpringMVC的配置文件中添加对类的自动扫描<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">mvc:annotation-driven</span> /&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">"com.wqh.websocket"</span>/&gt;</span></div></pre></td></tr></table></figure></p>
<h3 id="拦截器类"><a href="#拦截器类" class="headerlink" title="拦截器类"></a>拦截器类</h3><p>主要是获取到当前连接的用户，并把用户保存到WebSocketSession中<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WebSocketHandshakeInterceptor</span> <span class="keyword">implements</span> <span class="title">HandshakeInterceptor</span> </span>&#123;</div><div class="line">   <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Logger logger = LoggerFactory.getLogger(WebSocketHandshakeInterceptor.class);</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line"><span class="comment">     * 握手前</span></div><div class="line"><span class="comment">     * <span class="doctag">@param</span> request</span></div><div class="line"><span class="comment">     * <span class="doctag">@param</span> response</span></div><div class="line"><span class="comment">     * <span class="doctag">@param</span> webSocketHandler</span></div><div class="line"><span class="comment">     * <span class="doctag">@param</span> attributes</span></div><div class="line"><span class="comment">     * <span class="doctag">@return</span></span></div><div class="line"><span class="comment">     * <span class="doctag">@throws</span> Exception</span></div><div class="line"><span class="comment">     */</span></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">beforeHandshake</span><span class="params">(ServerHttpRequest request, ServerHttpResponse response, WebSocketHandler webSocketHandler, Map&lt;String, Object&gt; attributes)</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">        logger.info(<span class="string">"握手操作"</span>);</div><div class="line">        <span class="keyword">if</span> (request <span class="keyword">instanceof</span> ServletServerHttpRequest)&#123;</div><div class="line">           ServletServerHttpRequest servletServerHttpRequest = (ServletServerHttpRequest) request;</div><div class="line">           HttpSession session = servletServerHttpRequest.getServletRequest().getSession(<span class="keyword">false</span>);</div><div class="line">           <span class="keyword">if</span>(session != <span class="keyword">null</span>)&#123;</div><div class="line">           		<span class="comment">//从session中获取当前用户</span></div><div class="line">               User user = (User) session.getAttribute(<span class="string">"user"</span>);</div><div class="line">               attributes.put(<span class="string">"user"</span>,user);</div><div class="line">           &#125;</div><div class="line">       &#125;</div><div class="line"></div><div class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line"><span class="comment">     * 握手后</span></div><div class="line"><span class="comment">     * <span class="doctag">@param</span> serverHttpRequest</span></div><div class="line"><span class="comment">     * <span class="doctag">@param</span> serverHttpResponse</span></div><div class="line"><span class="comment">     * <span class="doctag">@param</span> webSocketHandler</span></div><div class="line"><span class="comment">     * <span class="doctag">@param</span> e</span></div><div class="line"><span class="comment">     */</span></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">afterHandshake</span><span class="params">(ServerHttpRequest serverHttpRequest, ServerHttpResponse serverHttpResponse, WebSocketHandler webSocketHandler, Exception e)</span> </span>&#123;</div><div class="line"></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="socket处理消息类"><a href="#socket处理消息类" class="headerlink" title="socket处理消息类"></a>socket处理消息类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Component</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MsgScoketHandle</span> <span class="keyword">implements</span> <span class="title">WebSocketHandler</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="comment">/**已经连接的用户*/</span></div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> ArrayList&lt;WebSocketSession&gt; users;</div><div class="line"></div><div class="line">    <span class="keyword">static</span> &#123;</div><div class="line">    	<span class="comment">//保存当前连接用户</span></div><div class="line">        users = Lists.newArrayList();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line"><span class="comment">     * 建立链接</span></div><div class="line"><span class="comment">     * <span class="doctag">@param</span> webSocketSession</span></div><div class="line"><span class="comment">     * <span class="doctag">@throws</span> Exception</span></div><div class="line"><span class="comment">     */</span></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">afterConnectionEstablished</span><span class="params">(WebSocketSession webSocketSession)</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">        <span class="comment">//将用户信息添加到list中</span></div><div class="line">        users.add(webSocketSession);</div><div class="line">        System.out.println(<span class="string">"=====================建立连接成功=========================="</span>);</div><div class="line">        User user  = (User) webSocketSession.getAttributes().get(<span class="string">"user"</span>);</div><div class="line">        <span class="keyword">if</span>(user != <span class="keyword">null</span>)&#123;</div><div class="line">            System.out.println(<span class="string">"当前连接用户======"</span>+user.getName());</div><div class="line">        &#125;</div><div class="line">        System.out.println(<span class="string">"webSocket连接数量====="</span>+users.size());</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line"><span class="comment">     * 接收消息</span></div><div class="line"><span class="comment">     * <span class="doctag">@param</span> webSocketSession</span></div><div class="line"><span class="comment">     * <span class="doctag">@param</span> webSocketMessage</span></div><div class="line"><span class="comment">     * <span class="doctag">@throws</span> Exception</span></div><div class="line"><span class="comment">     */</span></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleMessage</span><span class="params">(WebSocketSession webSocketSession, WebSocketMessage&lt;?&gt; webSocketMessage)</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">        User user = (User) webSocketSession.getAttributes().get(<span class="string">"user"</span>);</div><div class="line">        System.out.println(<span class="string">"收到用户:"</span>+user.getName()+<span class="string">"的消息"</span>);</div><div class="line">        System.out.println(webSocketMessage.getPayload().toString());</div><div class="line">        System.out.println(<span class="string">"==========================================="</span>);</div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line"><span class="comment">     * 异常处理</span></div><div class="line"><span class="comment">     * <span class="doctag">@param</span> webSocketSession</span></div><div class="line"><span class="comment">     * <span class="doctag">@param</span> throwable</span></div><div class="line"><span class="comment">     * <span class="doctag">@throws</span> Exception</span></div><div class="line"><span class="comment">     */</span></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleTransportError</span><span class="params">(WebSocketSession webSocketSession, Throwable throwable)</span></span>&#123;</div><div class="line">        <span class="keyword">if</span> (webSocketSession.isOpen())&#123;</div><div class="line">            <span class="comment">//关闭session</span></div><div class="line">            <span class="keyword">try</span> &#123;</div><div class="line">                webSocketSession.close();</div><div class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="comment">//移除用户</span></div><div class="line">        users.remove(webSocketSession);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line"><span class="comment">     * 断开链接</span></div><div class="line"><span class="comment">     * <span class="doctag">@param</span> webSocketSession</span></div><div class="line"><span class="comment">     * <span class="doctag">@param</span> closeStatus</span></div><div class="line"><span class="comment">     * <span class="doctag">@throws</span> Exception</span></div><div class="line"><span class="comment">     */</span></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">afterConnectionClosed</span><span class="params">(WebSocketSession webSocketSession, CloseStatus closeStatus)</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">        users.remove(webSocketSession);</div><div class="line">        User user = (User) webSocketSession.getAttributes().get(<span class="string">"user"</span>);</div><div class="line">        System.out.println(user.getName()+<span class="string">"断开连接"</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">supportsPartialMessages</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line"><span class="comment">     * 发送消息给指定的用户</span></div><div class="line"><span class="comment">     * <span class="doctag">@param</span> user</span></div><div class="line"><span class="comment">     * <span class="doctag">@param</span> messageInfo</span></div><div class="line"><span class="comment">     */</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sendMessageToUser</span><span class="params">(User user, TextMessage messageInfo)</span></span>&#123;</div><div class="line">        <span class="keyword">for</span> (WebSocketSession session : users) &#123;</div><div class="line">            User sessionUser = (User) session.getAttributes().get(<span class="string">"user"</span>);</div><div class="line">            <span class="comment">//根据用户名去判断用户接收消息的用户</span></div><div class="line">            <span class="keyword">if</span>(user.getName().equals(sessionUser.getName()))&#123;</div><div class="line">                <span class="keyword">try</span> &#123;</div><div class="line">                    <span class="keyword">if</span> (session.isOpen())&#123;</div><div class="line">                        session.sendMessage(messageInfo);</div><div class="line">                        System.out.println(<span class="string">"发送消息给："</span>+user.getName()+<span class="string">"内容："</span>+messageInfo);</div><div class="line">                    &#125;</div><div class="line">                    <span class="keyword">break</span>;</div><div class="line">                &#125; <span class="keyword">catch</span> (IOException e) &#123;</div><div class="line">                    e.printStackTrace();</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="controller及页面"><a href="#controller及页面" class="headerlink" title="controller及页面"></a>controller及页面</h3><p>这里简单的模拟登录，前台传入登录参数，直接将参数保存到session中。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@RequestMapping</span>(<span class="string">"websocket"</span>)</div><div class="line"><span class="meta">@Controller</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserController</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="meta">@Autowired</span></div><div class="line">    <span class="keyword">private</span> MsgScoketHandle msgScoketHandle;</div><div class="line"></div><div class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"login"</span>)</div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">login</span><span class="params">(User user, HttpServletRequest request)</span></span>&#123;</div><div class="line">        user.setId(UUID.randomUUID().toString().replace(<span class="string">"-"</span>,<span class="string">""</span>));</div><div class="line">        request.getSession().setAttribute(<span class="string">"user"</span>,user);</div><div class="line">        <span class="keyword">return</span> <span class="string">"/index"</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@ResponseBody</span></div><div class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"sendMsg"</span>)</div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">sendMag</span><span class="params">(String content,String toUserName)</span></span>&#123;</div><div class="line">        User user = <span class="keyword">new</span> User();</div><div class="line">        user.setName(toUserName);</div><div class="line">        TextMessage textMessage = <span class="keyword">new</span> TextMessage(content);</div><div class="line">        msgScoketHandle.sendMessageToUser(user,textMessage);</div><div class="line">        <span class="keyword">return</span> <span class="string">"200"</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>登录页面省略，直接socket连接页面，这里使用<code>sockjs</code>来创建连接，所以需要先添加js文件<br><a href="https://raw.githubusercontent.com/sockjs/sockjs-client/master/dist/sockjs.min.js" target="_blank" rel="external">sockjs.min.js</a><br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></div><div class="line"><span class="undefined">    $(document).ready(function() &#123;</span></div><div class="line"><span class="undefined">        var ws;</span></div><div class="line"><span class="undefined">        if ('WebSocket' in window) &#123;</span></div><div class="line"><span class="undefined">            ws = new WebSocket("ws://"+window.location.host+"/webSocketServer");</span></div><div class="line"><span class="undefined">        &#125; else if ('MozWebSocket' in window) &#123;</span></div><div class="line"><span class="undefined">            ws = new MozWebSocket("ws://"+window.location.host+"/webSocketServer");</span></div><div class="line"><span class="undefined">        &#125; else &#123;</span></div><div class="line"><span class="undefined">            //如果是低版本的浏览器，则用SockJS这个对象，对应了后台“sockjs/webSocketServer”这个注册器，</span></div><div class="line"><span class="undefined">            //它就是用来兼容低版本浏览器的</span></div><div class="line"><span class="undefined">            ws = new SockJS("http://"+window.location.host+"/sockjs/webSocketServer");</span></div><div class="line"><span class="undefined">        &#125;</span></div><div class="line"><span class="undefined">        ws.onopen = function (evnt) &#123;</span></div><div class="line"><span class="undefined">        &#125;;</span></div><div class="line"><span class="undefined">        //接收到消息</span></div><div class="line"><span class="undefined">        ws.onmessage = function (evnt) &#123;</span></div><div class="line"><span class="undefined">            alert(evnt.data);</span></div><div class="line"><span class="undefined">            $("#msg").html(evnt.data);</span></div><div class="line"><span class="undefined">        &#125;;</span></div><div class="line"><span class="undefined">        ws.onerror = function (evnt) &#123;</span></div><div class="line"><span class="undefined">            console.log(evnt)</span></div><div class="line"><span class="undefined">        &#125;;</span></div><div class="line"><span class="undefined">        ws.onclose = function (evnt) &#123;</span></div><div class="line"><span class="undefined">        &#125;</span></div><div class="line"><span class="undefined"></span></div><div class="line"><span class="undefined">        $("#btn1").click(function () &#123;</span></div><div class="line"><span class="undefined"></span></div><div class="line"><span class="undefined">            ws.send($("#text").val());</span></div><div class="line"><span class="undefined">        &#125;);</span></div><div class="line"><span class="undefined">        $("#btn2").bind("click",function () &#123;</span></div><div class="line"><span class="undefined">            var url = "$&#123;pageContext.request.contextPath&#125;/websocket/sendMsg";</span></div><div class="line"><span class="undefined">            var content =  $("#text").val();</span></div><div class="line"><span class="undefined">            var toUserName = "admin"</span></div><div class="line"><span class="undefined">            $.ajax(&#123;</span></div><div class="line"><span class="undefined">                data: "content=" + content + "&amp;toUserName=" + toUserName,</span></div><div class="line"><span class="undefined">                type: "get",</span></div><div class="line"><span class="undefined">                dataType: 'text',</span></div><div class="line"><span class="undefined">                async: false,</span></div><div class="line"><span class="undefined">                contentType: "application/x-www-form-urlencoded;charset=UTF-8",</span></div><div class="line"><span class="undefined">                encoding: "UTF-8",</span></div><div class="line"><span class="undefined">                url: url,</span></div><div class="line"><span class="undefined">                success: function (data) &#123;</span></div><div class="line"><span class="undefined">                    alert(data.toString());</span></div><div class="line"><span class="undefined">                &#125;,</span></div><div class="line"><span class="undefined">                error: function (msg) &#123;</span></div><div class="line"><span class="undefined">                    alert(msg);</span></div><div class="line"><span class="undefined">                &#125;,</span></div><div class="line"><span class="undefined"></span></div><div class="line"><span class="undefined">            &#125;);</span></div><div class="line"><span class="undefined"></span></div><div class="line"><span class="undefined">        &#125;)</span></div><div class="line"><span class="undefined">    &#125;);</span></div><div class="line"><span class="undefined"></span></div><div class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">当前登录用户：$&#123;pageContext.session.getAttribute("user").name&#125;<span class="tag">&lt;<span class="name">br</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">id</span>=<span class="string">"text"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">"btn1"</span> <span class="attr">value</span>=<span class="string">"发送给后台"</span>&gt;</span>发送给后台<span class="tag">&lt;/<span class="name">button</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">"btn2"</span> <span class="attr">value</span>=<span class="string">"发送给其他用户"</span>&gt;</span>发送给其他用户<span class="tag">&lt;/<span class="name">button</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"msg"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure></p>
<h2 id="启动项目"><a href="#启动项目" class="headerlink" title="启动项目"></a>启动项目</h2><p>在控制可以看到socket注册成功<br><img src="http://oy09glbzm.bkt.clouddn.com/17-11-22/12127517.jpg" alt=""><br>访问页面，第一个用户使用admin登录，第二个使用1234登录<br><img src="http://oy09glbzm.bkt.clouddn.com/17-11-22/50674851.jpg" alt=""><img src="http://oy09glbzm.bkt.clouddn.com/17-11-22/16242008.jpg" alt=""><br>首先将消息发送给后台，后台打印消息<br><img src="http://oy09glbzm.bkt.clouddn.com/17-11-22/37329041.jpg" alt=""><br>使用1234用户发送消息给admin<br><img src="http://oy09glbzm.bkt.clouddn.com/17-11-22/51622418.jpg" alt=""></p>
<h2 id="爬坑"><a href="#爬坑" class="headerlink" title="爬坑"></a>爬坑</h2><p>在Springmvc项目中都会指定连接访问的后缀，比如.do、.action，但是这里会导致按照以上配置会导致前端连接socket服务时404。我的解决办法是修改web.xml，将<code>DispatcherServlet</code>的<code>&lt;url-pattern&gt;</code>改为<code>/</code>。。。但是新的问题又出现了，页面无法加载资源文件，所以还需要在SpringMVC.xml中添加对静态资源的配置，这里具体的<code>mapping</code>和<code>location</code>看自己的具体项目。<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">mvc:resources</span> <span class="attr">mapping</span>=<span class="string">"/css/**"</span> <span class="attr">location</span>=<span class="string">"/css/"</span> /&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">mvc:resources</span> <span class="attr">mapping</span>=<span class="string">"/images/**"</span> <span class="attr">location</span>=<span class="string">"/images/"</span> /&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">mvc:resources</span> <span class="attr">mapping</span>=<span class="string">"/js/**"</span> <span class="attr">location</span>=<span class="string">"/js/"</span> /&gt;</span></div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;WebSocket&quot;&gt;&lt;a href=&quot;#WebSocket&quot; class=&quot;headerlink&quot; title=&quot;WebSocket&quot;&gt;&lt;/a&gt;WebSocket&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;WebSocket协议支持（在受控环境中运行不受信任的代码的）客户端与（选择加入该代码的通信的）远程主机之间进行全双工通信。用于此的安全模型是Web浏览器常用的基于原始的安全模式。 协议包括一个开放的握手以及随后的TCP层上的消息帧。 该技术的目标是为基于浏览器的、需要和服务器进行双向通信的（服务器不能依赖于打开多个HTTP连接（例如，使用XMLHttpRequest或&lt;code&gt;&amp;lt;&lt;/code&gt;iframe&amp;gt;和长轮询））应用程序提供一种通信机制。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;socket消息推送流程&quot;&gt;&lt;a href=&quot;#socket消息推送流程&quot; class=&quot;headerlink&quot; title=&quot;socket消息推送流程&quot;&gt;&lt;/a&gt;socket消息推送流程&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;后台创建socket服务
    
    </summary>
    
      <category term="websocket" scheme="http://www.wanqhblog.top/categories/websocket/"/>
    
    
      <category term="springmvc" scheme="http://www.wanqhblog.top/tags/springmvc/"/>
    
      <category term="websocket" scheme="http://www.wanqhblog.top/tags/websocket/"/>
    
  </entry>
  
  <entry>
    <title>SpringBoot持久化层操作</title>
    <link href="http://www.wanqhblog.top/2017/10/05/SpringBoot%E6%8C%81%E4%B9%85%E5%8C%96%E5%B1%82/"/>
    <id>http://www.wanqhblog.top/2017/10/05/SpringBoot持久化层/</id>
    <published>2017-10-05T14:26:18.000Z</published>
    <updated>2017-10-06T01:35:24.670Z</updated>
    
    <content type="html"><![CDATA[<h2 id="使用Spring-Data-Jpa操作数据库"><a href="#使用Spring-Data-Jpa操作数据库" class="headerlink" title="使用Spring Data Jpa操作数据库"></a>使用Spring Data Jpa操作数据库</h2><p>要使用Spring Data Jpa必须先添加相应的依赖<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-data-jpa<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>数据库配置信息，使用yml的配置文件，个人感觉这种配置结构更清晰<a id="more"></a><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">spring:</div><div class="line">  #数据库的配置</div><div class="line">  datasource:</div><div class="line">    driver-class-name: com.mysql.jdbc.Driver</div><div class="line">    url: jdbc:mysql://127.0.0.1:3306/springbootjpa</div><div class="line">    username: root</div><div class="line">    password: 1234</div><div class="line">  #配置jpa</div><div class="line">  jpa:</div><div class="line">    hibernate:</div><div class="line">      ddl-auto: update #设置数据库的行为</div><div class="line">    show-sql: true</div></pre></td></tr></table></figure></p>
<p>添加实体类：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Entity</span><span class="comment">//数据库表的映射</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="meta">@Id</span></div><div class="line">    <span class="meta">@GeneratedValue</span><span class="comment">//设置为自增主键</span></div><div class="line">    <span class="keyword">private</span> Integer id;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> String name;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> String age;</div><div class="line">	</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="title">User</span><span class="params">()</span></span>&#123;</div><div class="line">    &#125;	</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> Integer <span class="title">getId</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> id;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setId</span><span class="params">(Integer id)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.id = id;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> name;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.name = name;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getAge</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> age;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(String age)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.age = age;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>添加完实体类之后就可以启动项目，启动项目会自动创建User表。</p>
<h3 id="CRUD操作"><a href="#CRUD操作" class="headerlink" title="CRUD操作"></a>CRUD操作</h3><p>在Spring-Data-Jpa 中提供了一种类似于声明式编程的方式，开发者只需要编写数据访问接口（称为Repository），Spring Data JPA就能基于接口中的方法命名自动地生成实现。<br>定义 UserRepository 接口，继承JpaRepository，此接口是 Spring-Data-Jpa 内部定义好的泛型接口，第一个参数实体类，第二个参数是ID。已经帮我们实现了基本的增删改查的功能，现在只要持有 UserRepository 就能操作数据表<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Repository</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserRepository</span>  <span class="keyword">extends</span> <span class="title">JpaRepository</span> </span>&#123;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h3><p>进入源码查看接口的继承结构发现 JpaRepository继承自PagingAndSortingRepository继承自CrudRepository继承自Repository。</p>
<h4 id="Repository"><a href="#Repository" class="headerlink" title="Repository"></a>Repository</h4><p> 泛型接口，第一个参数是实体类，第二个参数是实体类ID，最顶层接口，不包含任何方法，目的是为了统一所有的 Repository 的类型，且能让组件扫描的时候自动识别<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Repository</span>&lt;<span class="title">T</span>, <span class="title">ID</span> <span class="keyword">extends</span> <span class="title">Serializable</span>&gt; </span>&#123;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h4 id="CrudRepository"><a href="#CrudRepository" class="headerlink" title="CrudRepository"></a>CrudRepository</h4><p>Repository的子接口，封装数据表的 CRUD 方法。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">CrudRepository</span>&lt;<span class="title">T</span>, <span class="title">ID</span> <span class="keyword">extends</span> <span class="title">Serializable</span>&gt; <span class="keyword">extends</span> <span class="title">Repository</span>&lt;<span class="title">T</span>, <span class="title">ID</span>&gt; </span>&#123;</div><div class="line">  &lt;S extends T&gt; <span class="function">S <span class="title">save</span><span class="params">(S var1)</span></span>;<span class="comment">//存储一条数据实体</span></div><div class="line"></div><div class="line">  &lt;S extends T&gt; <span class="function">Iterable&lt;S&gt; <span class="title">save</span><span class="params">(Iterable&lt;S&gt; var1)</span></span>;<span class="comment">//批量存储数据</span></div><div class="line"></div><div class="line">  <span class="function">T <span class="title">findOne</span><span class="params">(ID var1)</span></span>;<span class="comment">//根据id查询一条数据实体</span></div><div class="line"></div><div class="line">  <span class="function"><span class="keyword">boolean</span> <span class="title">exists</span><span class="params">(ID var1)</span></span>;<span class="comment">//判断指定id是否存在</span></div><div class="line"></div><div class="line">  <span class="function">Iterable&lt;T&gt; <span class="title">findAll</span><span class="params">()</span></span>;<span class="comment">//查询所有的数据</span></div><div class="line"></div><div class="line">  <span class="function">Iterable&lt;T&gt; <span class="title">findAll</span><span class="params">(Iterable&lt;ID&gt; var1)</span></span>;<span class="comment">//根据一组id批量查询实体</span></div><div class="line"></div><div class="line">  <span class="function"><span class="keyword">long</span> <span class="title">count</span><span class="params">()</span></span>;<span class="comment">//返回数据的条数</span></div><div class="line"></div><div class="line">  <span class="function"><span class="keyword">void</span> <span class="title">delete</span><span class="params">(ID var1)</span></span>;<span class="comment">//根据id删除数据</span></div><div class="line"></div><div class="line">  <span class="function"><span class="keyword">void</span> <span class="title">delete</span><span class="params">(T var1)</span></span>;<span class="comment">//删除数据</span></div><div class="line"></div><div class="line">  <span class="function"><span class="keyword">void</span> <span class="title">delete</span><span class="params">(Iterable&lt;? extends T&gt; var1)</span></span>;<span class="comment">//批量删除数据</span></div><div class="line"></div><div class="line">  <span class="function"><span class="keyword">void</span> <span class="title">deleteAll</span><span class="params">()</span></span>;<span class="comment">//删除所有数据</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h4 id="PagingAndSortingRepository"><a href="#PagingAndSortingRepository" class="headerlink" title="PagingAndSortingRepository"></a>PagingAndSortingRepository</h4><p>CrudRepository的子接口，扩展了分页和排序功能。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">PagingAndSortingRepository</span>&lt;<span class="title">T</span>, <span class="title">ID</span> <span class="keyword">extends</span> <span class="title">Serializable</span>&gt; <span class="keyword">extends</span> <span class="title">CrudRepository</span>&lt;<span class="title">T</span>, <span class="title">ID</span>&gt; </span>&#123;</div><div class="line">  <span class="function">Iterable&lt;T&gt; <span class="title">findAll</span><span class="params">(Sort var1)</span></span>;<span class="comment">//根据某个排序获取所有数据</span></div><div class="line">  <span class="function">Page&lt;T&gt; <span class="title">findAll</span><span class="params">(Pageable var1)</span></span>;<span class="comment">//根据分页信息获取某一页的数据</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h4 id="JpaRepository"><a href="#JpaRepository" class="headerlink" title="JpaRepository"></a>JpaRepository</h4><p>PagingAndSortingRepository的子接口，增加一些实用的功能, 如批量操作<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">JpaRepository</span>&lt;<span class="title">T</span>, <span class="title">ID</span> <span class="keyword">extends</span> <span class="title">Serializable</span>&gt; <span class="keyword">extends</span> <span class="title">PagingAndSortingRepository</span>&lt;<span class="title">T</span>, <span class="title">ID</span>&gt; </span>&#123;</div><div class="line">  <span class="function">List&lt;T&gt; <span class="title">findAll</span><span class="params">()</span></span>; <span class="comment">//获取所有数据，以List的方式返回</span></div><div class="line"></div><div class="line">  <span class="function">List&lt;T&gt; <span class="title">findAll</span><span class="params">(Sort var1)</span></span>; <span class="comment">//根据某个排序获取所有数据，以List的方式返回</span></div><div class="line"></div><div class="line">  <span class="function">List&lt;T&gt; <span class="title">findAll</span><span class="params">(Iterable&lt;ID&gt; var1)</span></span>; <span class="comment">//根据一组id返回对应的对象，以List的方式返回</span></div><div class="line"></div><div class="line">  &lt;S extends T&gt; <span class="function">List&lt;S&gt; <span class="title">save</span><span class="params">(Iterable&lt;S&gt; var1)</span></span>; <span class="comment">//将一组对象持久化到数据库中，以List的方式返回</span></div><div class="line"></div><div class="line">  <span class="function"><span class="keyword">void</span> <span class="title">flush</span><span class="params">()</span></span>; <span class="comment">//将修改更新到数据库</span></div><div class="line"></div><div class="line">  &lt;S extends T&gt; <span class="function">S <span class="title">saveAndFlush</span><span class="params">(S var1)</span></span>; <span class="comment">//保存数据并将修改更新到数据库</span></div><div class="line"></div><div class="line">  <span class="function"><span class="keyword">void</span> <span class="title">deleteInBatch</span><span class="params">(Iterable&lt;T&gt; var1)</span></span>; <span class="comment">//批量删除数据</span></div><div class="line"></div><div class="line">  <span class="function"><span class="keyword">void</span> <span class="title">deleteAllInBatch</span><span class="params">()</span></span>; <span class="comment">//批量删除所有数据</span></div><div class="line"></div><div class="line">  <span class="function">T <span class="title">getOne</span><span class="params">(ID var1)</span></span>; <span class="comment">//根据id查找并返回一个对象</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="自定义查询"><a href="#自定义查询" class="headerlink" title="自定义查询"></a>自定义查询</h3><p>Spring Data 会识别出find…By, read…By和get…By这样的前缀，从后面的命名中解析出查询的条件。方法命名的的第一个By表示查询条件的开始，多个条件可以通过And和Or来连接。</p>
<h2 id="事务处理"><a href="#事务处理" class="headerlink" title="事务处理"></a>事务处理</h2><p>在SpringData中事务的处理只需要在Service所需要加事务的方法上添加注解<strong>@Transactional</strong>，前提是使用基于组件扫描。如果使用基于注注解的配置包扫描，则需要在配置类上使用<strong>@EnableTransactionManagement</strong>来开启对事务的支持。</p>
<h2 id="SpringBoot整合Mybatis"><a href="#SpringBoot整合Mybatis" class="headerlink" title="SpringBoot整合Mybatis"></a>SpringBoot整合Mybatis</h2><p>首先需要添加mybatis-Spring的依赖：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis.spring.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">version</span>&gt;</span>1.3.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.43<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>配置文件：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">#配置数据源</div><div class="line">spring:</div><div class="line">  datasource:</div><div class="line">      driver-class-name: com.mysql.jdbc.Driver</div><div class="line">      url: jdbc:mysql://127.0.0.1:3306/springbootjpa?useUnicode=true&amp;characterEncoding=utf-8</div><div class="line">      username: root</div><div class="line">      password: 1234</div><div class="line">#mybatis的配置</div><div class="line">mybatis:</div><div class="line">  type-aliases-package: com.wqh.springbootmybatis.domain</div></pre></td></tr></table></figure></p>
<p>Maper<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Repository</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserMapper</span></span>&#123;</div><div class="line">    <span class="meta">@Select</span>(<span class="string">"select * from user"</span>)</div><div class="line">    <span class="function"><span class="keyword">public</span> List&lt;UserEntity&gt; <span class="title">findAll</span><span class="params">()</span></span>;</div><div class="line"></div><div class="line">    <span class="meta">@Insert</span>(<span class="string">"insert into user(name,age) values(#&#123;name&#125;,#&#123;age&#125;)"</span>)</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">saveUser</span><span class="params">(UserEntity user)</span></span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>这里使用的注解形式，如果需要使用xml配置方式，可以在配置文件中加入相应配置<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">config-location:   //配置文件的地址</div><div class="line">mapper-locations:  //Mapper配置文件的地址</div></pre></td></tr></table></figure></p>
<p>配置类：这里如果不使用第三方数据源（如：druid）可以不用该类；<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Configuration</span></div><div class="line"><span class="comment">//指明了扫描dao层，并且给dao层注入指定的SqlSessionTemplate</span></div><div class="line"><span class="meta">@MapperScan</span>(basePackages = <span class="string">"com.wqh.dao"</span>, sqlSessionTemplateRef = <span class="string">"sqlSessionTemplate"</span>)</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DataSourceConfig</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;spring.datasource.driver-class-name&#125;"</span>)</div><div class="line">    <span class="keyword">private</span> String driverClass;</div><div class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;spring.datasource.url&#125;"</span>)</div><div class="line">    <span class="keyword">private</span> String url;</div><div class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;spring.datasource.username&#125;"</span>)</div><div class="line">    <span class="keyword">private</span> String uasername;</div><div class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;spring.datasource.password&#125;"</span>)</div><div class="line">    <span class="keyword">private</span> String password;</div><div class="line"></div><div class="line">    <span class="meta">@Bean</span>(name = <span class="string">"dataSource"</span>)</div><div class="line">    <span class="meta">@Primary</span><span class="comment">//多数据源时，指定该Bean为主</span></div><div class="line">    <span class="function"><span class="keyword">public</span> DataSource <span class="title">dataSource</span><span class="params">()</span> </span>&#123;</div><div class="line">    	<span class="comment">//使用Druid数据源</span></div><div class="line">        DruidDataSource druidDataSource = <span class="keyword">new</span> DruidDataSource();</div><div class="line">        druidDataSource.setDriverClassName(driverClass);</div><div class="line">        druidDataSource.setUrl(url);</div><div class="line">        druidDataSource.setUsername(uasername);</div><div class="line">        druidDataSource.setPassword(password);</div><div class="line">        <span class="keyword">return</span> druidDataSource;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Bean</span>(name = <span class="string">"sqlSessionFactory"</span>)</div><div class="line">    <span class="meta">@Primary</span></div><div class="line">    <span class="function"><span class="keyword">public</span> SqlSessionFactory <span class="title">sqlSessionFactory</span><span class="params">(@Qualifier(<span class="string">"dataSource"</span>)</span> DataSource dataSource) <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">        SqlSessionFactoryBean sqlSessionFactoryBean = <span class="keyword">new</span> SqlSessionFactoryBean();</div><div class="line">        sqlSessionFactoryBean.setDataSource(dataSource);</div><div class="line">        <span class="keyword">return</span> sqlSessionFactoryBean.getObject();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Bean</span>(name = <span class="string">"dataSourceTransactionManager"</span>)</div><div class="line">    <span class="meta">@Primary</span></div><div class="line">    <span class="function"><span class="keyword">public</span> DataSourceTransactionManager <span class="title">dataSourceTransactionManager</span><span class="params">(@Qualifier(<span class="string">"dataSource"</span>)</span> DataSource dataSource) </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> DataSourceTransactionManager(dataSource);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Bean</span>(name = <span class="string">"sqlSessionTemplate"</span>)</div><div class="line">    <span class="meta">@Primary</span></div><div class="line">    <span class="function"><span class="keyword">public</span> SqlSessionTemplate <span class="title">sqlSessionTemplate</span><span class="params">(@Qualifier(<span class="string">"sqlSessionFactory"</span>)</span> SqlSessionFactory sqlSessionFactory) </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> SqlSessionTemplate(sqlSessionFactory);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>测试<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@RunWith</span>(SpringRunner.class)</div><div class="line"><span class="meta">@SpringBootTest</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserServiceTest</span> </span>&#123;</div><div class="line">    <span class="meta">@Autowired</span></div><div class="line">    <span class="keyword">private</span> UserService userService;</div><div class="line">    <span class="meta">@Test</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">saveUser</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">        UserEntity u = <span class="keyword">new</span> UserEntity();</div><div class="line">        u.setName(<span class="string">"wqh"</span>);</div><div class="line">        u.setAge(<span class="string">"23"</span>);</div><div class="line">        userService.saveUser(u);</div><div class="line"></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>参考：</p>
<ul>
<li><a href="http://www.jianshu.com/p/ff4839931c54" target="_blank" rel="external">http://www.jianshu.com/p/ff4839931c54</a></li>
<li><a href="http://www.ityouknow.com/springboot" target="_blank" rel="external">springboot(六)：如何优雅的使用mybatis</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;使用Spring-Data-Jpa操作数据库&quot;&gt;&lt;a href=&quot;#使用Spring-Data-Jpa操作数据库&quot; class=&quot;headerlink&quot; title=&quot;使用Spring Data Jpa操作数据库&quot;&gt;&lt;/a&gt;使用Spring Data Jpa操作数据库&lt;/h2&gt;&lt;p&gt;要使用Spring Data Jpa必须先添加相应的依赖&lt;br&gt;&lt;figure class=&quot;highlight xml&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;dependency&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;groupId&lt;/span&gt;&amp;gt;&lt;/span&gt;org.springframework.boot&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;groupId&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;artifactId&lt;/span&gt;&amp;gt;&lt;/span&gt;spring-boot-starter-data-jpa&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;artifactId&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;dependency&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;数据库配置信息，使用yml的配置文件，个人感觉这种配置结构更清晰
    
    </summary>
    
      <category term="Spring" scheme="http://www.wanqhblog.top/categories/Spring/"/>
    
    
      <category term="SpringBoot" scheme="http://www.wanqhblog.top/tags/SpringBoot/"/>
    
      <category term="Data-Jpa" scheme="http://www.wanqhblog.top/tags/Data-Jpa/"/>
    
      <category term="mybatis" scheme="http://www.wanqhblog.top/tags/mybatis/"/>
    
      <category term="hibernate" scheme="http://www.wanqhblog.top/tags/hibernate/"/>
    
  </entry>
  
</feed>
